%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: MacOS Roman
%%Title: kids line.eps
%%Creator: Adobe Illustrator(R) 16.0
%%For: Marharyta
%%CreationDate: 21.07.16
%%BoundingBox: 0 0 800 800
%%HiResBoundingBox: 0 0 800 800
%%CropBox: 0 0 800 800
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 16.0.0%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 16.0.0 x682 R agm 4.6676 ct 5.2591%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 128 8%%BeginData: 21284 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF%0066000066330066660066990066CC0066FF009900009933009966009999%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333%3333663333993333CC3333FF3366003366333366663366993366CC3366FF%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033%6600666600996600CC6600FF6633006633336633666633996633CC6633FF%6666006666336666666666996666CC6666FF669900669933669966669999%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF%9933009933339933669933999933CC9933FF996600996633996666996699%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100%000011111111220000002200000022222222440000004400000044444444%550000005500000055555555770000007700000077777777880000008800%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF%524C45FD80FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD81FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD83FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFF%CFFFFFFFCFFFFFFFCFFD68FFA8FD06FFA8A8FD14FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8%527DFD05FF5252A8FFCFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD64FFA87D52%FFFFA87DA8FF7D527DA8FD12FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFD0BFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFA87DA87D7D527D7D52527D7DA87DCFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFD40FF7DA87DA8FD1FFF7DA8A87D76A8FFFF767D%7D7DA8A1A8FD0FFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD05FF527D277D527DFD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FD04FFA87DA87D7D7DFF7D7D52FF7DA17DA87DFFFFFF%A8FFFFFFA8FFFFFFA8FD40FF52CAA87D7DFF7DA8FD1CFFA8A87DFF7D7D7D%A8FFFF7DFF7DFD04A8FD0EFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFF7D7DA87DA8A876FF52FFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA8A87DA8A1FFA8A8FFA87D52%A8A8A87DA8FFFFCFFFFFFFCFFFFFFFCFFD3FFFA8527DA8FFFFA17D7DCAFD%1BFF7DFF7DFF7DA8FFA852FFFF7DFD05A8FD10FFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD07FFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FF5252A8FFFD04A827A8A8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA87DCF7DFF52A8A87DA8%A87DFF52FF7DFFCFFFFFFFA8FFFFFFA8FFFFFFA8FD1FFFCAA8FD1AFFA852%7D52FFFF527DFFA8527D76A8FD1AFF7DFFA87DFFFD057DFF76FFA87DFD11%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD05FFA77D4B7D7D%7DFD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFA87D52A152FF%7DA8A87D7D527DFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFF7D7DFFA8527D527D527D7DCFFF7DA8FFCFFFFFFFCFFFFFFFCFFF%FFFFCFFD1CFF7D7DFFA87DFF7DA8FD18FFA8A8FFA8527D527DFFFFA8FD1D%FF7DA8FF7DA8FFFFFFA1A8FF7DA7FD10FFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFCAA152A8FFFFFF7DA8FF7DFFCFFFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FD08FFA8FD067DA8FD07FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF7D52A1FFCFFFFFFF7652A8FFA8FFFF%FFA8FFFFFFA8FFFFFFA8FD1AFFA87D7DFD05FF7DFFFFA1A8FD14FFA87DCF%FFA87DFD05FFA87DA8FFA1A8FD1CFF7DFD06FFA8A8FD12FFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFD05FF7D7DA8FFFFFFCFFFA87DFFFF7DA8FD04%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFA852A8767D7DFFFFFFCFFFFFFFCA%FD057DA8FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA8%A8FFCFFFFFFFA1A8FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD17FFA876FD08%FF7DA8FFFFA8A8FD13FF7DFFFFFF52FFCFFD07FFA87DFFFFA8A8FD1AFF7D%FD06FFA8A8FD14FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87D7DCA7DA8%FFFFCAFFCA527DFFCFFFA7A1FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A87DA8FF7DA8A87DFD04FFCFFF7DFF52FFFFA87DFFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF7D7DFFA8A8A8FF7DA8FD04FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FD11FFA8525276A876A87DFFFFFFA87D7DA8FD%04FF7DFD13FFA8A1FFA8A8A8A1FD06FF7DA8A8A8FF7DFD1BFF7D7D7DA87D%A87DA176FD14FFCFFFFFFFCFFFFFFFCFFD04FF7D52FFA17D527D7DA8A8A8%7D7DA8FF76FFFFFFCF7DA8FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%7DCA7DFF767DFD06FF4BA87DA87DA8FD04FFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFF7DA8FFA8A1A8FFFFCF52FFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFD0FFFCA52FFFFFF52FFA84B7DA17DFD04FFA87DFFFFFF%7DFD15FF7DA1A8A87DA8FD04FF7D7DA1A876A1FD1CFF7DFFFFA87D7DA8FF%FFA87DFD10FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF7D7DFFFF7DA8A87752FD%05FFA8FFA87DCFFFFFA87DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD04FF%A827CF7DCA527D527D527D7DA87D52A8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FD04FF7DA8FF7DA8FF7DA8FFCA7DA8FFFFFFA8FF%FFFFA8FFFFFFA8FD11FF7D7DFF7DA8FF7DA87DFD08FF7DCFFFFFA8A8FD15%FF7DA8A8FFA17DFFFF7DA8A87DA87DFD1DFF7DFFFFA8A8FF7DCFFFFF7DFD%10FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFD047DFF767DFF52FD05FFCFFFFF%A87DFFFFFF7DFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF7DA87D%A8FF7DFFA87DFF76A87DA8FD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFD04FFA1A8FF7DA8FFA8A8FFFF7DA8FFFFFFCFFFFFFFCFFFFF%FFCFFD12FF527DFF7D7DFF7D52A8FD08FF7DA8FFFF7DA8FD14FFA87DCF7D%FF7DA87DFFFF7DCA7DFD1EFF7DFFFF7DA8FF7DFFFFFF7DFD12FFA8FFFFFF%A8FFFFFFA8FFCFFFA87DFF7D277D7DA1A8FFFFFFA8FFFFFFA8FF7DA8FFFF%7DA8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87DA87DA87DCAA87D%7D7DA87DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFF7DA8FF7DA87DA8FFFF52A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FD0EFFA87DFFA87DA8A8FD0DFF7DFFFFA8A1FD15FFA87D527D52A1525252%7D7DFD1FFF7DFFFFA8A87D7DFF7DA8FD13FFCFFFFFFFCFFFFFFFCFFFA87D%A8A87DFD05FFCFFFFFFFCFFFFFFFCFFFFF7D7DA87D7DFD04FFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFF7D7D52A8527D527D7DA8FD04FFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF7DA7FF7D7D5276%52A8FD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD0CFFA87DA8A876FD11FFA8%76A17DA8FD17FF7D76FD047D52A8FD20FF7D767D7DA87DA8FD14FFA8FFFF%FFA8FFFFFFA8FFA85252A87DFD05FFA8FFFFFFA8FFFFFFA8FD04FF7D7D7D%52FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCFFFCA7D4C52%7DFD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FD047DFD07FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD0EFFA8A8A8FD14%FFA8A7FD1BFFA8FFA8FD23FFA8A8A8FD18FFCFFFFFFFCFFFFFFFCFFD07FF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD81FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD83FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFD85FFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFD0BFFCFFFFFFFCFFFFFFFCFFD6FFFA17DFD10FFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87D7DA8527D52A8FD04FFA8FF%FFFFA8FD60FFA87DFD0CFFA87D7DFD05FF76FD0CFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA852A1FD04FFCFFFFFFFCF%FFA87DCFFD05FFA87D7DFFFFFFCFFFFFFFCFFD36FFA87DA8FD27FFA8A87D%A8FD0AFF52FD08FFA87DFD0CFFA8FFFFFFA8FFFFFFCFFFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFF7DA8A8FFA8FFCFFD05FFA8FFFFFFA8FFFFFF7D%7DA87DA8A87DA8CAFFA8FD047DA8CAFFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFA8527D76FFCAFFFFFFA8FFFFFF7D7D527DCFFF%FFFFCAFFA87DCFFFFFFFA8FFFFFFA8FD1EFFA8A1A8A1FD05FF7DA8FD0AFF%A1A8FF7D527DA8FD047DA8FFA8A87D7DA8FD19FF52FFFF7DA8FD07FF767D%FFA87DFD06FF7D7DFD0CFFCFFFFFFFCFFFFF7D52A8CAFFCFFFFFFFCFFFFF%FFCFFD05FF7D52A8FF7DFD04FFA127FFFFFFCFFFFFFFCFFFFFFFA87D7D52%A8FFFFFF52A8FD06FFA87DA1FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFCA7DA8FFA87DCAFFFFFFCFFFFF7D7DFFA87DA8FFFFFFCFFFFF%7DA8FFFFFFCFFFFFFFCFFD0AFFA87DA17DCFFD0DFF527DA8FF527DCAFFFF%FF5252A8FD0BFFCA7DA8FFFFFF7DFD0AFF7DA8FD17FFA8A8FFFF7DA8FD06%FFA87DA8FFA87DA8FD05FF7DFD0AFFA8FFFFFFA8FFFFFFA8FF7D7D52A7FF%FFA8FFFFFFA8FFFFFFCAFF527DFFFF52A8A8527DFF7DA87DA8FD04FFA8FF%FFFFA8FFFFFF52FFFFFF7DA8FFFFCAFFFFFFA8FFCFFFA87DFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCAFF52FFFFFF52FD06FFA84BA1CA%FF7D7D7DFFFFA852A8FFFFA8FFFFFFA8FD0EFF7DFF7DFD0BFFCA7DFFFF7D%A8FFFF7DA8A87DFF7DCAFD0CFF7D7DA87D7DFD0BFFCA27FD18FFA87DFFCF%7D7DFD06FF7D7DFD04FF76A8FF7DA8FD0BFFCFFFFFFFCFFFFFFFCFFFA87D%FF7D7DFFCFFFFFFFCFFD04FFA87DFFA8A8FFFFA8A87D7DFFA87DFFCFFFFF%FFCFFFFFFFCFFFFFFF7D7DCAA87DFFFFCAFD057DFFFFFF527DA8FFCFFFFF%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFCF7DFFA87D52A8FD04FFA8%7D7D7DA8FD067DCFFFFFFFCFFFFFFFCFFD0EFF7DFFFF7DA8FD09FFA87DFF%FF7DFFFFA1277DFFFF52FD0FFF76CAA77DFFFF77CAFFFFCF7DA8FF52A8A8%A8FD18FF7DA8FF767D77FFFFFFA87DFF7D7D767DFD13FFA8FFFFFFA8FD04%FF7DA8FFA87DA8FFCAFFFFFFA8FFFFFF27A8FFA87DFF7D7DFFFF76A8FD04%FFA8FFFFFFA8FFFFFFA8FFFFFF52527DFF76A8FFFFCAFFFF7D4BA8FFA87D%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCFFF52FF7DA8A8%7DA8FF52A152A87D7DA8FFFFFFCFFFFFFFA8FFFFFFA8FFFFFFA8FD0CFFA8%7DFFFFA87DA8FFA8A8A8FFFFCA7DA852A87D7D7DCFFFFF7DA8FD12FF52A8%FFA8FD06FF7DA8FFFFA8A8FD19FFA8A7FF76FFFFA87D7D7DFFA8A17DFD14%FFCFFFFFFFCFFFFFFFCFFF7DA8FFFFA87D52A8A1FD047DA8FF7D52A8A8FF%FFFF767DFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA87DFF7DFFFFFFCF%FFFFA77DFFFFA8A1FD07FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFA8%7DFFA852A8FD04FF7D7DA87DA8FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD%0EFF76FD07FF7D7DCFFFFFA87DFD04FFA876A8FD14FFA8A8FFA1FD06FF7D%A8FFFFA87DFD1AFF7DA8FFFF7D7D7DA87DA1FFFF7DFD12FFA8FFFFFFA8FF%FFFFA8FD04FFA876FD06FF7DA8FFCAFFA87DA8FF7D767DFFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFA87DFF7DFFCAFD04FFA77DFFCAFF7D%7D7DA17DA8FD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCFFF52FFFFFF%A152A8FFFFFFA87DFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD11FFA87DFD05%FF52FD05FFA8A85252A8FD17FFA8A8FFA8FD06FFA8A8FD07FFA87DFD16FF%A1A8FFFFFF52FD04FF7DA8FD12FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFA8%52A8CFFF7D7DFD06FF7D7DA8FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFA87DFF7DFFCFFD04FFCF7DFD07FFA8767DA8A8FFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFA87DA8FFFF7DA8FFFF7D7DFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFD14FF7D7D7D52A8FFCAFFA8A87DA8FD1AFF52%7D7DA8FD07FFA87DA8A8FFA8FFA8A87DA87D7DCAFD13FFA87D7DFF7D7DA8%7D7DFD16FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8A8FD057DA8A8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87D527DCA%FFFFFFA8FD04FFA8FD097DA17DFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFA87D7D767DA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FD83FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFD81FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD85FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FD83FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFD81FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD85FF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFCFFF%FFFFA8FFCFFFCFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD3FFFA8527D527DA8FD3EFFCFFFFFFFCFFFFFFFCFFD07FFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFFFF7D52FFFF7D2752A8FFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD07FFCFFFFFFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD10FFA8FD2DFF52FFFFA87DA8527DFD%1AFFA8FFA8FD1EFFA8FFFFFFA8FFFFFFA8FFCFFFA8527D7D527DA8FFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFF7D527D7D7DFFFFA127FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFCFFF7D527D7D52A8FD04FFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FD0FFF7D7DA8A8FF7D7DFD29FFA8A8FFA8FF%FFA8FF7DCAFD17FF7D527DFFFFCA52FD1CFFCFFFFFFFCFFFFFFFCFFFFFA8%7DFFA87D7DFF7D7DFD04FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFA8A1FFFF7DA8FFFF7DFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFA87DFFCA52A8FFA852FFFF%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD0EFF76FFA8FFFF%A17DFF7DFD29FF7DA8FF767DFF7DA8FD17FF76A8FFFFA8A7FFFF77A8FD1C%FFA8FFFFFFA8FFFFFF7D52A8FFA8FFA87DCF7DFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFFD047D52A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCAFF%52A8FFFF7DA8FFFF7DFFCFFFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FD0CFF7DA8FD04FF7DA87DFD29FF7DA8527D527D7DA8FD18FF%76CAFFA8A8FFFF7DA8FD1CFFCFFFFFFFCFFD05FF527DFFFFFFA127A8FD0A%FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFA8%76A8A8FFFFFFA8CA7D7DA8FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFF7D52FFA8A8FFFFA87DA8FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFD0DFFCF77A8A1A87DA87D7D7DA87DA87D7DA8FD1EFFA8%7DFFFFFFA8FFA8FFFFFFCF7DA8FD16FFA87D7D7DFFA8FF7DFD1AFFA8FFFF%FFA8FFFFFFA8FD05FF7D7DA8FFFFFFA8CAA8A8A852A87D7DFFFFFFA8FFFF%FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FF76FF7DFFFF7D52527D%FFA8A8A87DFD04FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFA8525276%7D7D52A8FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD12FF%7DFD09FF76FFFF7DFD1CFFFD04A8FFFF52524B7DFFFF76FF7DFD16FFA1A8%FF7DFFFFA8FD1BFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFA87DFD04FFCFFFFF%FF7D7DFFFF7DFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFF7D527DA87DFF7DA8527D7DA87DA7A85252A8FFFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFF7DA8FFA1A8FF7DFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFD12FF7DFD08FFA17DFFFFA8A8FD19FF7DA8%CFA87D7D7DCAA87D7DFFFD047DA8FF76A8FD13FFA87DFF7DA8FFA87DFD1C%FFA8FFFFFFA8FFFFFFA8FFFFFFA8A8A8527DFFA8FFA8A852A8FFFF7DA8CF%FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA87DFD04FFFD04%7DFFA87DA87DA8CFFFFFA876FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FF7DA8FF7DA8FFFF7D76CACAFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FD10FF7DFF7DA87DA77DA17D7DCAFFFFA1A8FD19FF7DA8FD04FF%A87D7DFFA87D7DFD05FF7DA8FD13FFA8A8FF7DFD04FFA87D7DA8FD18FFCF%FFFFFFCFFFFFFFCFFFFFFFA8A8A87DFFFFCFFFFFFF7DA8FFFFA87DA8FFCA%FD05FFCFFFFFFFCFFFFFFFCFFFFFFFCFFD04FFCA52A8CFFD04FFA1277DA8%FD05FF7D7DCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF7DA8A87DFD%06FFA87DA8FFCFFFA8FFCFFFA8FFFFFFCFFFFFFFCFFFFFFFCFFD0FFFA87D%CA7DFD06FFA87DFFFFFFA87D7DA87DA8FD16FF7D7DA8FFFF7D7DFD06FFA8%76A8FD15FF7DFFA87DFD07FFA87D7DA87DA87DA87DA17DFD0CFFA8FFFFFF%A8FFFFFFA8FFFFFFCFFF7DA87DA8FFFFA8FFFFFFA87DA8FFA8FFFFFFCAA8%7DFD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFCFFFA87D527D7DFD05FF%7D527DFD05FFA8FFFFFFA8FFFFFFA8FFFFFFA8FD05FF7DFF527D7DFD05FF%A8FFCAFFA8FFA8FFA8FFCA7DA8FFFFFFA8FFFFFFA8FD10FFA1A8A8A1FD08%FFA87DA8FD05FFA8767DCAFD16FF7DA8FD05FFCA7DA87DA8FD16FF7DFF7D%A8FF7D7DFD0FFF7DA8A8FD0AFFCFFFFFFFCFFFFFFFCFFFFF7D2752A77DA8%FFFFFFCFFFFFFFCFFFA87D7DFD05A852A8527DCFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFF7D7DFFFFFFA87D7DFFFF7D7DFFCFFFFFFFCFFFFF%FFCFFFFFFFCFFFFFFFCFFFFFFF527D7D7DFFFFFFA8527D7DA8A8FFA8A8A8%FFA8A8A8FFA8FD047DFFCFFFFFFFCFFD0EFFA87D7DA8FD0DFFA87DA87DA8%7DA87DA8A8FD15FF7D7D7DFF7D7D52A8FF7D52A8FD15FFA87DA8FD06FFA8%A87DA17DA87DA87DA87DA87DA87DA87DFD0CFFA8FFFFFFA8FFFFFFA8FD05%FFCFFFA8FFFFFFA8FFFFFFA8FD0BFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFF%FFA8FFFFFFA1A87D5252A8FFFF7D7D52A87DFFFFFFA8FFFFFFA8FFFFFFA8%FFFFFFA8FFFFFFA8FD07FFA8FD17FFA8FFFFFFA8FD3BFFA8767DFD08FF76%7DA8FD3AFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCF%FFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFF%FFA8A8FD06FFCFFFFFCA7DFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFD81FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FD83FFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFD85FFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FD83FFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFF%FFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFFCFFFFFFF%CFFFFFFFCFFFFFFFCFFD81FFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FF%FFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%A8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFFA8FFFFFF%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                        
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 32 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 32 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.%%Version: 2.31 010 dict begin/Adobe_CoolType_Passthru currentdict def/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known defAdobe_CoolType_Core_Defined	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}ifuserdict/Adobe_CoolType_Core 70 dict dup begin put/Adobe_CoolType_Version 2.31 def/Level2?	systemdict/languagelevel known dup		{pop systemdict/languagelevel get 2 ge}	if defLevel2? not	{	/currentglobal false def	/setglobal/pop load def	/gcheck{pop false}bind def	/currentpacking false def	/setpacking/pop load def	/SharedFontDirectory 0 dict def	}ifcurrentpackingtrue setpackingcurrentglobal false setglobaluserdict/Adobe_CoolType_Data 2 copy known not	{2 copy 10 dict put}ifget	 begin	/@opStackCountByLevel 32 dict def	/@opStackLevel 0 def	/@dictStackCountByLevel 32 dict def	/@dictStackLevel 0 def	 endsetglobalcurrentglobal true setglobaluserdict/Adobe_CoolType_GVMFonts known not	{userdict/Adobe_CoolType_GVMFonts 10 dict put}ifsetglobalcurrentglobal false setglobaluserdict/Adobe_CoolType_LVMFonts known not	{userdict/Adobe_CoolType_LVMFonts 10 dict put}ifsetglobal/ct_VMDictPut	{	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse	3 1 roll put	}bind def/ct_VMDictUndef	{	dup Adobe_CoolType_GVMFonts exch known		{Adobe_CoolType_GVMFonts exch undef}		{			dup Adobe_CoolType_LVMFonts exch known			{Adobe_CoolType_LVMFonts exch undef}			{pop}			ifelse		}ifelse	}bind def/ct_str1 1 string def/ct_xshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_yshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			_ct_x _ct_y moveto			0 exch			rmoveto		}		ifelse		/_ct_i _ct_i 1 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/ct_xyshow{	/_ct_na exch def	/_ct_i 0 def	currentpoint	/_ct_y exch def	/_ct_x exch def	{		pop pop		ct_str1 exch 0 exch put		ct_str1 show		{_ct_na _ct_i get}stopped 		{pop pop}		{			{_ct_na _ct_i 1 add get}stopped 			{pop pop pop}			{				_ct_x _ct_y moveto				rmoveto			}			ifelse		}		ifelse		/_ct_i _ct_i 2 add def		currentpoint		/_ct_y exch def		/_ct_x exch def	}	exch	@cshow}bind def/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind defcurrentglobal true setglobal/ct_T3Defs{/BuildChar{	1 index/Encoding get exch get	1 index/BuildGlyph get exec}bind def/BuildGlyph{	exch begin	GlyphProcs exch get exec	end}bind def}bind defsetglobal/@_SaveStackLevels	{	Adobe_CoolType_Data		begin		/@vmState currentglobal def false setglobal		@opStackCountByLevel		@opStackLevel		2 copy known not			{			2 copy			3 dict dup/args			7 index			5 add array put			put get			}			{			get dup/args get dup length 3 index lt				{				dup length 5 add array exch				1 index exch 0 exch putinterval				1 index exch/args exch put				}				{pop}			ifelse			}		ifelse			begin			count 1 sub			1 index lt				{pop count}			if			dup/argCount exch def			dup 0 gt				{				args exch 0 exch getinterval 			astore pop				}				{pop}			ifelse			count			/restCount exch def			end		/@opStackLevel @opStackLevel 1 add def		countdictstack 1 sub		@dictStackCountByLevel exch @dictStackLevel exch put		/@dictStackLevel @dictStackLevel 1 add def		@vmState setglobal		end	}bind def/@_RestoreStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		@opStackCountByLevel @opStackLevel get			begin			count restCount sub dup 0 gt				{{pop}repeat}				{pop}			ifelse			args 0 argCount getinterval{}forall			end		/@dictStackLevel @dictStackLevel 1 sub def		@dictStackCountByLevel @dictStackLevel get		end	countdictstack exch sub dup 0 gt		{{end}repeat}		{pop}	ifelse	}bind def/@_PopStackLevels	{	Adobe_CoolType_Data		begin		/@opStackLevel @opStackLevel 1 sub def		/@dictStackLevel @dictStackLevel 1 sub def		end	}bind def/@Raise	{	exch cvx exch errordict exch get exec	stop	}bind def/@ReRaise	{	cvx $error/errorname get errordict exch get exec	stop	}bind def/@Stopped	{	0 @#Stopped	}bind def/@#Stopped	{	@_SaveStackLevels	stopped		{@_RestoreStackLevels true}		{@_PopStackLevels false}	ifelse	}bind def/@Arg	{	Adobe_CoolType_Data		begin		@opStackCountByLevel @opStackLevel 1 sub get		begin		args exch		argCount 1 sub exch sub get		end		end	}bind defcurrentglobal true setglobal/CTHasResourceForAllBug	Level2?		{		1 dict dup				/@shouldNotDisappearDictValue true def				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put				begin				count @_SaveStackLevels					{(*){pop stop}128 string/Category resourceforall}				stopped pop				@_RestoreStackLevels				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll					{						 /@shouldNotDisappearDictValue known								{										 {												end												currentdict 1 index eq													{pop exit}												if										 }									 loop								}						 if					}					{						 pop						 end					}				ifelse		}		{false}	ifelse	deftrue setglobal/CTHasResourceStatusBug	Level2?		{		mark			{/steveamerige/Category resourcestatus}		stopped			{cleartomark true}			{cleartomark currentglobal not}		ifelse		}		{false}	ifelse	defsetglobal/CTResourceStatus		{		mark 3 1 roll		/Category findresource			begin			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec				{cleartomark false}				{{3 2 roll pop true}{cleartomark false}ifelse}			ifelse			end		}bind def/CTWorkAroundBugs	{	Level2?		{		/cid_PreLoad/ProcSet resourcestatus			{			pop pop			currentglobal			mark				{				(*)					{					dup/CMap CTHasResourceStatusBug						{CTResourceStatus}						{resourcestatus}					ifelse						{						pop dup 0 eq exch 1 eq or							{							dup/CMap findresource gcheck setglobal							/CMap undefineresource							}							{							pop CTHasResourceForAllBug								{exit}								{stop}							ifelse							}						ifelse						}						{pop}					ifelse					}				128 string/CMap resourceforall				}			stopped				{cleartomark}			stopped pop			setglobal			}		if		}	if	}bind def/ds	{	Adobe_CoolType_Core		begin		CTWorkAroundBugs		/mo/moveto load def		/nf/newencodedfont load def		/msf{makefont setfont}bind def		/uf{dup undefinefont ct_VMDictUndef}bind def		/ur/undefineresource load def		/chp/charpath load def		/awsh/awidthshow load def		/wsh/widthshow load def		/ash/ashow load def		/@xshow/xshow load def		/@yshow/yshow load def		/@xyshow/xyshow load def		/@cshow/cshow load def		/sh/show load def		/rp/repeat load def		/.n/.notdef def		end		currentglobal false setglobal	 userdict/Adobe_CoolType_Data 2 copy known not		 {2 copy 10 dict put}		if		get		begin		/AddWidths? false def		/CC 0 def		/charcode 2 string def		/@opStackCountByLevel 32 dict def		/@opStackLevel 0 def		/@dictStackCountByLevel 32 dict def		/@dictStackLevel 0 def		/InVMFontsByCMap 10 dict def		/InVMDeepCopiedFonts 10 dict def		end		setglobal	}bind def/dt	{	currentdict Adobe_CoolType_Core eq		{end}	if	}bind def/ps	{	Adobe_CoolType_Core begin	Adobe_CoolType_GVMFonts begin	Adobe_CoolType_LVMFonts begin	SharedFontDirectory begin	}bind def/pt	{	end	end	end	end	}bind def/unload	{	systemdict/languagelevel known		{		systemdict/languagelevel get 2 ge			{			userdict/Adobe_CoolType_Core 2 copy known				{undef}				{pop pop}			ifelse			}		if		}	if	}bind def/ndf	{	1 index where		{pop pop pop}		{dup xcheck{bind}if def}	ifelse	}def/findfont systemdict	begin	userdict		begin		/globaldict where{/globaldict get begin}if			dup where pop exch get		/globaldict where{pop end}if		end	endAdobe_CoolType_Core_Defined	{/systemfindfont exch def}	{	/findfont 1 index def	/systemfindfont exch def	}ifelse/undefinefont	{pop}ndf/copyfont	{	currentglobal 3 1 roll	1 index gcheck setglobal	dup null eq{0}{dup length}ifelse	2 index length add 1 add dict		begin		exch			{			1 index/FID eq				{pop pop}				{def}			ifelse			}		forall		dup null eq			{pop}			{{def}forall}		ifelse		currentdict		end	exch setglobal	}bind def/copyarray	{	currentglobal exch	dup gcheck setglobal	dup length array copy	exch setglobal	}bind def/newencodedfont	{	currentglobal		{		SharedFontDirectory 3 index known			{SharedFontDirectory 3 index get/FontReferenced known}			{false}		ifelse		}		{		FontDirectory 3 index known			{FontDirectory 3 index get/FontReferenced known}			{			SharedFontDirectory 3 index known				{SharedFontDirectory 3 index get/FontReferenced known}				{false}			ifelse			}		ifelse		}	ifelse	dup		{		3 index findfont/FontReferenced get		2 index dup type/nametype eq			{findfont}		if ne			{pop false}		if		}	if	dup		{		1 index dup type/nametype eq			{findfont}		 if		dup/CharStrings known			{			/CharStrings get length			4 index findfont/CharStrings get length			ne				{				pop false				}			if 			}			{pop}			ifelse		}	if		{		pop		1 index findfont		/Encoding get exch		0 1 255			{2 copy get 3 index 3 1 roll put}		for		pop pop pop		}		{		currentglobal	 4 1 roll		dup type/nametype eq		 {findfont}	 if	 dup gcheck setglobal		dup dup maxlength 2 add dict			begin			exch				{				1 index/FID ne				2 index/Encoding ne and					{def}					{pop pop}				ifelse				}			forall			/FontReferenced exch def			/Encoding exch dup length array copy def			/FontName 1 index dup type/stringtype eq{cvn}if def dup			currentdict			end		definefont ct_VMDictPut		setglobal		}	ifelse	}bind def/SetSubstituteStrategy	{	$SubstituteFont		begin		dup type/dicttype ne			{0 dict}		if		currentdict/$Strategies known			{			exch $Strategies exch 			2 copy known				{				get				2 copy maxlength exch maxlength add dict					begin					{def}forall					{def}forall					currentdict					dup/$Init known						{dup/$Init get exec}					if					end				/$Strategy exch def				}				{pop pop pop}			ifelse			}			{pop pop}		ifelse		end	}bind def/scff	{	$SubstituteFont		begin		dup type/stringtype eq			{dup length exch}			{null}		ifelse		/$sname exch def		/$slen exch def		/$inVMIndex			$sname null eq				{				1 index $str cvs				dup length $slen sub $slen getinterval cvn				}				{$sname}			ifelse def		end		{findfont}	@Stopped		{		dup length 8 add string exch		1 index 0(BadFont:)putinterval		1 index exch 8 exch dup length string cvs putinterval cvn			{findfont}		@Stopped			{pop/Courier findfont}		if		}	if	$SubstituteFont		begin		/$sname null def		/$slen 0 def		/$inVMIndex null def		end	}bind def/isWidthsOnlyFont	{	dup/WidthsOnly known		{pop pop true}		{		dup/FDepVector known			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}			{			dup/FDArray known				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}				{pop}			ifelse			}		ifelse		}	ifelse	}bind def/ct_StyleDicts 4 dict dup begin		 /Adobe-Japan1 4 dict dup begin					 Level2?								{								/Serif								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMin-W3}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMin-W3/CIDFont resourcestatus								{pop pop/HeiseiMin-W3}								{/Ryumin-Light}								ifelse							}							{/Ryumin-Light}							ifelse								}								ifelse								def								/SansSerif								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiKakuGo-W5}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiKakuGo-W5/CIDFont resourcestatus								{pop pop/HeiseiKakuGo-W5}								{/GothicBBB-Medium}								ifelse							}							{/GothicBBB-Medium}							ifelse								}								ifelse								def								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus								{pop pop/HeiseiMaruGo-W4}								{							/CIDFont/Category resourcestatus							{								pop pop								/HeiseiMaruGo-W4/CIDFont resourcestatus								{pop pop/HeiseiMaruGo-W4}								{									/Jun101-Light-RKSJ-H/Font resourcestatus									{pop pop/Jun101-Light}									{SansSerif}									ifelse								}								ifelse							}							{								/Jun101-Light-RKSJ-H/Font resourcestatus								{pop pop/Jun101-Light}								{SansSerif}								ifelse							}							ifelse								}								ifelse								/RoundSansSerif exch def								/Default Serif def								}								{								/Serif/Ryumin-Light def								/SansSerif/GothicBBB-Medium def								{								(fonts/Jun101-Light-83pv-RKSJ-H)status								}stopped								{pop}{										 {pop pop pop pop/Jun101-Light}										 {SansSerif}										 ifelse										 /RoundSansSerif exch def								}ifelse								/Default Serif def								}					 ifelse		 end		 def		 /Adobe-Korea1 4 dict dup begin					/Serif/HYSMyeongJo-Medium def					/SansSerif/HYGoThic-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-GB1 4 dict dup begin					/Serif/STSong-Light def					/SansSerif/STHeiti-Regular def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 def		 /Adobe-CNS1 4 dict dup begin					/Serif/MKai-Medium def					/SansSerif/MHei-Medium def					/RoundSansSerif SansSerif def					/Default Serif def		 end		 defenddefLevel2?{currentglobal true setglobal}if/ct_BoldRomanWidthProc 	{	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth	0 0	}bind def/ct_Type0WidthProc 	{	 dup stringwidth 0 0 moveto 	 2 index true charpath pathbbox	 0 -1 	 7 index 2 div .88 	 setcachedevice2	 pop	0 0	}bind def/ct_Type0WMode1WidthProc 	{	 dup stringwidth 	 pop 2 div neg -0.88	2 copy	moveto 	0 -1	 5 -1 roll true charpath pathbbox	 setcachedevice	}bind def/cHexEncoding[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def/ct_BoldBaseFont 	 11 dict begin		/FontType 3 def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/Encoding cHexEncoding def 		/_setwidthProc/ct_BoldRomanWidthProc load def		/_bcstr1 1 string def		/BuildChar		{			exch begin				_basefont setfont				_bcstr1 dup 0 4 -1 roll put				dup 				_setwidthProc				3 copy 				moveto								show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end defsystemdict/composefont known{/ct_DefineIdentity-H{	/Identity-H/CMap resourcestatus	{		pop pop	}	{		/CIDInit/ProcSet findresource begin		 12 dict begin		 begincmap		 /CIDSystemInfo 3 dict dup begin			 /Registry(Adobe)def			 /Ordering(Identity)def			 /Supplement 0 def		 end def		 /CMapName/Identity-H def		 /CMapVersion 1.000 def		 /CMapType 1 def		 1 begincodespacerange		 <0000><FFFF>		 endcodespacerange		 1 begincidrange		 <0000><FFFF>0		 endcidrange		 endcmap		 CMapName currentdict/CMap defineresource pop		 end		 end	 }	 ifelse}def/ct_BoldBaseCIDFont 	 11 dict begin		/CIDFontType 1 def		/CIDFontName/ct_BoldBaseCIDFont def		/FontMatrix[1 0 0 1 0 0]def		/FontBBox[0 0 1 1]def		/_setwidthProc/ct_Type0WidthProc load def		/_bcstr2 2 string def		/BuildGlyph		{			exch begin		 				_basefont setfont				_bcstr2 1 2 index 256 mod put				_bcstr2 0 3 -1 roll 256 idiv put				_bcstr2 dup _setwidthProc		 				3 copy 				moveto				show				_basefonto setfont				moveto				show			end		}bind def		 currentdict	 end def}ifLevel2?{setglobal}if/ct_CopyFont{	{		1 index/FID ne 2 index/UniqueID ne and		{def}{pop pop}ifelse	}forall}bind def/ct_Type0CopyFont {	exch	dup length dict	begin	ct_CopyFont	[	exch	FDepVector 	{		 dup/FontType get 0 eq		{			1 index ct_Type0CopyFont 		/_ctType0 exch definefont		}		{		/_ctBaseFont exch		2 index exec		}		 ifelse 		 exch	}	forall 	pop	]					/FDepVector exch def	currentdict	end}bind def/ct_MakeBoldFont{	 dup/ct_SyntheticBold known	{		dup length 3 add dict begin 		ct_CopyFont 		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 		/ct_SyntheticBold true def		currentdict 		end 		definefont	}	{		dup dup length 3 add dict		begin			ct_CopyFont			/PaintType 2 def			/StrokeWidth .03 0 FontMatrix idtransform pop def			/dummybold currentdict		end		definefont		dup/FontType get dup 9 ge exch 11 le and 		{			ct_BoldBaseCIDFont			dup length 3 add dict copy begin			dup/CIDSystemInfo get/CIDSystemInfo exch def			ct_DefineIdentity-H			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefont exch def			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont			/_basefonto exch def			currentdict			end			/CIDFont defineresource		}		{			ct_BoldBaseFont			dup length 3 add dict copy begin			/_basefont exch def			/_basefonto exch def			currentdict			end			definefont		}		ifelse	}	ifelse}bind def/ct_MakeBold{	1 index 	1 index	findfont	currentglobal 5 1 roll	dup gcheck setglobal		dup		 /FontType get 0 eq			{				dup/WMode known{dup/WMode get 1 eq}{false}ifelse				version length 4 ge				and					{version 0 4 getinterval cvi 2015 ge}					{true}				ifelse 					{/ct_Type0WidthProc}					{/ct_Type0WMode1WidthProc}				ifelse				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put						{ct_MakeBoldFont}ct_Type0CopyFont definefont			}			{				dup/_fauxfont known not 1 index/SubstMaster known not and				{					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put					 ct_MakeBoldFont 				}				{				2 index 2 index eq					{exch pop	}					{						dup length dict begin						ct_CopyFont						currentdict						end						definefont 					}				ifelse				}			ifelse			}		 ifelse		 pop pop pop		 setglobal}bind def/?str1 256 string def/?set	{	$SubstituteFont		begin		/$substituteFound false def		/$fontname 1 index def		/$doSmartSub false def		end	dup	 findfont	$SubstituteFont		begin		$substituteFound			{false}			{			dup/FontName known				{				dup/FontName get $fontname eq				1 index/DistillerFauxFont known not and				/currentdistillerparams where					{pop false 2 index isWidthsOnlyFont not and}				if				}				{false}			ifelse			}		ifelse		exch pop		/$doSmartSub true def		end		{		5 1 roll pop pop pop pop		findfont		}		{		1 index		findfont		dup/FontType get 3 eq		{			6 1 roll pop pop pop pop pop false		}		{pop true}		ifelse		{		$SubstituteFont		begin		pop pop		/$styleArray 1 index def		/$regOrdering 2 index def		pop pop		0 1 $styleArray length 1 sub		{			$styleArray exch get			ct_StyleDicts $regOrdering			2 copy known			{				get				exch 2 copy known not				{pop/Default}				if				get				dup type/nametype eq				{				?str1 cvs length dup 1 add exch				?str1 exch(-)putinterval				exch dup length exch ?str1 exch 3 index exch putinterval				add ?str1 exch 0 exch getinterval cvn				}				{				pop pop/Unknown				}				ifelse			}			{				pop pop pop pop/Unknown			}			ifelse		}		for		end		findfont 		}if		}	ifelse	currentglobal false setglobal 3 1 roll	null copyfont definefont pop	setglobal	}bind defsetpackinguserdict/$SubstituteFont 25 dict put1 dict	begin	/SubstituteFont		dup $error exch 2 copy known			{get}			{pop pop{pop/Courier}bind}		ifelse def	/currentdistillerparams where dup		{		pop pop		currentdistillerparams/CannotEmbedFontPolicy 2 copy known			{get/Error eq}			{pop pop false}		ifelse		}	if not		{		countdictstack array dictstack 0 get			begin			userdict				begin				$SubstituteFont					begin					/$str 128 string def					/$fontpat 128 string def					/$slen 0 def					/$sname null def					/$match false def					/$fontname null def					/$substituteFound false def					/$inVMIndex null def					/$doSmartSub true def					/$depth 0 def					/$fontname null def					/$italicangle 26.5 def					/$dstack null def					/$Strategies 10 dict dup						begin						/$Type3Underprint							{							currentglobal exch false setglobal							11 dict								begin								/UseFont exch									$WMode 0 ne										{										dup length dict copy										dup/WMode $WMode put										/UseFont exch definefont										}									if def								/FontName $fontname dup type/stringtype eq{cvn}if def								/FontType 3 def								/FontMatrix[.001 0 0 .001 0 0]def								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def								/FontBBox[0 0 0 0]def								/CCInfo 7 dict dup									begin									/cc null def									/x 0 def									/y 0 def									end def								/BuildChar									{									exch										begin										CCInfo											begin											1 string dup 0 3 index put exch pop											/cc exch def											UseFont 1000 scalefont setfont											cc stringwidth/y exch def/x exch def											x y setcharwidth											$SubstituteFont/$Strategy get/$Underprint get exec											0 0 moveto cc show											x y moveto											end										end									}bind def								currentdict								end							exch setglobal							}bind def						/$GetaTint							2 dict dup								begin								/$BuildFont									{									dup/WMode known										{dup/WMode get}										{0}									ifelse									/$WMode exch def									$fontname exch									dup/FontName known										{										dup/FontName get										dup type/stringtype eq{cvn}if										}										{/unnamedfont}									ifelse									exch									Adobe_CoolType_Data/InVMDeepCopiedFonts get									1 index/FontName get known										{										pop										Adobe_CoolType_Data/InVMDeepCopiedFonts get										1 index get										null copyfont										}										{$deepcopyfont}									ifelse									exch 1 index exch/FontBasedOn exch put									dup/FontName $fontname dup type/stringtype eq{cvn}if put									definefont									Adobe_CoolType_Data/InVMDeepCopiedFonts get										begin										dup/FontBasedOn get 1 index def										end									}bind def								/$Underprint									{									gsave									x abs y abs gt										{/y 1000 def}										{/x -1000 def 500 120 translate}									ifelse									Level2?										{										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]										setcolorspace										}										{0 setgray}									ifelse									10 setlinewidth									x .8 mul									[7 3]										{										y mul 8 div 120 sub x 10 div exch moveto										0 y 4 div neg rlineto										dup 0 rlineto										0 y 4 div rlineto										closepath										gsave										Level2?											{.2 setcolor}											{.8 setgray}										ifelse										fill grestore										stroke										}									forall									pop									grestore									}bind def								end def						/$Oblique							1 dict dup								begin								/$BuildFont									{									currentglobal exch dup gcheck setglobal									null copyfont										begin										/FontBasedOn										currentdict/FontName known											{											FontName											dup type/stringtype eq{cvn}if											}											{/unnamedfont}										ifelse										def										/FontName $fontname dup type/stringtype eq{cvn}if def										/currentdistillerparams where											{pop}											{											/FontInfo currentdict/FontInfo known												{FontInfo null copyfont}												{2 dict}											ifelse											dup												begin												/ItalicAngle $italicangle def												/FontMatrix FontMatrix												[1 0 ItalicAngle dup sin exch cos div 1 0 0]												matrix concatmatrix readonly												end											4 2 roll def											def											}										ifelse										FontName currentdict										end									definefont									exch setglobal									}bind def								end def						/$None							1 dict dup								begin								/$BuildFont{}bind def								end def						end def					/$Oblique SetSubstituteStrategy					/$findfontByEnum						{						dup type/stringtype eq{cvn}if						dup/$fontname exch def						$sname null eq							{$str cvs dup length $slen sub $slen getinterval}							{pop $sname}						ifelse						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval						/$match false def						$SubstituteFont/$dstack countdictstack array dictstack put						mark							{							$fontpat 0 $slen 7 add getinterval								{/$match exch def exit}							$str filenameforall							}						stopped							{							cleardictstack							currentdict							true							$SubstituteFont/$dstack get								{								exch									{									1 index eq										{pop false}										{true}									ifelse									}									{begin false}								ifelse								}							forall							pop							}						if						cleartomark						/$slen 0 def						$match false ne							{$match(fonts/)anchorsearch pop pop cvn}							{/Courier}						ifelse						}bind def					/$ROS 1 dict dup						begin						/Adobe 4 dict dup							begin							/Japan1 [/Ryumin-Light/HeiseiMin-W3										 /GothicBBB-Medium/HeiseiKakuGo-W5										 /HeiseiMaruGo-W4/Jun101-Light]def							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def							/GB1	 [/STSong-Light/STHeiti-Regular]def							/CNS1	[/MKai-Medium/MHei-Medium]def							end def						end def					/$cmapname null def					/$deepcopyfont						{						dup/FontType get 0 eq							{							1 dict dup/FontName/copied put copyfont								begin								/FDepVector FDepVector copyarray								0 1 2 index length 1 sub									{									2 copy get $deepcopyfont									dup/FontName/copied put									/copied exch definefont									3 copy put pop pop									}								for								def								currentdict								end							}							{$Strategies/$Type3Underprint get exec}						ifelse						}bind def					/$buildfontname						{						dup/CIDFont findresource/CIDSystemInfo get							begin							Registry length Ordering length Supplement 8 string cvs							3 copy length 2 add add add string							dup 5 1 roll dup 0 Registry putinterval							dup 4 index(-)putinterval							dup 4 index 1 add Ordering putinterval							4 2 roll add 1 add 2 copy(-)putinterval							end						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch						anchorsearch							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}							{pop pop pop pop pop}						ifelse						length						$str 1 index(-)putinterval 1 add						$str 1 index $cmapname $fontpat cvs putinterval						$cmapname length add						$str exch 0 exch getinterval cvn						}bind def					/$findfontByROS						{						/$fontname exch def						$ROS Registry 2 copy known							{							get Ordering 2 copy known								{get}								{pop pop[]}							ifelse							}							{pop pop[]}						ifelse						false exch							{							dup/CIDFont resourcestatus								{								pop pop								save								1 index/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get}									{false}								ifelse								exch pop								exch restore									{pop}									{exch pop true exit}								ifelse								}								{pop}							ifelse							}						forall							{$str cvs $buildfontname}							{							false(*)								{								save exch								dup/CIDFont findresource								dup/WidthsOnly known									{dup/WidthsOnly get not}									{true}								ifelse								exch/CIDSystemInfo get								dup/Registry get Registry eq								exch/Ordering get Ordering eq and and									{exch restore exch pop true exit}									{pop restore}								ifelse								}							$str/CIDFont resourceforall								{$buildfontname}								{$fontname $findfontByEnum}							ifelse							}						ifelse						}bind def					end				end				currentdict/$error known currentdict/languagelevel known and dup					{pop $error/SubstituteFont known}				if				dup					{$error}					{Adobe_CoolType_Core}				ifelse				begin					{					/SubstituteFont					/CMap/Category resourcestatus						{						pop pop						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{								$sname null eq									{dup $str cvs dup length $slen sub $slen getinterval cvn}									{$sname}								ifelse								Adobe_CoolType_Data/InVMFontsByCMap get								1 index 2 copy known									{									get									false exch										{										pop										currentglobal											{											GlobalFontDirectory 1 index known												{exch pop true exit}												{pop}											ifelse											}											{											FontDirectory 1 index known												{exch pop true exit}												{												GlobalFontDirectory 1 index known													{exch pop true exit}													{pop}												ifelse												}											ifelse											}										ifelse										}									forall									}									{pop pop false}								ifelse									{									exch pop exch pop									}									{									dup/CMap resourcestatus										{										pop pop										dup/$cmapname exch def										/CMap findresource/CIDSystemInfo get{def}forall										$findfontByROS										}										{										128 string cvs										dup(-)search											{											3 1 roll search												{												3 1 roll pop													{dup cvi}												stopped													{pop pop pop pop pop $findfontByEnum}													{													4 2 roll pop pop													exch length													exch													2 index length													2 index													sub													exch 1 sub -1 0														{														$str cvs dup length														4 index														0														4 index														4 3 roll add														getinterval														exch 1 index exch 3 index exch														putinterval														dup/CMap resourcestatus															{															pop pop															4 1 roll pop pop pop															dup/$cmapname exch def															/CMap findresource/CIDSystemInfo get{def}forall															$findfontByROS															true exit															}															{pop}														ifelse														}													for													dup type/booleantype eq														{pop}														{pop pop pop $findfontByEnum}													ifelse													}												ifelse												}												{pop pop pop $findfontByEnum}											ifelse											}											{pop pop $findfontByEnum}										ifelse										}									ifelse									}								ifelse								}								{//SubstituteFont exec}							ifelse							/$slen 0 def							end						}						}						{						{						$SubstituteFont							begin							/$substituteFound true def							dup length $slen gt							$sname null ne or							$slen 0 gt and								{$findfontByEnum}								{//SubstituteFont exec}							ifelse							end						}						}					ifelse					bind readonly def					Adobe_CoolType_Core/scfindfont/systemfindfont load put					}					{					/scfindfont						{						$SubstituteFont							begin							dup systemfindfont							dup/FontName known								{dup/FontName get dup 3 index ne}								{/noname true}							ifelse							dup								{								/$origfontnamefound 2 index def								/$origfontname 4 index def/$substituteFound true def								}							if							exch pop								{								$slen 0 gt								$sname null ne								3 index length $slen gt or and									{									pop dup $findfontByEnum findfont									dup maxlength 1 add dict										begin											{1 index/FID eq{pop pop}{def}ifelse}										forall										currentdict										end									definefont									dup/FontName known{dup/FontName get}{null}ifelse									$origfontnamefound ne										{										$origfontname $str cvs print										( substitution revised, using )print										dup/FontName known											{dup/FontName get}{(unspecified font)}										ifelse										$str cvs print(.\n)print										}									if									}									{exch pop}								ifelse								}								{exch pop}							ifelse							end						}bind def					}				ifelse				end			end		Adobe_CoolType_Core_Defined not			{			Adobe_CoolType_Core/findfont				{				$SubstituteFont					begin					$depth 0 eq						{						/$fontname 1 index dup type/stringtype ne{$str cvs}if def						/$substituteFound false def						}					if					/$depth $depth 1 add def					end				scfindfont				$SubstituteFont					begin					/$depth $depth 1 sub def					$substituteFound $depth 0 eq and						{						$inVMIndex null ne							{dup $inVMIndex $AddInVMFont}						if						$doSmartSub							{							currentdict/$Strategy known								{$Strategy/$BuildFont get exec}							if							}						if						}					if					end				}bind put			}		if		}	if	end/$AddInVMFont	{	exch/FontName 2 copy known		{		get		1 dict dup begin exch 1 index gcheck def end exch		Adobe_CoolType_Data/InVMFontsByCMap get exch		$DictAdd		}		{pop pop pop}	ifelse	}bind def/$DictAdd	{	2 copy known not		{2 copy 4 index length dict put}	if	Level2? not		{		2 copy get dup maxlength exch length 4 index length add lt		2 copy get dup length 4 index length add exch maxlength 1 index lt			{			2 mul dict				begin				2 copy get{forall}def				2 copy currentdict put				end			}			{pop}		ifelse		}	if	get		begin			{def}		forall		end	}bind defendend%%EndResourcecurrentglobal true setglobal%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.%%Version: 1.23 0systemdict/languagelevel known dup	{currentglobal false setglobal}	{false}ifelseexchuserdict/Adobe_CoolType_Utility 2 copy known	{2 copy get dup maxlength 27 add dict copy}	{27 dict}ifelse putAdobe_CoolType_Utility	begin	/@eexecStartData		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def	/@recognizeCIDFont null def	/ct_Level2? exch def	/ct_Clone? 1183615869 internaldict dup			/CCRun known not			exch/eCCRun known not			ct_Level2? and or defct_Level2?	{globaldict begin currentglobal true setglobal}if	/ct_AddStdCIDMap		ct_Level2?			{{				mark				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put					{					((Hex)57 StartData					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec					}				stopped					{					 cleartomark					 Adobe_CoolType_Utility/@recognizeCIDFont get					 countdictstack dup array dictstack					 exch 1 sub -1 0						 {						 2 copy get 3 index eq								{1 index length exch sub 1 sub{end}repeat exit}								{pop}						 ifelse						 }					 for					 pop pop					 Adobe_CoolType_Utility/@eexecStartData get eexec					}					{cleartomark}				ifelse			}}			{{				Adobe_CoolType_Utility/@eexecStartData get eexec			}}		ifelse bind defuserdict/cid_extensions knowndup{cid_extensions/cid_UpdateDB known and}if	{	 cid_extensions	 begin	/cid_GetCIDSystemInfo		{		 1 index type/stringtype eq			{exch cvn exch}		 if		 cid_extensions			 begin			 dup load 2 index known				{				 2 copy				 cid_GetStatusInfo				 dup null ne					{					 1 index load					 3 index get					 dup null eq						 {pop pop cid_UpdateDB}						 {						 exch						 1 index/Created get eq							 {exch pop exch pop}							 {pop cid_UpdateDB}						 ifelse						 }					 ifelse					}					{pop cid_UpdateDB}				 ifelse				}				{cid_UpdateDB}			 ifelse			 end		}bind def	 end	}ifct_Level2?	{end setglobal}if	/ct_UseNativeCapability? systemdict/composefont known def	/ct_MakeOCF 35 dict def	/ct_Vars 25 dict def	/ct_GlyphDirProcs 6 dict def	/ct_BuildCharDict 15 dict dup		begin		/charcode 2 string def		/dst_string 1500 string def		/nullstring()def		/usewidths? true def		end def	ct_Level2?{setglobal}{pop}ifelse	ct_GlyphDirProcs		begin		/GetGlyphDirectory			{			systemdict/languagelevel known				{pop/CIDFont findresource/GlyphDirectory get}				{				1 index/CIDFont findresource/GlyphDirectory				get dup type/dicttype eq					{					dup dup maxlength exch length sub 2 index lt						{						dup length 2 index add dict copy 2 index						/CIDFont findresource/GlyphDirectory 2 index put						}					if					}				if				exch pop exch pop				}			ifelse			+			}def		/+			{			systemdict/languagelevel known				{				currentglobal false setglobal				3 dict begin					/vm exch def				}				{1 dict begin}			ifelse			/$ exch def			systemdict/languagelevel known				{				vm setglobal				/gvm currentglobal def				$ gcheck setglobal				}			if			?{$ begin}if			}def		/?{$ type/dicttype eq}def		/|{			userdict/Adobe_CoolType_Data known				{			Adobe_CoolType_Data/AddWidths? known				{				 currentdict Adobe_CoolType_Data					begin					 begin						AddWidths?								{								Adobe_CoolType_Data/CC 3 index put								?{def}{$ 3 1 roll put}ifelse								CC charcode exch 1 index 0 2 index 256 idiv put								1 index exch 1 exch 256 mod put								stringwidth 2 array astore								currentfont/Widths get exch CC exch put								}								{?{def}{$ 3 1 roll put}ifelse}							ifelse					end				end				}				{?{def}{$ 3 1 roll put}ifelse}	ifelse				}				{?{def}{$ 3 1 roll put}ifelse}			ifelse			}def		/!			{			?{end}if			systemdict/languagelevel known				{gvm setglobal}			if			end			}def		/:{string currentfile exch readstring pop}executeonly def		end	ct_MakeOCF		begin		/ct_cHexEncoding		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def		/ct_CID_STR_SIZE 8000 def		/ct_mkocfStr100 100 string def		/ct_defaultFontMtx[.001 0 0 .001 0 0]def		/ct_1000Mtx[1000 0 0 1000 0 0]def		/ct_raise{exch cvx exch errordict exch get exec stop}bind def		/ct_reraise			{cvx $error/errorname get(Error: )print dup(						 )cvs print					errordict exch get exec stop			}bind def		/ct_cvnsi			{			1 index add 1 sub 1 exch 0 4 1 roll				{				2 index exch get				exch 8 bitshift				add				}			for			exch pop			}bind def		/ct_GetInterval			{			Adobe_CoolType_Utility/ct_BuildCharDict get				begin				/dst_index 0 def				dup dst_string length gt					{dup string/dst_string exch def}				if				1 index ct_CID_STR_SIZE idiv				/arrayIndex exch def				2 index arrayIndex get				2 index				arrayIndex ct_CID_STR_SIZE mul				sub					{					dup 3 index add 2 index length le						{						2 index getinterval						dst_string dst_index 2 index putinterval						length dst_index add/dst_index exch def						exit						}						{						1 index length 1 index sub						dup 4 1 roll						getinterval						dst_string dst_index 2 index putinterval						pop dup dst_index add/dst_index exch def						sub						/arrayIndex arrayIndex 1 add def						2 index dup length arrayIndex gt							 {arrayIndex get}							 {							 pop							 exit							 }						ifelse						0						}					ifelse					}				loop				pop pop pop				dst_string 0 dst_index getinterval				end			}bind def		ct_Level2?			{			/ct_resourcestatus			currentglobal mark true setglobal				{/unknowninstancename/Category resourcestatus}			stopped				{cleartomark setglobal true}				{cleartomark currentglobal not exch setglobal}			ifelse				{					{					mark 3 1 roll/Category findresource						begin						ct_Vars/vm currentglobal put						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec							{cleartomark false}							{{3 2 roll pop true}{cleartomark false}ifelse}						ifelse						ct_Vars/vm get setglobal						end					}				}				{{resourcestatus}}			ifelse bind def			/CIDFont/Category ct_resourcestatus				{pop pop}				{				currentglobal true setglobal				/Generic/Category findresource				dup length dict copy				dup/InstanceType/dicttype put				/CIDFont exch/Category defineresource pop				setglobal				}			ifelse			ct_UseNativeCapability?				{				/CIDInit/ProcSet findresource begin				12 dict begin				begincmap				/CIDSystemInfo 3 dict dup begin				 /Registry(Adobe)def				 /Ordering(Identity)def				 /Supplement 0 def				end def				/CMapName/Identity-H def				/CMapVersion 1.000 def				/CMapType 1 def				1 begincodespacerange				<0000><FFFF>				endcodespacerange				1 begincidrange				<0000><FFFF>0				endcidrange				endcmap				CMapName currentdict/CMap defineresource pop				end				end				}			if			}			{			/ct_Category 2 dict begin			/CIDFont 10 dict def			/ProcSet	2 dict def			currentdict			end			def			/defineresource				{				ct_Category 1 index 2 copy known					{					get					dup dup maxlength exch length eq						{						dup length 10 add dict copy						ct_Category 2 index 2 index put						}					if					3 index 3 index put					pop exch pop					}					{pop pop/defineresource/undefined ct_raise}				ifelse				}bind def			/findresource				{				ct_Category 1 index 2 copy known					{					get					2 index 2 copy known						{get 3 1 roll pop pop}						{pop pop/findresource/undefinedresource ct_raise}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/resourcestatus				{				ct_Category 1 index 2 copy known					{					get					2 index known					exch pop exch pop						{						0 -1 true						}						{						false						}					ifelse					}					{pop pop/findresource/undefined ct_raise}				ifelse				}bind def			/ct_resourcestatus/resourcestatus load def			}		ifelse		/ct_CIDInit 2 dict			begin			/ct_cidfont_stream_init				{					{					dup(Binary)eq						{						pop						null						currentfile						ct_Level2?							{								{cid_BYTE_COUNT()/SubFileDecode filter}							stopped								{pop pop pop}							if							}						if						/readstring load						exit						}					if					dup(Hex)eq						{						pop						currentfile						ct_Level2?							{								{null exch/ASCIIHexDecode filter/readstring}							stopped								{pop exch pop(>)exch/readhexstring}							if							}							{(>)exch/readhexstring}						ifelse						load						exit						}					if					/StartData/typecheck ct_raise					}				loop				cid_BYTE_COUNT ct_CID_STR_SIZE le					{					2 copy cid_BYTE_COUNT string exch exec					pop					1 array dup					3 -1 roll					0 exch put					}					{					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi					dup array exch 2 sub 0 exch 1 exch						{						2 copy						5 index						ct_CID_STR_SIZE						string						6 index exec						pop						put						pop						}					for					2 index					cid_BYTE_COUNT ct_CID_STR_SIZE mod string					3 index exec					pop					1 index exch					1 index length 1 sub					exch put					}				ifelse				cid_CIDFONT exch/GlyphData exch put				2 index null eq					{					pop pop pop					}					{					pop/readstring load					1 string exch						{						3 copy exec						pop						dup length 0 eq							{							pop pop pop pop pop							true exit							}						if						4 index						eq							{							pop pop pop pop							false exit							}						if						}					loop					pop					}				ifelse				}bind def			/StartData				{				mark					{					currentdict					dup/FDArray get 0 get/FontMatrix get					0 get 0.001 eq						{						dup/CDevProc known not							{							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known								{get}								{								pop pop								{pop pop pop pop pop 0 -1000 7 index 2 div 880}								}							ifelse							def							}						if						}						{						/CDevProc							{							 pop pop pop pop pop							 0							 1 cid_temp/cid_CIDFONT get							/FDArray get 0 get							/FontMatrix get 0 get div							 7 index 2 div							 1 index 0.88 mul							}def						}					ifelse					/cid_temp 15 dict def					cid_temp						begin						/cid_CIDFONT exch def						3 copy pop						dup/cid_BYTE_COUNT exch def 0 gt							{							ct_cidfont_stream_init							FDArray								{								/Private get								dup/SubrMapOffset known									{									begin									/Subrs SubrCount array def									Subrs									SubrMapOffset									SubrCount									SDBytes									ct_Level2?										{										currentdict dup/SubrMapOffset undef										dup/SubrCount undef										/SDBytes undef										}									if									end									/cid_SD_BYTES exch def									/cid_SUBR_COUNT exch def									/cid_SUBR_MAP_OFFSET exch def									/cid_SUBRS exch def									cid_SUBR_COUNT 0 gt										{										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval										0 cid_SD_BYTES ct_cvnsi										0 1 cid_SUBR_COUNT 1 sub											{											exch 1 index											1 add											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add											GlyphData exch cid_SD_BYTES ct_GetInterval											0 cid_SD_BYTES ct_cvnsi											cid_SUBRS 4 2 roll											GlyphData exch											4 index											1 index											sub											ct_GetInterval											dup length string copy put											}										for										pop										}									if									}									{pop}								ifelse								}							forall							}						if						cleartomark pop pop						end					CIDFontName currentdict/CIDFont defineresource pop					end end					}				stopped					{cleartomark/StartData ct_reraise}				if				}bind def			currentdict			end def		/ct_saveCIDInit			{			/CIDInit/ProcSet ct_resourcestatus				{true}				{/CIDInitC/ProcSet ct_resourcestatus}			ifelse				{				pop pop				/CIDInit/ProcSet findresource				ct_UseNativeCapability?					{pop null}					{/CIDInit ct_CIDInit/ProcSet defineresource pop}				ifelse				}				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}			ifelse			ct_Vars exch/ct_oldCIDInit exch put			}bind def		/ct_restoreCIDInit			{			ct_Vars/ct_oldCIDInit get dup null ne				{/CIDInit exch/ProcSet defineresource pop}				{pop}			ifelse			}bind def		/ct_BuildCharSetUp			{			1 index				begin				CIDFont					begin					Adobe_CoolType_Utility/ct_BuildCharDict get						begin						/ct_dfCharCode exch def						/ct_dfDict exch def						CIDFirstByte ct_dfCharCode add						dup CIDCount ge							{pop 0}						if						/cid exch def							{							GlyphDirectory cid 2 copy known								{get}								{pop pop nullstring}							ifelse							dup length FDBytes sub 0 gt								{								dup								FDBytes 0 ne									{0 FDBytes ct_cvnsi}									{pop 0}								ifelse								/fdIndex exch def								dup length FDBytes sub FDBytes exch getinterval								/charstring exch def								exit								}								{								pop								cid 0 eq									{/charstring nullstring def exit}								if								/cid 0 def								}							ifelse							}						loop			}def		/ct_SetCacheDevice			{			0 0 moveto			dup stringwidth			3 -1 roll			true charpath			pathbbox			0 -1000			7 index 2 div 880			setcachedevice2			0 0 moveto			}def		/ct_CloneSetCacheProc			{			1 eq				{				stringwidth				pop -2 div -880				0 -1000 setcharwidth				moveto				}				{				usewidths?					{					currentfont/Widths get cid					2 copy known						{get exch pop aload pop}						{pop pop stringwidth}					ifelse					}					{stringwidth}				ifelse				setcharwidth				0 0 moveto				}			ifelse			}def		/ct_Type3ShowCharString			{			ct_FDDict fdIndex 2 copy known				{get}				{				currentglobal 3 1 roll				1 index gcheck setglobal				ct_Type1FontTemplate dup maxlength dict copy					begin					FDArray fdIndex get					dup/FontMatrix 2 copy known						{get}						{pop pop ct_defaultFontMtx}					ifelse					/FontMatrix exch dup length array copy def					/Private get					/Private exch def					/Widths rootfont/Widths get def					/CharStrings 1 dict dup/.notdef						<d841272cf18f54fc13>dup length string copy put def					currentdict					end				/ct_Type1Font exch definefont				dup 5 1 roll put				setglobal				}			ifelse			dup/CharStrings get 1 index/Encoding get			ct_dfCharCode get charstring put			rootfont/WMode 2 copy known				{get}				{pop pop 0}			ifelse			exch			1000 scalefont setfont			ct_str1 0 ct_dfCharCode put			ct_str1 exch ct_dfSetCacheProc			ct_SyntheticBold				{				currentpoint				ct_str1 show				newpath				moveto				ct_str1 true charpath				ct_StrokeWidth setlinewidth				stroke				}				{ct_str1 show}			ifelse			}def		/ct_Type4ShowCharString			{			ct_dfDict ct_dfCharCode charstring			FDArray fdIndex get			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not				{ct_1000Mtx matrix concatmatrix concat}				{pop}			ifelse			/Private get			Adobe_CoolType_Utility/ct_Level2? get not				{				ct_dfDict/Private				3 -1 roll					{put}				1183615869 internaldict/superexec get exec				}			if			1183615869 internaldict			Adobe_CoolType_Utility/ct_Level2? get				{1 index}				{3 index/Private get mark 6 1 roll}			ifelse			dup/RunInt known				{/RunInt get}				{pop/CCRun}			ifelse			get exec			Adobe_CoolType_Utility/ct_Level2? get not				{cleartomark}			if			}bind def		/ct_BuildCharIncremental			{				{				Adobe_CoolType_Utility/ct_MakeOCF get begin				ct_BuildCharSetUp				ct_ShowCharString				}			stopped				{stop}			if			end			end			end			end			}bind def		/BaseFontNameStr(BF00)def		/ct_Type1FontTemplate 14 dict			begin			/FontType 1 def			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/PaintType 0 def			currentdict			end def		/BaseFontTemplate 11 dict			begin			/FontMatrix [0.001 0 0 0.001 0 0]def			/FontBBox [-250 -250 1250 1250]def			/Encoding ct_cHexEncoding def			/BuildChar/ct_BuildCharIncremental load def			ct_Clone?				{				/FontType 3 def				/ct_ShowCharString/ct_Type3ShowCharString load def				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def				/ct_SyntheticBold false def				/ct_StrokeWidth 1 def				}				{				/FontType 4 def				/Private 1 dict dup/lenIV 4 put def				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def				/PaintType 0 def				/ct_ShowCharString/ct_Type4ShowCharString load def				}			ifelse			/ct_str1 1 string def			currentdict			end def		/BaseFontDictSize BaseFontTemplate length 5 add def		/ct_matrixeq			{			true 0 1 5				{				dup 4 index exch get exch 3 index exch get eq and				dup not					{exit}				if				}			for			exch pop exch pop			}bind def		/ct_makeocf			{			15 dict				begin				exch/WMode exch def				exch/FontName exch def				/FontType 0 def				/FMapType 2 def			dup/FontMatrix known				{dup/FontMatrix get/FontMatrix exch def}				{/FontMatrix matrix def}			ifelse				/bfCount 1 index/CIDCount get 256 idiv 1 add					dup 256 gt{pop 256}if def				/Encoding					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for					bfCount 1 255{2 copy bfCount put pop}for					def				/FDepVector bfCount dup 256 lt{1 add}if array def				BaseFontTemplate BaseFontDictSize dict copy					begin					/CIDFont exch def					CIDFont/FontBBox known						{CIDFont/FontBBox get/FontBBox exch def}					if					CIDFont/CDevProc known						{CIDFont/CDevProc get/CDevProc exch def}					if					currentdict					end				BaseFontNameStr 3(0)putinterval				0 1 bfCount dup 256 eq{1 sub}if					{					FDepVector exch					2 index BaseFontDictSize dict copy						begin						dup/CIDFirstByte exch 256 mul def						FontType 3 eq							{/ct_FDDict 2 dict def}						if						currentdict						end					1 index 16					BaseFontNameStr 2 2 getinterval cvrs pop					BaseFontNameStr exch definefont					put					}				for				ct_Clone?					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}				if				FontName				currentdict				end			definefont			ct_Clone?				{				gsave				dup 1000 scalefont setfont				ct_BuildCharDict					begin					/usewidths? false def					currentfont/Widths get						begin						exch/CIDFont get/GlyphDirectory get							{							pop							dup charcode exch 1 index 0 2 index 256 idiv put							1 index exch 1 exch 256 mod put							stringwidth 2 array astore def							}						forall						end					/usewidths? true def					end				grestore				}				{exch pop}			ifelse			}bind def		currentglobal true setglobal		/ct_ComposeFont			{			ct_UseNativeCapability?				{								2 index/CMap ct_resourcestatus					{pop pop exch pop}					{					/CIDInit/ProcSet findresource						begin						12 dict							begin							begincmap							/CMapName 3 index def							/CMapVersion 1.000 def							/CMapType 1 def							exch/WMode exch def							/CIDSystemInfo 3 dict dup								begin								/Registry(Adobe)def								/Ordering								CMapName ct_mkocfStr100 cvs								(Adobe-)search									{									pop pop									(-)search										{										dup length string copy										exch pop exch pop										}										{pop(Identity)}									ifelse									}									{pop (Identity)}								ifelse								def								/Supplement 0 def								end def							1 begincodespacerange							<0000><FFFF>							endcodespacerange							1 begincidrange							<0000><FFFF>0							endcidrange							endcmap							CMapName currentdict/CMap defineresource pop							end						end					}				ifelse				composefont				}				{				3 2 roll pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def			setglobal		/ct_MakeIdentity			{			ct_UseNativeCapability?				{				1 index/CMap ct_resourcestatus					{pop pop}					{					/CIDInit/ProcSet findresource begin					12 dict begin					begincmap					/CMapName 2 index def					/CMapVersion 1.000 def					/CMapType 1 def					/CIDSystemInfo 3 dict dup						begin						/Registry(Adobe)def						/Ordering						CMapName ct_mkocfStr100 cvs						(Adobe-)search							{							pop pop							(-)search								{dup length string copy exch pop exch pop}								{pop(Identity)}							ifelse							}							{pop(Identity)}						ifelse						def						/Supplement 0 def						end def					1 begincodespacerange					<0000><FFFF>					endcodespacerange					1 begincidrange					<0000><FFFF>0					endcidrange					endcmap					CMapName currentdict/CMap defineresource pop					end					end					}				ifelse				composefont				}				{				exch pop				0 get/CIDFont findresource				ct_makeocf				}			ifelse			}bind def		currentdict readonly pop		end	end%%EndResourcesetglobal%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.%%Version: 1.0 0userdict/ct_T42Dict 15 dict putct_T42Dict begin/Is2015?{ version cvi 2015 ge}bind def/AllocGlyphStorage{ Is2015? {		pop } {	{string}forall }ifelse}bind def/Type42DictBegin{25 dict begin /FontName exch def /CharStrings 256 dict begin	 /.notdef 0 def	 currentdict end def /Encoding exch def /PaintType 0 def /FontType 42 def /FontMatrix[1 0 0 1 0 0]def 4 array astore cvx/FontBBox exch def /sfnts}bind def/Type42DictEnd { currentdict dup/FontName get exch definefont endct_T42Dict exchdup/FontName get exch put}bind def/RD{string currentfile exch readstring pop}executeonly def/PrepFor2015{Is2015?{		 	/GlyphDirectory 	 16	 dict def	 sfnts 0 get	 dup	 2 index	(glyx)	 putinterval	 2 index 	(locx)	 putinterval	 pop	 pop}{	 pop	 pop}ifelse			}bind def/AddT42Char{Is2015?{	/GlyphDirectory get 	begin	def	end	pop	pop}{	/sfnts get	4 index	get	3 index 2 index	putinterval	pop	pop	pop	pop}ifelse}bind def/T0AddT42Mtx2{/CIDFont findresource/Metrics2 get begin def end}bind defend%%EndResourcecurrentglobal true setglobal%%BeginFile: MMFauxFont.prc%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. %%All Rights Reserved.userdict /ct_EuroDict 10 dict putct_EuroDict begin/ct_CopyFont {    { 1 index /FID ne {def} {pop pop} ifelse} forall} def/ct_GetGlyphOutline{   gsave   initmatrix newpath   exch findfont dup    length 1 add dict    begin 		ct_CopyFont 		/Encoding Encoding dup length array copy 		dup		4 -1 roll		0 exch put   		def		currentdict   end   /ct_EuroFont exch definefont   1000 scalefont setfont   0 0 moveto   [       <00> stringwidth        <00> false charpath       pathbbox       [       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall   grestore   counttomark 8 add}def/ct_MakeGlyphProc{   ] cvx   /ct_PSBuildGlyph cvx   ] cvx} def/ct_PSBuildGlyph {  	gsave 	8 -1 roll pop 	7 1 roll         6 -2 roll ct_FontMatrix transform 6 2 roll        4 -2 roll ct_FontMatrix transform 4 2 roll        ct_FontMatrix transform 	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  	dup  9 1 roll 	{  		currentdict /StrokeWidth 2 copy known  		{   			get 2 div   			0 ct_FontMatrix dtransform pop			5 1 roll  			4 -1 roll 4 index sub   			4 1 roll   			3 -1 roll 4 index sub  			3 1 roll   			exch 4 index add exch  			4 index add  			5 -1 roll pop  		}  		{	 			pop pop 		}  		ifelse  	}           if  	setcachedevice          ct_FontMatrix concat        ct_PSPathOps begin 		exec 	end 	{  		currentdict /StrokeWidth 2 copy known  			{ get }  			{ pop pop 0 }    	    ifelse  		setlinewidth stroke  	}  	{   	    fill  	}  	ifelse      grestore} def /ct_PSPathOps 4 dict dup begin 	/m {moveto} def 	/l {lineto} def 	/c {curveto} def 	/cp {closepath} def end def /ct_matrix1000 [1000 0 0 1000 0 0] def/ct_AddGlyphProc  {   2 index findfont dup length 4 add dict    begin 	ct_CopyFont 	/CharStrings CharStrings dup length 1 add dict copy      begin         3 1 roll def           currentdict       end       def      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def      /ct_PSBuildGlyph /ct_PSBuildGlyph load def      /ct_PSPathOps /ct_PSPathOps load def      currentdict   end   definefont pop}defsystemdict /languagelevel known{	/ct_AddGlyphToPrinterFont {		2 copy		ct_GetGlyphOutline 3 add -1 roll restore 		ct_MakeGlyphProc 		ct_AddGlyphProc	} def}{	/ct_AddGlyphToPrinterFont {	    pop pop restore		Adobe_CTFauxDict /$$$FONTNAME get		/Euro		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get		ct_EuroDict exch get		ct_AddGlyphProc	} def} ifelse/AdobeSansMM { 556 0 24 -19 541 703 	{ 	541 628 m 	510 669 442 703 354 703 c 	201 703 117 607 101 444 c 	50 444 l 	25 372 l 	97 372 l 	97 301 l 	49 301 l 	24 229 l 	103 229 l 	124 67 209 -19 350 -19 c 	435 -19 501 25 509 32 c 	509 131 l 	492 105 417 60 343 60 c 	267 60 204 127 197 229 c 	406 229 l 	430 301 l 	191 301 l 	191 372 l 	455 372 l 	479 444 l 	194 444 l 	201 531 245 624 348 624 c 	433 624 484 583 509 534 c 	cp 	556 0 m 	}ct_PSBuildGlyph} def/AdobeSerifMM { 500 0 10 -12 484 692 	{ 	347 298 m 	171 298 l 	170 310 170 322 170 335 c 	170 362 l 	362 362 l 	374 403 l 	172 403 l 	184 580 244 642 308 642 c 	380 642 434 574 457 457 c 	481 462 l 	474 691 l 	449 691 l 	433 670 429 657 410 657 c 	394 657 360 692 299 692 c 	204 692 94 604 73 403 c 	22 403 l 	10 362 l 	70 362 l 	69 352 69 341 69 330 c 	69 319 69 308 70 298 c 	22 298 l 	10 257 l 	73 257 l 	97 57 216 -12 295 -12 c 	364 -12 427 25 484 123 c 	458 142 l 	425 101 384 37 316 37 c 	256 37 189 84 173 257 c 	335 257 l 	cp 	500 0 m 	} ct_PSBuildGlyph } def end		%%EndFilesetglobalAdobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get execAdobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get execAdobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.3-c011 66.145661, 2012/02/06-14:56:27        ">
 <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
  <rdf:Description rdf:about=""
    xmlns:xmp="http://ns.adobe.com/xap/1.0/"
    xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
    xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
    xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
    xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
    xmlns:dc="http://purl.org/dc/elements/1.1/"
    xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
    xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
   xmp:CreatorTool="Adobe Illustrator CS6 (Macintosh)"
   xmp:CreateDate="2016-07-21T17:22:16+02:00"
   xmp:MetadataDate="2016-09-27T14:27:42+02:00"
   xmpTPg:NPages="1"
   xmpTPg:HasVisibleTransparency="False"
   xmpTPg:HasVisibleOverprint="False"
   dc:format="application/postscript"
   xmpMM:InstanceID="xmp.iid:FB7F11740720681183D1DC5FC7190E91"
   xmpMM:DocumentID="xmp.did:FB7F11740720681183D1DC5FC7190E91"
   xmpMM:OriginalDocumentID="xmp.did:FB7F11740720681183D1DC5FC7190E91">
   <xmp:Thumbnails>
    <rdf:Alt>
     <rdf:li
      xmpGImg:width="256"
      xmpGImg:height="256"
      xmpGImg:format="JPEG"
      xmpGImg:image="/9j/4AAQSkZJRgABAgEBLAEsAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABABLAAAAAEA&#xA;AQEsAAAAAQAB/+4ADkFkb2JlAGTAAAAAAf/bAIQABgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoK&#xA;DBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8fHx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8f&#xA;Hx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f/8AAEQgBAAEAAwER&#xA;AAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQFAwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAA&#xA;AQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMBAgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPB&#xA;UtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdUZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE&#xA;1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZ&#xA;qbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUEBQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEy&#xA;obHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PSNeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp&#xA;0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo&#xA;+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/aAAwDAQACEQMRAD8A9SZFLsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqTWfm7RrzzLd+XbeRpNQsovW&#xA;nIAMYoVDJzB+2vqJyHaoxSnOKEm8uebtE8wtfJpspaXTrh7a5iccXDISocL1KPQ8W+fcEYpTnFDs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqSeZfOGj+XkiW79W4vbkMbTTbONri6m4C&#xA;renEm9FHVjRR44pSTRvzb8talHbXEtve6ZYXpCWeo3sKi0kkYkCP14XmjR6g7OV6U640tM2xQ7FX&#xA;Yq7FXYq7FXYqxnzpqc4+raNbXLWTXqTXGoagmz22n2qg3EqH9l2LrGh7cuX7OKWAeWNK1M+ZbqLy&#xA;tGuh/pO2gvJZ5UFwdPsCqxQqIm+A3l6bf1JPUrxVank2FKI1EatYeaNP03yx5s1K9u5rl4dRudQe&#xA;K90+GT0JJoraRUjj4yTPHx+BqoO264oQPl3Ty2pXN5awDTPMF3e3C2cwaq22qWyl7rTJyPt21xRp&#xA;Y6EjiezKKqXrmg6vFrGjWmpxoYhdRh2hb7Ub9Hjb3RwVPywIR+KHYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FWndUUu5CooJZiaAAdSTiryHRtU1LXdf8AM82krKJ59RNheeYIV9UW2nQFIoYb&#xA;LdgZZCzSuw2QHmaniMLJNrrQ9K0uCUeWLf8ATHl66haLzBokD+vHIipHWaKTkeN2Y5VYrX96u/2q&#xA;EqE4/KXW49V8i6cwvFvJbYS2xeo9T0oJnigaReoZokU/FueuAqWY4odirsVdirsVdirAvO1nPd6n&#xA;rdnFGZbq98tzJYxVI9Qxyt60Y/1vViB+eKUHLp/lDWPM31y9traW38y2UEmhak6Kf30SMskG+3IJ&#xA;wdUbrRh+zhVVin0bWIdU8s+mmhab5fkSU3duvoANFzKyrzhjS3MbhJAeW5BG6VJCoDRE1Ge2083z&#xA;JLqWv+YE1O0eOI25azsYI42uniqeHrR2wJ36yjxphVmPkMhtEuJY/wDeebUtSktqGo9J76Yqw9m+&#xA;0PY4FZFih2KuxV2KuxV2KuxV2KuxVJdZ812OnXI0+COTUtZkXlFpdoA03E9HlJISGP8Ay5CB4VO2&#xA;KWL+Z7fzxFZw63qGrfU7SGeNb/SdOIQJayuI2dbmRecksZYPUhVIBAG9cKp7p13rGk67DouqXR1G&#xA;0v0kfS9QdUScPCAz284jCox4fGjqorRgRWhIVkuKHYq7FXYq7FUk83+VLLzNpH1G5b05I5FntZio&#xA;kVJo90LxPVJU/mRhQj78UsEaG78h24+q3UGoaxqKSz6v5ctfVV7ieR2YTWKwRzSwleQiHJOBVV3U&#xA;iuFUs0DVrnSbefRreDUPK1lqMnrXOua56lIzIaOtvSCO3WU1+3K48TyIpillflb8rdO0nXF1ESRS&#xA;adYFz5fhiWkiJcAPIbif7ctHZvTWpUDfqdhaLZ9ih2KuxV2KuxV2KpH5p0m/uUtNS0rj+mdKkaa0&#xA;RzxSZHXjNbO37Kyr0b9lgrdsUsHe2ttd1U6P5e5WKXZku/M2j6lbrNbWzchv9XejCaWTdTFIENC+&#xA;5oSVVP8AlT2sRQ2Zj15LyXT4yIIb+C4ubeSUKArvFNdzRoQy1qibHemwxtbXaFdzalFNFpT3M/nC&#xA;9VrTXdYuqMumCJ2SWJCipEGV1YwxRj4tnfbfFXoul6baaZp1tp1mnp2tpEkMCdaIg4ip7nbc4FRO&#xA;KHYq7FXYq7FXYq7FUJqmraZpVm97qVzHa2qbNLK3EVPRR3Zj2A3OKWJX3mW91O5t7R71PKunXjcb&#xA;aS7aOPVLsE0/cQSGkCsdgzgv0+FSRirKNF0HSdFtmg063EQkPOeUkvLK/d5ZXLPIx/mYk4qkfmS/&#xA;h1rVofKNjIHmV4bzW3U/3FpFIsixk/78nZQgXqEJbwqqivNpNve+XdQ/YttTSKWvTjeQy2i/L97M&#xA;mKsixQ7FXYq7FUn836tc6R5av9QtQv1iCP8AdNJuiM7BA79PhTlyb2GKWMeYNJ8y+X7W3vdJ8w3l&#xA;7q93cxWgttRMctrM9weBIjRY/R9IVl+DstDXFWReVrHRLH69aWLm51CCVV1i+kBM01y0ayEyyUoz&#xA;cXHwjZAQoAG2Kp3Kkbxukih42BDoRyBUjcEd64oeborR6roul6DqUtp5P8yiW4tDarxlglgjaZ7e&#xA;FpBWCOZfi48aoUZRxrsUsj0ltQ0zzU2hSX82o2U9ib2Broo80DRSrEyNIoUusnqVXnU1Vt/AKyfF&#xA;DsVdirsVdirsVY/ZKP8AH+sNT4hpWlgHvQ3Oof0xSyDFDH/J6qo1oKAB+lro0G25Kkn6ScUsgxQ7&#xA;FXYq7FXYq7FXYqx/zvr15pGjxjTgh1bUrmHTtMEtTGLi4agd6fsxoGc/LFLCvOPkHQ9OsLC/k9fX&#xA;vN73cK2z3c0jy3rlv30IXl6cEfpFiGUAR0BrtuVSaGDWtJ8yp5ds2GuXeotbvql0WJe1a1JuTp8F&#xA;zcO1Y1QKQGJZBU0LMKKXpDWnnfVvgvLiDQbNvtx2DG6vGXw+sSpHHFX/ACY2Pg3fAhBajommeVZ9&#xA;H1fTIBBbW0xs9VapZ5IL9lUzTSNyZ3S4ETs7Enjy3xVNfPlvLP5P1UwLyuLeA3dsvjNaEXEQ/wCD&#xA;iGKpzaXMV1aw3UJrDOiyxnxVwGH4HFCrirsVdiqncW8Fzby29xGssEyNHLE4qrIwoykHqCDirz4S&#xA;z6f5j8s+VL9mlNnqUk+kXDks09ium3gUO3eS2fij+I4N+1hSh/KPmy38vm4XzFcrBa67cXWqaZdE&#xA;MRyadlntmIHWP4GXb7LU/ZxVPr/80/KEVq7WV6t/fNRLOxiD8553PGKJaqBV3IG+BaYHBqN5oejW&#xA;Z1qYSyaP5wlEht1NCZrKW4aOFB/NJcsqr70wpeneVtJvII7jVdVUDW9VKy3ag8hDGoPo2qH+WFTv&#xA;4sWbvgQnuKHYq7FXYq7FXYqxC48vaBrHn3VP0tptrqPoaVpvo/W4I5+HO4v+XH1Fbjy4itPDFLGo&#xA;tP8AL9v9c1S/8qaDN5ct9QuLGWa2sY1uLVIJzAJpVZZFlQMv7wrx4jehphVkep6TY+UZYtb0SBLD&#xA;TfVji1rTYFEdu8MrCIXCRLREkhZgzFQOSVBqeNArMcUOxV2KuxV2KuxV2KsQ/M/lDoVnqcLA3uk6&#xA;ha3lja1Ia6lVzH9WTiGYvLHIyrQdfbFIYj5h8x32nX0YkmhTz3rYSCMMytDothMwbj8R4NIFBdz+&#xA;0RX7CqCUojSLT1fNPlyTy/pi6ho+jNdx3PmCNURZXuuQLCaRzJKVVi0jryV3JpTsoeq4EIXVdNtd&#xA;T0y6067XlbXkTwTL34yKVNPffbFKWeT764vtAW31Ah9RsWfT9Sr+1Nbngz08JV4yD2YYqp/l+8g8&#xA;p2VpKay6b6umyV61sZWtgT8xEDirIcUOxV2KuxVjXngR20Wk666jhot/HcXEtPiS2mje1navXiqz&#xA;829lxSxfUZLbT9C1zTXmW21byxcy61ojUqzRTyPPAUUbujtK9q4Hy7jCqd6nqFsfNkM+uutlYaHp&#xA;n6Whic8lMzs8U8pI6/VUoooOslfDArH/AC1pxv5fL6XdtwvL/Urvzff27UPoxyLJFZhvBv30RAO9&#xA;Ubwwq9SwIdirsVdirsVdirsVSCy/5T3Wf+2Vpf8A1EahiliiX0UXkjX9NQCbUdZ1XW7DTrMbtLLP&#xA;eTx9P5EDc5G6KoJOFWRedmC+XotBjb1L/WGj0+1T9ogketLTf4Yogzsfo7jArKMUOxV2KuxV2Kux&#xA;VA63remaJpk2p6nN6FlBx9STizmrsEUBUDMxLMBQDFLAU1y41jUotStxHea9MCvl/R+YePTbeQEG&#xA;/vwpIWQrWo60/druWOFWWaZ5F8vWsCG8s4NT1EsZrnUruGOSeWd6F5KsG4VIFFXZQABsMCsgVQoC&#xA;qKKNgB0AxQ7FXYq891vWrrRPPF2umT2cMN7bxXOsnUGMUMDRJIqTK3JSxlSNUPFTTgK0wpTb8tjf&#xA;3Ghz6td+kF1q5bULeOEOqpHKiL0k+L42Qyf7LApZZih2KuxV2KrJoYp4XhmRZIZVKSRuAVZWFCpB&#xA;6gjFXjHmH8tl0i8Et5brJ5TNw/6W1COeVrxrKZozbwyq+4hs5LeL4lf4U3ArywsrYzoukzeZZrT6&#xA;h6uo6zb3MC31tcXha3l020t4Xu4Z3rNx+sXooppxfqBxXFXtnkXyhF5b0to3CG/uWLXDI0kiRxhj&#xA;6FtE0pL+lBGeCA+5oK4EMkxQ7FXYq7FXYq7FXYq861vzfPpHnjWLi1gs5rWLTraG+uL68+pLFLaN&#xA;PccFUQzvIZI7xSpVabEVrhSl8fkjzXrdho9wJoNOhmuLnWGKSyma0ub27kuldB6cfqukEoioxVAe&#xA;RKvtirONB8uT2t0+q6xdLqWuSp6Ju1j9KOKEGoigjq/BWPxPuSzddgoAVPcUOxV2KuxV2KuxVbLD&#xA;FNG0UyLJE4o6OAykeBB2xVTtbKztEKWsEduhNSsSKgJ8aKBiqtirsVdirsVQ91punXZVru1huGTZ&#xA;TLGrkA+HIHFKIAAAAFANgBih2KuxV2KuxV2KuZQwKsKqdiD0IxVShtbWAkwQpEWCq3BQtQgooNB2&#xA;HTFVXFXYq7FXYq7FXYq7FXYqhp9M024mWe4tIZploFlkjVmABqKMQTscUonFDsVdirsVdirsVdir&#xA;sVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirs&#xA;VdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsV&#xA;dirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqR6r&#xA;5sgsdQfT7fT73VLuGNZrqOxjR/RjckIXaR4lq3E0RSX/AMnFKlpv5g+UNSnt4LPUVeS6ISHkkqIZ&#xA;COXpeoyhBL4x8uQ8MVZDih2KuxV2KuxV2KuxV2KuxV2Koa+1TTNPVHv7uG0WQ8Y2nkSMM3gC5FTi&#xA;lEg13HTFDsVdirsVS/WtbtNItY5rhJJnnkWC1toE9SaaZgSI412FeKkkkgAAkkAYpQ+meadPvEu/&#xA;rCS6XcafwN9bX4SJ4lkrwcsrPEUbiaMrkbEdRiqPsNU0zUI2l0+7hvI1PFngkSVQetCUJ3xVBX/m&#xA;/wAp6fObfUNasLO4XZoZ7qGJxTxV2BxVHWGpadqMAuNPuoby3Owmt5FlT/gkJGKojFDsVdirsVdi&#xA;rsVeb/mHqNxpHm7TtQtrqRrxrJ5LHTYhK5nktJ1EtsIouXM3UV2aEp8LRK1aA4Uhn2k6pZ6rpltq&#xA;Vm3O1u41liJ2NGFaMOxHQjscCorFDF/zI1V9P8ryrDJMt3dzQW8MVryN1KjyqbhLYJ8Xq/VxIVI6&#xA;dcUhV8l/4LMF03lcJ6RdBeFBKD6gQU5+rvz40rXfxxVGeYvL0eraK2mQyLZAywzJKkYbg0Myzgqt&#xA;VAJZOuKqHlfVNSuZtV07UXiuLnSblbf65AvppKskKTKWSrcJFElHANO+1aYqn2KHYq7FXYqwbzjr&#xA;fmTQtegvTfRW3l+dEiRrlU+qJcfHyW6kVPWhElV9OUMVBFGX4gcUp95P8023mXSDfQqsckU0ltcx&#xA;o/qIssR34SUTmjKVdWoNiNgcVTvFDsVSbzR5kj0O0hMds9/qV9KLbTNNhIDzzsC1OR+FEVVLO7bK&#xA;or7YpYpfLqljqH6W8zxWOra3qFudP0Xy5ZRM4rzaRz607NsyuPXk9NVCqPkSqY+QPMGnQWNn5SvJ&#xA;Gg8xaZCsF3YyhtmjQNWOT4kaNk+KP4q8Ou4OBUo1LVtU1L8w9EvIWdfLNpfSabFPHKQkt2ttMZqw&#xA;j+8XnxjV/wBgxv2OFXpWBDsVSrzDo1xqcNpJZ3Qs9Q0+4F3ZXDJ6sYkEbwsskfJCyPFM6mjA71Br&#xA;ilhflLytB5svrvzb5rS31SVppbHS7T0qWkdtZSywq5gkL8neQyN+8Lca7UwquHkzQfMPmiS5021T&#xA;SNK0aR7S5utNBs5764oBNbs8PA+hH9hu5aoBFN1Wd6Zo2k6VALfTbOGzhApwgjVAfnxAqfc4FSzV&#xA;vJml3c5v7Cuk60o/danZgI9R0EyCiTp4pICPCh3xVV8sa5cajBcWuoRpBrWmSfV9Tt4ySgcqHSWO&#xA;vxenKhDpX5dQcVTrFDsVdirsVdirE7a1ttG8/XLvEnHzJEHt7sqDItzbIBLb8z8XB4lEiLWlVfFK&#xA;+w/517zPJpbfDpGuvJdaaf2Yr2he5tx4CUVmT35+2KspxQ848w/orS/zMS9v/r80mqaXJb2K2sUs&#xA;7RSc1SUweiheMhKGtdixO1cKU6ubk+WPMV9qF1FI+h6wIZJ72JGkNtdQRiGs4QM/pyRIlHpRSDyp&#xA;UYFT6317RrnSn1e2vIptMjWSR7uNg8YWKvqGor9nia4qx3yCll9f1yXRVceWriWKaydg4R7p1b62&#xA;8Jk+Joj+73Hw8uVMVZjih2KuxV2Ksd8/qyeWZr1RyOmT2uosKV/d2dxHPLt3/dI2KULqVzH5c1xt&#xA;eLA+XtXEaarKpqlvcKAkF2SP91yJxikbtRD05HFWWKwYBlNVO4I6EYodirEPMF3ZWn5i+VnvioS5&#xA;ttRtbFmAHC7c2zj4ierxo6L93fFKvYrYw+d9cN7Hxv5LaCe0vHf/AI8AgjkjjJP7sJOjO9KV5qfk&#xA;qwrRYtd8zearq50+xg02xgsotKk8xQXD3pMMUrmRbO4lihaSV1IUyfEFpUktQYVZX5esrK/1qCfT&#xA;ohF5c8tRyWOkBR8Et037u4mUk/EsSgxBv2maTArMsUOxV2KvKdT03RPKc+ow6wLq2sL24luNIvY7&#xA;7ULeyczFp5LWdLaUJG6HnxZk4sveoOFKeeWNSXRPy58rwadbC51PVbW3+pWhbgr3FzF9ZmkkejcY&#xA;1q8jmnsNyMCpuNF85tF6r+ZFS8O/pR2UX1QH+XgxMxX/AJ7VxVK7j8xZtPgl0y/sfV84rILe10W1&#xA;bkLtnXlHPCzbpbkAl3f+7oQakCqtKXkvQb7Q/Nl8L+6+uaprNhFe6tOtfTNzHPIoEQbdY0SURqPB&#xA;RirPMUOxV2KuxV2KpP5s0efVNIZbMhNUs3S80uVui3UB5Rg/5L7xv/kscUsA88fXfMyeXdQ00CAa&#xA;on1fT7yaR4jpmpRyCar8A3Jm9FoSvH7agd8Ks58qeZ11e1FvfILLzBaqF1TS3IEkcg2LoKnnE53R&#xA;xUEd61wKw3XNWj8xahHdRXlzBJayyL5XstLET308sZKSXknqfCtsd1AkZUZd2PxKAVRPlvzN551+&#xA;b9HxXdlalbcyXF3JZSpdRMlxJatG1uZ3jWUSQPvyZduh6Yqmi+QdVg0+50a18wSjRb4u16k8KzXh&#xA;NwS1z6VyHRU9ZmZjWJqFjxpgVmEEMUEMcES8IolCRoOgVRQD7sUL8VdirsVdiq2SOOSNo5FDxuCr&#xA;owqCCKEEYqxby3INNlk8m6qA6RIw0eWYcku7ClPSPKoaSBTwkXutG7nFLcXkvULRhZ6XrlzYaCTy&#xA;OnqqSSxU6RW1xJyaKI/ykMR0QqMVS6CLzZB5tu/Luna4WsIrC3vfW1C3F5PG0ss0RjSVXt+oi5fv&#xA;Q5+jFVDzl5R0u18t3U+oOdT1O/ltbSbWdQNWt1muUQSxiL0lhSFn5qsfEVpyPfCqpeeUPJGiKNR8&#xA;26vPqZWJIQ+s3IdHWIllT0EEaTHkxIDI5r74FR7nWPNEQs7SGbRPLNOElw6mC9uYxt6dvFs1vEw2&#xA;LuA9PsqPtYqymys7WytIbO0iWC1t0WKCFBRURBRVA9hihWxV2KuxVL9e07T7/S5or62iuo4wZo0m&#xA;RXCyRglHAYGjKehxSxDykAbb8vKitNAcj2P1ezH8cVZ/ihi6Rx/8rQnk4L6n6EiX1KDlx+tyGnLr&#xA;T2xS3rF6mkebLfVL2OUabcWT2hu443lWKZZRIolEYYoHUnixFKihptVVFwed/K89xFbx3w9Wd1ii&#xA;VklXk7mirVlAqTiqeYodirsVdirsVYXPpFjHrWoeWr1SNJ8xB9Q09kPForyMq1ysbD7L8uFwh/m5&#xA;ntilLvMtw2j6bHL510JPMllZsscGtWyW5m/eMI1M0EzRekzFgrGNyp/yemFUbp2j6sIGsPL+hQ+T&#xA;tPmoLm+b6s16Vp/uqK3M0fPweSQ8f5TgVF+TtMsbPXtcjsFpZ2KWWmRmpb4oI3uZKsSeTcr2rn+Y&#xA;mu+KstxQ7FXYq7FXYq7FXYqgNa0TT9Ys/qt6rUVhJBNGxjlhlX7MsUi0ZHXxHyO2KUka/wDOehRO&#xA;t3ZHzJZRgmO7sjHFfUHQS2zmOJz/AJUbiv8AJiqSeTdetbJ9S1fzDFe23mDWZFmvLf8AR9+UghhU&#xA;pb26OIOMnprXky9WJwqn135ll1OCS107y9eakkylH+vwmxtSp2Pq/WwspU/5MLfLAqX+Wvyw0mw1&#xA;RNa1C2tG1KLe0t7SER21t/qcqySuOzudv2VXFbZvih2KuxV2KuxVKPNurPpXl+7u0srjUGC+mLa0&#xA;UPKTIeFaEr8K1qx8MUsU/L97m/h8rlLO4t4NC0b6nezXMLwA3Tpbx+lEJApk4+gxZ1+HoKnsVehY&#xA;EMd1621Oy1q18w6fbNfrHA9nqNjGVEzQMwkSWHkVVnjcGqE/ErGm4AKlcvnjSCPitNWRu6nSNTJH&#xA;0rbsv3HFUj84+ZItR0y3g0yDU0ukvrSb1W0bU2EaRTq7ycWgQNxUVpXfFUV5f80+YLjVINPuLSS9&#xA;t35CTUfqF/pzIqqWV5I7uFYuoCkJKSSahaVoqzLFDsVdirsVSnzLokmq2UYtpvqupWcq3Wm3ZHIR&#xA;zoCByXbkjqzI47qTilivm/VLrU/Kep6HrWm3em6lPAVhuIIJryzedCHiZJrdJSqGRR/eKpp2xVHW&#xA;XnDzDrml266PolzZ6jcRIbi51KJ7e1tXYDmaScZJ+J+yI1oe7DFWRaBosGjaZHZRO0zhnluLmSnq&#xA;TTysXllen7TuxPt0G2Kphih2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Ku&#xA;xV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2Kux&#xA;V2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV&#xA;2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2&#xA;KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxV2KuxVILnzz5et9Su9NLXc15YFBe&#xA;R21hfXIjMiB05PBDIm6mvXFKK0DzV5f8wRyvpF6lybduNxDRo5oyegkikCSJWm3JcVTXFDsVdirs&#xA;VdirsVdirsVdirsVeVa1rflnzJ5m1Wx8y62lp5e0iT6nHoAmaCS+nQBpZpVjKyyRo54oi1BK19iU&#xA;pPf+Sr62mk81+StOm0GztIvTt4YRJHeTjlza6e2k5B4hQAQOoZ1qdjxGKXqXknzKnmbyrpuuLH6R&#xA;vIqyxDosqMY5AtewdDT2wITvFDsVdirsVdiqV6/5n0Hy/bxz6veJapM3CBCGeSRtvhjiQNI53/ZU&#xA;4pQdr5+8q3GpQ6YbqS1v7kVtre+trmyaWpoBH9ajhDk+C74qyDFDsVdirsVdirsVdirsVdirG/zD&#xA;82R+V/K91qO4unVoLA0BUXLxsYy5aihQVqa9egqSAVIQtp5BsbUKNPlu9L1S3QCTXIXiMt67jlI9&#xA;wknrLN8e59VNq/BQYqkOrT3cSp5iuAkXmPyxqtvpWoXduvEX1ldvbgoyV6PFeJIFJPCQfDhV6ZgQ&#xA;7FXYq7FXYq7FXYq7FXYq7FWFSX1p5a1HU7PWGa20nULn9JabqPqGCH1mKvJazTBkWNjMnJebBXVu&#xA;PiCpS3QfPk7xSTaurXHmFTJDpOl2skRe4jkCAEwW1xcx05xVM8lFWppRepVmPlPR5tH8vWdhOytc&#xA;orSXTRiievM7TS8B/L6jtT2wKm2KHYq7FXYq7FXnWhaZa+cJbvzBqdjMLw30lnaqZntrnTbe1Ur8&#xA;DRMGWR5as/Ft+XUqowpTbTtFt9f8u6toOuSSalaw3k9pFNPwM6pHT025qq/vErs9K4FR35f6hqd/&#xA;5Q0+bVDy1GMS211JvV3tZntzIa939LkfnipZDih2KuxV2KuxV2KuxV2KofUbC11GwubC7QSWt3E8&#xA;M8Z7pIpVh9xxSwyw1fzR5Uikt/MyXWs2nqwW2n6pZx25UrI6wRLNFyjmEru6htmWvQjFUv1Dy35l&#xA;1fXBr1nYS2ljFeQ6jLo19dek17cW8SRRScYfVSD0xCjAOTyI3C9yrK18y65QcvKep8u/GbSytfYm&#xA;9U/hgVAr+Y0Yvb60m0DVYX0xYn1FgtpP6KTqzRsVtrmaRqqhNEViO+K0yizvLW9tIby0lWa1uEWW&#xA;CZDVXRxVWB8CDihWxV2KuxV2KuxV2KpH5k1u+tJbTS9Jjjl1nUObQmavowQw09W4m4kEqnNVCg/E&#xA;zAbbkKUgvtE8tzeWbjWta1K/8x2ckLNI8dzLHFMr/AUht7Z4IKOfhFfpbviqXeV7H8rdZ1WW00KG&#xA;8hvPqcN09zDdXsFEfi6x81nB5x+qpZe3KniMKpxb6xeaFf8ApSan+mdBW5Swu55uP1vT7mXiIhM6&#xA;BRJE7SKvJgGWoJLDoFZpih2KuxV2KuxVgPmS3n8qa7L5pia5u9IvJEa80a2mCObwoIUkhhJVZzIo&#xA;AMXIHkOXxdApUvJ3nvT/AFdajuNP1S3c38k6xnTruWRVmjRwsscEczRMDUUbr1BOFU08gTGZtSm0&#xA;97iTyzO6T6S93GYnMkzSSXRiDrHJ6JZlKcx15U2pgVl+KHYq7FXYq7FXYq7FXYq7FUg87/8AHGtv&#xA;+2ro/wD3VLbFKM07zNoeoX93p1teRtqNjI0V1ZMQsyFe/A/EVI3DDbFUykkSNGeRgiKKszGgAHck&#xA;4oYl+X8i38/mTXQqldS1aWO2uEPJZbaxjS0jZWGxXlC5BHjilG+REWPQJIUFI4dR1WKJeypHqVwi&#xA;KPZVUAYqyHFDsVdirsVdiqWeZdbTQ9Cu9UaJpzbIPTgXYySOwSNK705OwFe2KWL32g+eE1B9auZL&#xA;TVTPYyWF1pNojWrRxSNzLW80zyiRx0+MIG9sVY2NWivvLVv5f12SztdL0kwR3dpE88Op3XobQWyW&#xA;BSN4nlZFBKSOG/Y2NQUoDyl5Zm8mX6TSSQWOvBTdKuo3LxW11ZTwR/WLYT0dUltp4+XLidqEihqF&#xA;U3tLPzL5qtdc+qwQ2n+IHi+s6yBJ9Vigt1CRi1WRYpbqT4TWXiidOJNMUM00jV9ag8wt5e1poLmd&#xA;7Vr6yv7aN4FkjjkWKVJIneXi6NIm4chge1MCsjxQ7FXYq7FWNecvWS88sTxIriHWY/UV+nCa1uIK&#xA;j3UzAjFK6yLD8w9YCKPTOk6aZWFK8/rF8Fr81/ViqH8o38GlyyeVL5hb39rLM2nh6KLq0kkaSOSH&#xA;sxRX4SAbgjwIxVleKHYq7FXYq7FXYq7FXYq7FWO+d5VNlplmu9xeatpohj7kW95HdykD/Jit3Y4p&#xA;S/Q9D0LXzrl5qNhb39rcatM1k00SyBRbww2jtEzVpWW2c1U4qmQ/L/yZyUyaTBPw+wtwDOo+Syl1&#xA;7eGKqPkporNtW8vlRFPp19cTxxAU5W1/M93DIv8Ak1laPbuhGKrYLPzJoN1dx6daR6rpN3cTXkUb&#xA;TiCe3luHMsyfErJJG0jM6moIrSh64qidO8y6hL5gj0XUNLaxmmtJbyKT1kmUrBJFGy/ABQ1nGKp/&#xA;ih2KuxV2KoPWNJs9X0u50y9UtbXcZjk4niwr0ZWHRlO4PjilII9Q8z+XUWLVon1vSYwFGrWiE3ka&#xA;jatzbLUye7w7/wCQMVS3XdS8vea/RTQLM63qkO9rq9rIbaOyLivJr9RVDQ/FEgZj0ZKYqmOl+RpJ&#xA;ktbjzdqDeY9QtqNEsyJHZxuB9pLZAEZx/vxwT4cemKom884xS3cmneXrc63qUTcJ/ScJaW7A0Iub&#xA;mjKhH8iBn/ycVVdD8u3tvqc+t6xdi91i4iW3URKY7a3gB5mKBCWb4n3d2NWoOgFMVT7FDsVdirsV&#xA;Y55lf6xr3lzS03drqS/nA7QWcLCv/I+aIYpS/wAj65p+ra75gvFkK3N1On1OKQcDJp9sgiinir/e&#xA;RvL6rch40OKso1TR9K1W2NrqdnDe2xNfSuI1kUEdCAwNCPHFWP22ma15cv54NEsjf6FPGjw2b3IU&#xA;2s4LCQRmXkfTdeJ41oprTriqM/TPmv8A6l3/AKfIf6YqhtS81eYdNsJ7+78vlLW2QyTMt3CxCjqQ&#xA;AN8VZRih2KuxV2KuxVB6zHqsmlXaaRLFDqbRMLOWcFollp8JcCppX2PyOKWA6T5Q/M6S5luNe1Kx&#xA;fUJFMMOrwvLLLa2709RLW29G2hSR6f3pJPSoNMKvQtN06z03T7fT7OMRWtrGsUMY7KgoN+58TgVE&#xA;YoSfXPLiajNBfWty+naxagrbahEAx4MQWilRvhliYjdT33BB3xSho5/zCh+B7LSb2nS4F3c2fL39&#xA;L6td8f8AkYcVY/rvljzhrWu2mqXenWCCztZ7eKO31i9gkWSaSJxMs0VkjDh6RHGhBr7YVZF5TsPM&#xA;9nHcjXLpZ1dk+qxet9ZdAAQ5af6vZcg21F9Pah+I1oAqf4odirsVdirGfzHi9fyldWiGT61ePDa2&#xA;axSGLlcTSqkQdhUenyb94CCCtRikJL5Z/MHTbexfRJNPCa7psjWn6K0eL1LedozvLaMOMaxV+36j&#xA;L6bfC+/VWlDWNT1WS7ceeRcaJ5dKhoYbAtJBLUbx3t3D++Vu3BVRG6cnwqg/Ic1rc+bYNXt9Mh0f&#xA;SdQt57XR7SyZYmrZuBINRhjAUzcd41qfTFVPxb4q9TwIdirsVdirsVefweUfPd5d3raxfWcbX6La&#xA;XGo2rSNMLJGLGG2hMUS27S8jycySHp/KDhSynU/Kmi6hZWtq0JtjYALptxasYZrbioUejIu6igA4&#xA;/ZI2IIwKgltPP1ivp297Y6xEoPBr1JLSf25yW4ljb5iJfliqqL3z930fSq/9tS5/7x+Ku+u+ff8A&#xA;qzaV/wBxS4/7x+Kpd5js/PetaFfaS+l6VCt7C0Jl/SVy3HkOvH6gtfvxVU8saN5vsdTBvZ0i0dYn&#xA;RbE3kmotzJX0+Ms1tayoEAb7TyVr2pXFWWYodirsVdirsVdirsVdirsVdirsVdirsVdirsVdiqWe&#xA;YPL9rrlpFbXE09v6MvrRzWziORW4NGaMQ1KpIwqNx1BB3xSi9O02x02ygsbCBLe0tkEcEKCiqo/z&#xA;38cVRBFdj0xQkE3knRJPMEWuKJYbpJRcSQxPxhlnWNolmkSn2wjlagjkNmrQYpT/ABQ7FXYq7FXY&#xA;q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq&#xA;7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FX/9k="/>
    </rdf:Alt>
   </xmp:Thumbnails>
   <xmpTPg:MaxPageSize
    stDim:w="800.000000"
    stDim:h="800.000000"
    stDim:unit="Pixels"/>
   <xmpTPg:PlateNames>
    <rdf:Seq>
     <rdf:li>Cyan</rdf:li>
     <rdf:li>Magenta</rdf:li>
     <rdf:li>Yellow</rdf:li>
     <rdf:li>Black</rdf:li>
    </rdf:Seq>
   </xmpTPg:PlateNames>
   <xmpTPg:SwatchGroups>
    <rdf:Seq>
     <rdf:li
      xmpG:groupName="Default Swatch Group"
      xmpG:groupType="0"/>
    </rdf:Seq>
   </xmpTPg:SwatchGroups>
   <dc:subject>
    <rdf:Bag>
     <rdf:li>yoga</rdf:li>
     <rdf:li>kid</rdf:li>
     <rdf:li>child</rdf:li>
     <rdf:li>smiling</rdf:li>
     <rdf:li>pose</rdf:li>
     <rdf:li>movement</rdf:li>
     <rdf:li>cartoon</rdf:li>
     <rdf:li>posture</rdf:li>
     <rdf:li>activity</rdf:li>
     <rdf:li>oriental</rdf:li>
     <rdf:li>boy</rdf:li>
     <rdf:li>stretching</rdf:li>
     <rdf:li>vector</rdf:li>
     <rdf:li>asana</rdf:li>
     <rdf:li>active</rdf:li>
     <rdf:li>lotus</rdf:li>
     <rdf:li>fitness</rdf:li>
     <rdf:li>people</rdf:li>
     <rdf:li>gymnastics</rdf:li>
     <rdf:li>balance</rdf:li>
     <rdf:li>abstract</rdf:li>
     <rdf:li>illustration</rdf:li>
     <rdf:li>icon</rdf:li>
     <rdf:li>youth</rdf:li>
     <rdf:li>lifestyle</rdf:li>
     <rdf:li>position</rdf:li>
     <rdf:li>healthy</rdf:li>
     <rdf:li>young</rdf:li>
     <rdf:li>girl</rdf:li>
     <rdf:li>collection</rdf:li>
     <rdf:li>standing</rdf:li>
     <rdf:li>gym</rdf:li>
     <rdf:li>health</rdf:li>
     <rdf:li>exercise</rdf:li>
     <rdf:li>meditation</rdf:li>
     <rdf:li>little</rdf:li>
     <rdf:li>sportive</rdf:li>
     <rdf:li>sport</rdf:li>
     <rdf:li>happy</rdf:li>
     <rdf:li>yoga icon</rdf:li>
     <rdf:li>relaxation</rdf:li>
     <rdf:li>posing</rdf:li>
     <rdf:li>design</rdf:li>
     <rdf:li>art</rdf:li>
     <rdf:li>clipart</rdf:li>
     <rdf:li>instructor</rdf:li>
     <rdf:li>sit</rdf:li>
     <rdf:li>drawing</rdf:li>
     <rdf:li>female</rdf:li>
     <rdf:li>strength</rdf:li>
     <rdf:li>clip</rdf:li>
     <rdf:li>silhouette</rdf:li>
     <rdf:li>isolated</rdf:li>
     <rdf:li>happiness</rdf:li>
     <rdf:li>stand</rdf:li>
     <rdf:li>graphic</rdf:li>
     <rdf:li>beautiful</rdf:li>
     <rdf:li>thin</rdf:li>
     <rdf:li>line</rdf:li>
    </rdf:Bag>
   </dc:subject>
   <xmpMM:History>
    <rdf:Seq>
     <rdf:li
      stEvt:action="saved"
      stEvt:instanceID="xmp.iid:FB7F11740720681183D1DC5FC7190E91"
      stEvt:when="2016-09-27T14:27:42+02:00"
      stEvt:softwareAgent="Adobe Bridge CS6 (Macintosh)"
      stEvt:changed="/metadata"/>
    </rdf:Seq>
   </xmpMM:History>
  </rdf:Description>
 </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                     
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -800 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 800 li
800 800 li
800 0 li
cp
clp
800 800 mo
0 800 li
0 0 li
800 0 li
800 800 li
cp
false sop
/0 
[/DeviceRGB] /CSA add_res
.992157 .984314 .972549 rgb
f
489.742 471.423 mo
466.688 471.423 li
466.688 470.171 li
466.688 469.431 467.365 468.835 468.084 468.918 cv
489.742 468.918 li
490.953 468.918 491.939 467.937 491.939 466.729 cv
491.939 465.519 490.953 464.534 489.742 464.534 cv
489.742 464.534 486.697 464.534 483.977 464.543 cv
481.246 464.543 478.742 462.578 477.084 461.278 cv
476.303 460.672 475.395 460.358 474.436 460.358 cv
472.975 460.358 471.633 461.092 470.848 462.319 cv
470.477 462.901 469.701 463.073 469.119 462.7 cv
468.535 462.327 468.365 461.554 468.738 460.97 cv
469.986 459.019 472.115 457.854 474.436 457.854 cv
475.955 457.854 477.396 458.349 478.604 459.286 cv
480.1 460.46 482.111 462.038 483.973 462.038 cv
486.693 462.028 489.742 462.028 489.742 462.028 cv
492.336 462.028 494.445 464.138 494.445 466.729 cv
494.445 469.318 492.336 471.423 489.742 471.423 cv
cp
.270588 .239216 .25098 rgb
f
345.332 428.21 mo
345.054 428.21 344.771 428.183 344.488 428.125 cv
343.399 427.906 342.456 427.272 341.84 426.343 cv
341.224 425.412 341.01 424.297 341.234 423.204 cv
341.685 420.994 li
341.822 420.316 342.483 419.881 343.163 420.017 cv
343.84 420.154 344.278 420.815 344.14 421.494 cv
343.689 423.708 li
343.599 424.146 343.685 424.589 343.929 424.959 cv
344.174 425.329 344.55 425.582 344.987 425.669 cv
345.894 425.856 346.777 425.274 346.963 424.373 cv
347.297 422.747 li
347.437 422.068 348.102 421.634 348.775 421.771 cv
349.453 421.91 349.89 422.572 349.751 423.25 cv
349.417 424.878 li
349.01 426.85 347.269 428.21 345.332 428.21 cv
cp
f
351.215 424.584 mo
351.187 424.584 351.16 424.583 351.132 424.581 cv
350.217 424.522 349.265 424.405 348.302 424.231 cv
346.559 423.912 344.881 423.424 343.313 422.778 cv
343.014 422.659 342.703 422.526 342.391 422.383 cv
333.785 418.497 328.067 410.23 327.475 400.814 cv
327.448 400.557 327.431 400.258 327.431 399.958 cv
327.422 399.727 327.414 399.445 327.414 399.173 cv
327.414 393.513 329.227 388.161 332.658 383.696 cv
337.512 377.346 344.885 373.703 352.883 373.703 cv
359.34 373.703 365.488 376.115 370.195 380.494 cv
370.703 380.965 370.731 381.757 370.26 382.264 cv
369.789 382.771 368.996 382.8 368.489 382.328 cv
364.247 378.382 358.705 376.208 352.883 376.208 cv
345.672 376.208 339.024 379.493 334.647 385.22 cv
331.553 389.246 329.919 394.07 329.919 399.173 cv
329.919 399.418 329.927 399.671 329.935 399.916 cv
329.936 400.177 329.95 400.395 329.972 400.613 cv
330.509 409.144 335.664 416.596 343.428 420.103 cv
343.706 420.229 343.98 420.348 344.253 420.457 cv
345.673 421.041 347.182 421.479 348.75 421.766 cv
349.616 421.923 350.474 422.029 351.294 422.081 cv
351.984 422.126 352.508 422.722 352.463 423.412 cv
352.421 424.075 351.87 424.584 351.215 424.584 cv
cp
f
326.577 368.695 mo
321.973 368.695 318.226 372.442 318.226 377.046 cv
318.226 381.651 321.973 385.397 326.577 385.397 cv
331.182 385.397 334.928 381.651 334.928 377.046 cv
334.928 372.442 331.182 368.695 326.577 368.695 cv
cp
326.577 387.902 mo
320.591 387.902 315.721 383.033 315.721 377.046 cv
315.721 371.061 320.591 366.19 326.577 366.19 cv
332.563 366.19 337.433 371.061 337.433 377.046 cv
337.433 383.033 332.563 387.902 326.577 387.902 cv
cp
f
348.733 412.993 mo
348.733 413.915 347.984 414.663 347.063 414.663 cv
346.141 414.663 345.393 413.915 345.393 412.993 cv
345.393 412.07 346.141 411.322 347.063 411.322 cv
347.984 411.322 348.733 412.07 348.733 412.993 cv
cp
f
341.009 406.104 mo
336.621 406.104 332.367 405.2 328.365 403.416 cv
327.726 403.131 li
327.634 402.437 li
327.563 401.907 327.51 401.361 327.475 400.815 cv
327.457 400.539 327.439 400.269 327.432 399.998 cv
327.422 399.727 327.414 399.445 327.414 399.173 cv
327.414 393.513 329.227 388.161 332.658 383.696 cv
337.512 377.346 344.885 373.703 352.883 373.703 cv
359.34 373.703 365.488 376.115 370.195 380.494 cv
370.703 380.965 370.731 381.757 370.26 382.264 cv
369.789 382.771 368.996 382.8 368.489 382.328 cv
364.247 378.382 358.705 376.208 352.883 376.208 cv
345.672 376.208 339.024 379.493 334.647 385.22 cv
331.553 389.246 329.919 394.07 329.919 399.173 cv
329.919 399.418 329.927 399.671 329.935 399.916 cv
329.942 400.162 329.958 400.405 329.974 400.65 cv
329.99 400.904 330.012 401.157 330.036 401.408 cv
333.524 402.862 337.212 403.599 341.009 403.599 cv
345.299 403.599 349.413 402.674 353.237 400.848 cv
353.861 400.551 354.609 400.814 354.907 401.439 cv
355.205 402.063 354.94 402.811 354.316 403.109 cv
350.153 405.097 345.675 406.104 341.009 406.104 cv
cp
f
353.818 472.242 mo
346.103 472.242 li
344.085 472.242 342.445 470.744 342.445 468.901 cv
342.445 467.984 342.858 467.101 343.579 466.477 cv
344.263 465.886 345.158 465.562 346.103 465.562 cv
351.213 465.562 li
351.905 465.562 352.466 466.122 352.466 466.813 cv
352.466 467.507 351.905 468.066 351.213 468.066 cv
346.103 468.066 li
345.764 468.066 345.442 468.178 345.218 468.372 cv
345.119 468.457 344.95 468.642 344.95 468.901 cv
344.95 469.354 345.478 469.737 346.103 469.737 cv
353.818 469.737 li
353.857 469.737 353.897 469.737 353.934 469.731 cv
354.194 469.703 li
354.886 469.703 355.468 470.265 355.468 470.956 cv
355.468 471.618 354.973 472.161 354.323 472.206 cv
354.169 472.23 354.002 472.242 353.818 472.242 cv
cp
f
412.865 426.892 mo
413.236 428.622 413.424 430.392 413.424 432.161 cv
413.424 450.95 li
413.424 452.615 413.648 454.237 414.092 455.772 cv
416.24 463.51 423.348 468.904 431.379 468.904 cv
468.539 468.904 li
468.539 448.027 li
447.662 448.027 li
441.365 448.027 436.135 442.923 435.98 436.64 cv
435.973 436.54 435.971 436.434 435.971 436.337 cv
435.971 435.944 435.99 435.565 436.027 435.179 cv
436.035 435.099 li
436.16 431.563 li
436.162 431.491 436.447 425.395 436.451 423.392 cv
436.471 414.19 435.342 407.579 434.143 403.162 cv
428.658 412.294 421.355 420.442 412.865 426.892 cv
cp
471.045 471.409 mo
431.379 471.409 li
422.227 471.409 414.127 465.26 411.684 456.454 cv
411.178 454.707 410.918 452.851 410.918 450.95 cv
410.918 432.161 li
410.918 430.317 410.691 428.474 410.246 426.683 cv
410.043 425.874 li
410.713 425.375 li
419.979 418.484 427.824 409.513 433.404 399.432 cv
434.771 396.961 li
435.686 399.632 li
437.189 404.028 438.98 411.72 438.957 423.396 cv
438.953 425.456 438.674 431.417 438.662 431.67 cv
438.521 435.412 li
438.49 435.725 438.477 436.021 438.477 436.337 cv
438.484 436.544 li
438.588 441.495 442.703 445.522 447.662 445.522 cv
471.045 445.522 li
471.045 471.409 li
cp
f
352.464 466.449 mo
354.542 469.687 li
358.816 469.356 363.32 465.916 363.32 461.389 cv
363.32 432.161 li
363.32 418.347 374.559 407.108 388.372 407.108 cv
399.266 407.108 408.793 414.079 412.156 424.276 cv
420.646 417.657 427.867 409.277 433.131 399.92 cv
431.973 396.691 430.939 395.229 430.928 395.214 cv
430.867 395.123 li
423.289 382.428 409.404 374.541 394.635 374.541 cv
385.759 374.541 377.265 377.27 370.071 382.432 cv
359.047 390.346 352.464 403.161 352.464 416.712 cv
352.464 466.449 li
cp
353.874 472.218 mo
353.189 472.218 li
349.959 467.185 li
349.959 416.712 li
349.959 402.355 356.932 388.78 368.611 380.396 cv
376.232 374.927 385.232 372.036 394.635 372.036 cv
410.266 372.036 424.961 380.374 432.994 393.798 cv
433.229 394.137 434.43 395.967 435.686 399.632 cv
435.865 400.158 li
435.596 400.645 li
429.846 411.035 421.758 420.282 412.209 427.386 cv
410.701 428.507 li
410.246 426.683 li
407.738 416.633 398.743 409.614 388.372 409.614 cv
375.94 409.614 365.825 419.729 365.825 432.161 cv
365.825 461.389 li
365.825 466.511 360.917 472.218 353.874 472.218 cv
cp
f
590.088 375.08 mo
589.803 375.08 589.516 374.984 589.281 374.786 cv
589.068 374.606 588.887 374.392 588.738 374.147 cv
587.961 372.811 587.66 371.32 587.861 369.819 cv
588.119 367.948 588.467 365.412 587.521 363.797 cv
586.15 361.45 584.607 358.821 584.607 358.821 cv
583.299 356.578 584.055 353.692 586.291 352.386 cv
587.377 351.753 588.641 351.579 589.854 351.897 cv
591.066 352.216 592.082 352.988 592.715 354.073 cv
594.793 357.63 li
598.684 364.27 599.975 366.477 600.404 367.314 cv
600.447 367.29 li
600.838 367.958 li
601.189 368.554 600.988 369.322 600.393 369.672 cv
599.795 370.021 599.027 369.822 598.678 369.226 cv
598.113 368.261 li
597.375 366.995 594.32 361.777 592.631 358.895 cv
590.551 355.337 li
590.256 354.83 589.781 354.469 589.217 354.32 cv
588.652 354.174 588.063 354.254 587.555 354.55 cv
586.51 355.16 586.158 356.508 586.77 357.556 cv
586.77 357.556 li
586.77 357.556 588.314 360.185 589.684 362.533 cv
591.068 364.895 590.633 368.051 590.346 370.14 cv
590.217 371.096 590.408 372.036 590.895 372.871 cv
591.424 373.316 591.492 374.105 591.047 374.635 cv
590.799 374.929 590.445 375.08 590.088 375.08 cv
cp
f
648.779 472.242 mo
635.697 472.242 623.975 466.077 618.188 456.155 cv
616.883 453.92 613.807 447.134 613.676 446.847 cv
580.213 377.688 li
583.316 376.104 li
599.477 367.34 li
600.479 367.34 li
600.85 367.96 li
629.492 416.828 li
629.844 417.425 629.643 418.192 629.045 418.542 cv
628.449 418.892 627.682 418.692 627.332 418.095 cv
599.283 370.24 li
583.535 378.804 li
615.945 445.784 li
615.99 445.883 619.111 452.769 620.35 454.894 cv
625.691 464.049 636.586 469.737 648.779 469.737 cv
649.832 469.737 650.881 469.69 651.918 469.597 cv
651.863 469.536 651.809 469.477 651.756 469.417 cv
651.238 468.835 650.775 468.242 650.299 467.554 cv
650.041 467.178 649.801 466.802 649.576 466.417 cv
648.609 464.821 647.773 462.948 647.104 460.868 cv
647.02 460.61 646.945 460.353 646.869 460.093 cv
646.623 459.237 646.404 458.362 646.211 457.456 cv
646.098 456.905 646.002 456.357 645.908 455.8 cv
645.549 453.564 645.365 451.226 645.357 448.834 cv
641.82 442.805 li
641.471 442.208 641.67 441.44 642.268 441.091 cv
642.863 440.741 643.633 440.94 643.982 441.538 cv
647.861 448.153 li
647.861 448.669 li
647.861 450.985 648.035 453.247 648.381 455.392 cv
648.467 455.91 648.557 456.43 648.662 456.941 cv
648.842 457.782 649.045 458.599 649.266 459.36 cv
649.344 459.628 649.412 459.863 649.488 460.099 cv
650.098 461.995 650.852 463.69 651.73 465.138 cv
651.936 465.49 652.145 465.815 652.361 466.133 cv
652.777 466.731 653.178 467.247 653.582 467.703 cv
653.746 467.884 653.875 468.027 654.006 468.165 cv
654.203 468.36 li
654.334 468.492 654.469 468.627 654.609 468.753 cv
654.902 469.023 655.191 469.275 655.488 469.503 cv
657.764 471.253 li
654.934 471.731 li
652.93 472.071 650.859 472.242 648.779 472.242 cv
cp
f
650.832 428.726 mo
650.678 428.726 650.521 428.696 650.369 428.638 cv
649.727 428.382 649.412 427.654 649.666 427.011 cv
653.881 416.374 660.564 407.994 668.004 404.021 cv
668.033 404.004 668.09 403.975 668.146 403.946 cv
668.75 403.607 669.541 403.805 669.881 404.406 cv
670.223 405.009 670.037 405.759 669.436 406.099 cv
669.379 406.131 669.322 406.16 669.266 406.188 cv
669.184 406.231 li
662.361 409.875 655.938 417.987 651.996 427.935 cv
651.801 428.426 651.33 428.726 650.832 428.726 cv
cp
f
654.391 471.819 mo
653.959 471.488 li
653.641 471.243 653.303 470.955 652.924 470.608 cv
652.76 470.461 652.592 470.294 652.424 470.126 cv
652.209 469.911 li
652.035 469.729 651.885 469.563 651.732 469.394 cv
649.121 466.429 647.219 462.31 646.207 457.448 cv
646.094 456.899 645.99 456.345 645.902 455.779 cv
645.539 453.509 645.354 451.113 645.354 448.667 cv
645.354 448.499 li
645.363 446.464 645.488 444.421 645.73 442.413 cv
645.813 441.727 646.432 441.238 647.123 441.319 cv
647.809 441.401 648.299 442.024 648.217 442.712 cv
647.988 444.624 647.867 446.571 647.859 448.497 cv
647.859 448.667 li
647.859 450.981 648.033 453.243 648.377 455.392 cv
648.459 455.921 648.555 456.434 648.66 456.938 cv
649.584 461.374 651.285 465.099 653.584 467.704 cv
653.73 467.868 653.867 468.02 654.002 468.162 cv
654.199 468.359 li
654.332 468.491 654.465 468.625 654.605 468.751 cv
654.762 468.895 654.916 469.031 655.068 469.163 cv
669.051 466.603 680.17 455.579 682.828 441.568 cv
683.008 440.147 li
686.643 412.321 li
686.732 411.634 687.361 411.147 688.047 411.241 cv
688.732 411.329 689.215 411.958 689.125 412.646 cv
685.301 441.962 li
682.4 457.257 670.199 469.19 654.928 471.73 cv
654.391 471.819 li
cp
f
615.834 418.524 mo
615.426 418.524 615.064 418.331 614.836 418.032 cv
614.576 417.761 li
614.576 417.659 li
614.422 417.43 614.279 417.187 614.154 416.935 cv
610.475 409.427 li
608.957 406.328 610.244 402.57 613.344 401.045 cv
616.447 399.535 620.207 400.822 621.727 403.914 cv
624.541 409.669 li
624.846 410.291 624.588 411.041 623.967 411.345 cv
623.344 411.648 622.596 411.392 622.291 410.771 cv
619.477 405.017 li
618.564 403.162 616.307 402.391 614.443 403.297 cv
612.588 404.209 611.814 406.466 612.725 408.323 cv
616.398 415.823 li
616.51 416.044 616.643 416.259 616.793 416.454 cv
617.082 416.758 li
617.086 417.269 li
617.086 417.96 616.525 418.524 615.834 418.524 cv
cp
f
662.564 385.042 mo
662.482 385.042 662.4 385.034 662.316 385.017 cv
660.295 384.608 li
659.203 384.391 658.262 383.758 657.645 382.829 cv
657.027 381.896 656.811 380.778 657.037 379.68 cv
657.42 377.748 659.143 376.341 661.129 376.341 cv
661.426 376.341 661.711 376.37 661.977 376.428 cv
664.604 376.968 li
665.281 377.107 665.717 377.77 665.578 378.447 cv
665.439 379.125 664.779 379.562 664.1 379.422 cv
661.459 378.878 li
661.355 378.856 661.244 378.846 661.129 378.846 cv
660.334 378.846 659.645 379.405 659.492 380.176 cv
659.4 380.625 659.486 381.072 659.732 381.444 cv
659.979 381.813 660.354 382.065 660.789 382.153 cv
662.813 382.562 li
663.49 382.698 663.93 383.36 663.791 384.038 cv
663.672 384.632 663.148 385.042 662.564 385.042 cv
cp
f
643.004 440.919 mo
643.1 440.933 li
644.404 441.138 645.723 441.265 647.02 441.313 cv
647.508 441.336 647.988 441.345 648.469 441.345 cv
660.328 441.345 671.412 435.292 678.121 425.155 cv
678.197 425.044 li
678.719 424.248 678.979 423.382 678.979 422.485 cv
678.979 419.953 676.918 417.894 674.387 417.894 cv
673.145 417.894 671.98 418.383 671.109 419.271 cv
665.66 424.782 658.494 428.138 650.928 428.723 cv
650.072 428.787 649.27 428.818 648.469 428.818 cv
641.588 428.818 637.008 426.033 632.152 422.669 cv
629.141 420.584 626.113 417.063 623.139 412.192 cv
617.314 417.582 li
622.826 430.708 632.152 439.192 643.004 440.919 cv
cp
648.469 443.85 mo
647.945 443.85 647.424 443.841 646.912 443.815 cv
645.564 443.766 644.18 443.634 642.811 443.424 cv
642.705 443.408 li
630.77 441.55 620.596 432.28 614.76 417.962 cv
614.576 417.779 li
614.572 416.704 li
623.723 408.238 li
624.508 409.594 li
627.551 414.843 630.604 418.55 633.58 420.609 cv
638.244 423.841 642.301 426.313 648.469 426.313 cv
649.205 426.313 649.947 426.284 650.738 426.226 cv
657.699 425.687 664.301 422.593 669.324 417.514 cv
670.666 416.145 672.467 415.389 674.387 415.389 cv
678.299 415.389 681.484 418.571 681.484 422.485 cv
681.484 423.916 681.059 425.296 680.25 426.478 cv
680.145 426.636 li
672.965 437.417 661.133 443.85 648.469 443.85 cv
cp
f
686.355 413.786 mo
683.039 413.786 679.82 413.159 676.789 411.923 cv
673.457 410.573 670.387 408.479 667.91 405.87 cv
664.951 402.777 662.809 398.95 661.721 394.805 cv
661.166 392.696 660.887 390.513 660.887 388.316 cv
660.887 386.732 661.037 385.131 661.334 383.557 cv
661.717 381.514 662.35 379.532 663.215 377.667 cv
664 375.958 664.982 374.332 666.131 372.838 cv
667.717 370.761 669.617 368.938 671.773 367.425 cv
672.34 367.027 673.121 367.164 673.518 367.73 cv
673.916 368.296 673.779 369.078 673.213 369.475 cv
671.266 370.842 669.553 372.486 668.119 374.362 cv
667.082 375.71 666.197 377.175 665.49 378.718 cv
664.709 380.398 664.141 382.18 663.795 384.02 cv
663.527 385.442 663.391 386.888 663.391 388.316 cv
663.391 390.299 663.645 392.268 664.143 394.169 cv
665.123 397.903 667.053 401.352 669.725 404.143 cv
671.959 406.498 674.729 408.384 677.732 409.602 cv
680.465 410.716 683.365 411.28 686.355 411.28 cv
686.846 411.28 687.326 411.265 687.801 411.233 cv
688.709 411.176 689.586 411.069 690.412 410.917 cv
694.457 410.204 698.234 408.405 701.344 405.715 cv
702.381 404.821 703.322 403.852 704.143 402.83 cv
704.576 402.291 705.365 402.204 705.904 402.637 cv
706.443 403.07 706.529 403.859 706.096 404.398 cv
705.18 405.539 704.133 406.62 702.98 407.612 cv
699.531 410.596 695.338 412.593 690.857 413.382 cv
689.941 413.552 688.965 413.671 687.963 413.733 cv
687.439 413.769 686.902 413.786 686.355 413.786 cv
cp
f
706.779 396.824 mo
706.316 398.459 li
706.094 399.253 705.98 400.056 705.98 400.844 cv
705.98 405.678 709.914 409.611 714.748 409.611 cv
719.582 409.611 723.516 405.678 723.516 400.844 cv
723.516 399.825 723.332 398.807 722.967 397.818 cv
722.238 395.84 li
724.324 396.146 li
724.809 396.217 725.215 396.25 725.604 396.25 cv
730.439 396.25 734.373 392.316 734.373 387.482 cv
734.373 383.658 731.926 380.303 728.285 379.135 cv
725.477 378.233 li
728.074 376.839 li
730.93 375.306 732.701 372.345 732.701 369.11 cv
732.701 364.275 728.768 360.342 723.934 360.342 cv
722.965 360.342 721.994 360.509 721.051 360.838 cv
718.383 361.769 li
719.484 359.167 li
719.943 358.084 720.176 356.934 720.176 355.75 cv
720.176 350.914 716.242 346.981 711.408 346.981 cv
708.684 346.981 706.16 348.223 704.48 350.389 cv
702.973 352.335 li
702.287 349.97 li
701.209 346.243 697.748 343.641 693.871 343.641 cv
689.037 343.641 685.104 347.574 685.104 352.409 cv
685.104 352.528 685.111 352.645 685.119 352.761 cv
685.244 354.82 li
683.459 354.182 li
682.492 353.837 681.5 353.662 680.51 353.662 cv
675.676 353.662 671.742 357.595 671.742 362.43 cv
671.742 367.264 675.676 371.198 680.51 371.198 cv
681.463 371.198 682.418 371.038 683.346 370.72 cv
685.463 369.998 li
684.973 372.18 li
684.643 373.646 684.477 375.142 684.477 376.626 cv
684.477 387.792 693.561 396.876 704.727 396.876 cv
706.779 396.824 li
cp
714.748 412.116 mo
708.531 412.116 703.475 407.06 703.475 400.844 cv
703.475 400.348 703.508 399.851 703.576 399.354 cv
691.563 398.751 681.971 388.788 681.971 376.626 cv
681.971 375.611 682.041 374.591 682.178 373.576 cv
681.625 373.661 681.068 373.703 680.51 373.703 cv
674.293 373.703 669.236 368.646 669.236 362.43 cv
669.236 356.213 674.293 351.156 680.51 351.156 cv
681.225 351.156 681.938 351.227 682.645 351.366 cv
683.174 345.636 688.006 341.136 693.871 341.136 cv
698.148 341.136 702.033 343.599 703.926 347.324 cv
705.971 345.495 708.607 344.476 711.408 344.476 cv
717.623 344.476 722.682 349.533 722.682 355.75 cv
722.682 356.49 722.609 357.22 722.471 357.935 cv
722.955 357.87 723.445 357.837 723.934 357.837 cv
730.15 357.837 735.207 362.894 735.207 369.11 cv
735.207 372.465 733.725 375.59 731.227 377.708 cv
734.68 379.685 736.877 383.373 736.877 387.482 cv
736.877 393.625 731.938 398.637 725.822 398.753 cv
725.955 399.445 726.021 400.143 726.021 400.844 cv
726.021 407.06 720.965 412.116 714.748 412.116 cv
cp
f
675.572 380.712 mo
675.572 381.635 674.824 382.382 673.902 382.382 cv
672.98 382.382 672.232 381.635 672.232 380.712 cv
672.232 379.789 672.98 379.042 673.902 379.042 cv
674.824 379.042 675.572 379.789 675.572 380.712 cv
cp
f
668.039 397.739 mo
665.793 397.739 663.549 396.884 661.838 395.176 cv
661.35 394.686 661.35 393.894 661.838 393.404 cv
662.328 392.915 663.121 392.915 663.609 393.403 cv
666.051 395.845 670.025 395.845 672.467 393.403 cv
672.957 392.915 673.75 392.915 674.238 393.404 cv
674.729 393.894 674.729 394.686 674.238 395.176 cv
672.529 396.884 670.283 397.739 668.039 397.739 cv
cp
f
71.5337 400.133 mo
71.2124 400.133 70.8916 400.011 70.6475 399.766 cv
70.3555 399.473 70.1646 399.291 70.1587 399.286 cv
59.3223 388.442 li
57.4941 386.612 57.4941 383.634 59.3242 381.803 cv
61.1514 379.976 64.1328 379.975 65.9697 381.8 cv
65.9727 381.803 68.1279 383.958 70.0493 385.888 cv
71.377 387.209 73.9238 387.517 75.7842 387.741 cv
77.2783 387.922 78.6855 388.611 79.7466 389.682 cv
80.708 390.633 81.3574 391.859 81.6157 393.217 cv
81.6157 393.217 li
81.6167 393.217 82.1045 395.315 82.3169 396.15 cv
82.4873 396.82 82.083 397.503 81.4126 397.673 cv
80.7407 397.846 80.0596 397.438 79.8892 396.768 cv
79.6709 395.909 79.165 393.736 79.165 393.736 cv
78.9912 392.828 78.584 392.056 77.9756 391.454 cv
77.292 390.764 76.4331 390.344 75.4839 390.229 cv
73.3882 389.976 70.2207 389.593 68.2783 387.66 cv
66.3545 385.728 64.2017 383.575 64.2017 383.574 cv
63.3438 382.722 61.9492 382.721 61.0952 383.574 cv
60.2422 384.428 60.2422 385.817 61.0952 386.671 cv
71.9087 397.492 li
71.9097 397.494 72.1143 397.689 72.4194 397.996 cv
72.9087 398.485 72.9077 399.278 72.4185 399.767 cv
72.1738 400.012 71.8535 400.133 71.5337 400.133 cv
cp
f
70.6782 400.383 mo
70.7314 401.303 li
72.478 431.954 93.3882 458.2 122.842 466.807 cv
131.026 460.466 135.706 450.937 135.706 440.564 cv
135.706 439.104 135.608 437.63 135.416 436.173 cv
135.141 435.987 134.882 435.786 134.648 435.577 cv
132.193 433.37 129.023 432.154 125.723 432.154 cv
124.548 432.154 123.393 432.306 122.293 432.604 cv
119.608 433.313 117.246 434.82 115.452 436.966 cv
114.79 437.757 li
111.933 436.187 li
110.841 435.561 109.746 434.89 108.655 434.182 cv
95.4321 425.606 85.3931 412.773 80.2856 397.954 cv
70.6782 400.383 li
cp
123.354 469.558 mo
122.759 469.39 li
91.9639 460.676 70.0493 433.37 68.23 401.445 cv
68.2627 401.442 li
68.1904 400.984 68.147 400.359 68.0898 399.515 cv
68.0181 398.471 li
81.9331 394.954 li
82.2959 396.067 li
87.1001 410.812 96.9463 423.602 110.02 432.081 cv
111.072 432.764 112.128 433.41 113.159 434.003 cv
114.22 434.585 li
116.25 432.448 118.798 430.937 121.646 430.184 cv
122.952 429.829 124.327 429.649 125.723 429.649 cv
129.642 429.649 133.407 431.093 136.323 433.714 cv
136.566 433.933 136.873 434.148 137.185 434.323 cv
137.722 434.623 li
137.813 435.231 li
138.077 436.996 138.211 438.79 138.211 440.564 cv
138.211 451.94 132.977 462.373 123.85 469.188 cv
123.354 469.558 li
cp
f
179.233 433.88 mo
178.967 433.88 178.7 433.793 178.473 433.61 cv
178.431 433.577 li
177.892 433.144 177.807 432.354 178.24 431.815 cv
178.673 431.276 179.461 431.191 180.001 431.624 cv
180.54 432.058 180.647 432.863 180.213 433.402 cv
179.963 433.714 179.599 433.88 179.233 433.88 cv
cp
f
143.258 472.242 mo
136.357 472.242 129.459 471.282 122.759 469.389 cv
120.315 468.698 li
122.35 467.181 li
130.715 460.934 135.709 450.985 135.709 440.567 cv
135.709 438.92 135.584 437.248 135.338 435.601 cv
134.96 433.063 li
137.194 434.324 li
137.605 434.557 137.872 434.62 137.932 434.624 cv
138.586 434.64 139.141 434.665 139.141 434.665 cv
143.365 434.663 147.526 433.865 151.451 432.29 cv
157.175 430.015 162.156 426.188 165.862 421.222 cv
166.275 420.667 167.06 420.552 167.614 420.967 cv
168.169 421.38 168.283 422.165 167.87 422.72 cv
163.888 428.058 158.531 432.173 152.381 434.617 cv
148.162 436.31 143.686 437.169 139.083 437.169 cv
139.026 437.167 138.601 437.147 138.049 437.132 cv
138.158 438.278 138.214 439.428 138.214 440.567 cv
138.214 450.93 133.621 460.859 125.815 467.606 cv
131.543 469.021 137.399 469.737 143.258 469.737 cv
162.834 469.737 181.87 461.645 195.6 447.509 cv
195.64 447.312 195.728 447.12 195.867 446.955 cv
196.309 446.424 197.099 446.353 197.63 446.796 cv
198.808 447.778 li
197.885 448.747 li
183.651 463.679 163.741 472.242 143.258 472.242 cv
cp
f
211.285 404.81 mo
210.877 404.81 210.479 404.612 210.238 404.248 cv
209.856 403.672 210.015 402.895 210.592 402.513 cv
214.167 400.149 li
214.542 399.901 214.797 399.524 214.886 399.087 cv
214.974 398.651 214.887 398.208 214.64 397.836 cv
214.393 397.46 214.017 397.207 213.58 397.118 cv
213.147 397.029 212.704 397.116 212.336 397.36 cv
209.685 399.109 li
209.107 399.489 208.33 399.331 207.949 398.752 cv
207.568 398.174 207.728 397.398 208.306 397.017 cv
210.953 395.271 li
211.876 394.658 212.988 394.441 214.08 394.663 cv
215.174 394.886 216.115 395.522 216.729 396.454 cv
217.345 397.38 217.563 398.493 217.341 399.585 cv
217.119 400.68 216.481 401.622 215.548 402.239 cv
211.974 404.603 li
211.762 404.743 211.521 404.81 211.285 404.81 cv
cp
f
235.838 388.193 mo
235.772 388.193 235.706 388.188 235.639 388.178 cv
234.956 388.068 234.49 387.426 234.601 386.742 cv
234.653 386.41 234.746 386.092 234.875 385.8 cv
238.043 378.76 li
238.875 376.921 240.913 376.037 242.587 376.788 cv
243.359 377.136 243.952 377.779 244.26 378.6 cv
244.604 379.515 244.558 380.574 244.134 381.505 cv
243.251 383.471 li
242.968 384.102 242.226 384.385 241.595 384.1 cv
240.965 383.816 240.683 383.075 240.966 382.444 cv
241.851 380.474 li
242.004 380.138 242.026 379.778 241.915 379.481 cv
241.863 379.345 241.76 379.162 241.559 379.072 cv
241.199 378.91 240.613 379.158 240.327 379.79 cv
237.163 386.82 li
237.125 386.907 237.094 387.017 237.074 387.139 cv
236.975 387.754 236.443 388.193 235.838 388.193 cv
cp
f
240.479 392.837 mo
240.308 392.837 240.133 392.802 239.966 392.726 cv
239.335 392.442 239.054 391.701 239.338 391.069 cv
241.852 385.483 li
242.107 384.92 241.976 384.283 241.567 384.087 cv
240.943 383.788 240.68 383.039 240.979 382.416 cv
241.278 381.792 242.027 381.53 242.65 381.828 cv
244.286 382.613 244.952 384.715 244.135 386.516 cv
241.622 392.098 li
241.413 392.562 240.957 392.837 240.479 392.837 cv
cp
f
210.648 419.725 mo
210.505 419.725 210.359 419.699 210.216 419.647 cv
209.566 419.408 209.234 418.688 209.473 418.039 cv
210.419 415.47 210.899 412.774 210.899 410.029 cv
210.899 407.94 210.622 405.874 210.075 403.891 cv
209.562 402.058 208.832 400.305 207.907 398.684 cv
205.861 395.091 202.882 392.112 199.289 390.065 cv
198.688 389.723 198.479 388.958 198.821 388.357 cv
199.163 387.756 199.927 387.546 200.529 387.889 cv
204.512 390.157 207.816 393.46 210.083 397.442 cv
211.11 399.24 211.919 401.184 212.489 403.22 cv
213.097 405.426 213.404 407.715 213.404 410.029 cv
213.404 413.071 212.872 416.057 211.824 418.904 cv
211.638 419.411 211.158 419.725 210.648 419.725 cv
cp
f
179.263 433.888 mo
179.176 433.888 179.088 433.878 179 433.859 cv
178.673 433.865 li
178.484 433.683 li
178.442 433.667 178.402 433.649 178.36 433.633 cv
173.074 431.493 168.601 427.57 165.776 422.589 cv
163.61 418.789 162.464 414.446 162.464 410.029 cv
162.464 404.369 164.278 399.018 167.71 394.552 cv
167.953 394.23 168.211 393.909 168.478 393.598 cv
168.584 393.467 168.72 393.303 168.865 393.148 cv
169 392.989 169.18 392.79 169.37 392.6 cv
169.684 392.256 170.066 391.87 170.47 391.493 cv
170.634 391.339 170.778 391.205 170.92 391.079 cv
171.097 390.909 171.311 390.726 171.537 390.542 cv
171.858 390.221 li
171.928 390.22 li
171.978 390.18 172.026 390.141 172.075 390.103 cv
172.291 389.927 li
172.685 389.619 173.095 389.318 173.515 389.035 cv
173.628 388.946 173.742 388.871 173.864 388.798 cv
173.979 388.719 174.094 388.641 174.208 388.571 cv
174.292 388.51 174.421 388.431 174.555 388.356 cv
174.739 388.241 174.922 388.132 175.104 388.023 cv
175.306 387.899 175.535 387.772 175.772 387.644 cv
175.891 387.578 li
176.542 387.228 177.233 386.897 178.014 386.564 cv
178.36 386.413 178.714 386.27 179.076 386.142 cv
179.4 386.017 179.766 385.889 180.142 385.778 cv
180.727 385.591 181.337 385.419 181.943 385.272 cv
181.953 385.262 li
182.307 385.183 li
183.02 385.023 183.759 384.891 184.564 384.78 cv
184.946 384.719 185.347 384.673 185.763 384.646 cv
186.13 384.612 186.525 384.586 186.92 384.569 cv
187.602 384.539 188.196 385.075 188.226 385.766 cv
188.255 386.457 187.72 387.042 187.028 387.072 cv
186.672 387.087 186.314 387.111 185.958 387.143 cv
185.593 387.168 185.264 387.205 184.934 387.258 cv
184.309 387.344 183.744 387.44 183.206 387.551 cv
183.1 387.657 li
182.717 387.663 li
182.111 387.805 181.492 387.976 180.876 388.174 cv
180.537 388.273 180.234 388.38 179.94 388.493 cv
179.603 388.612 179.305 388.734 179.007 388.863 cv
178.288 389.171 177.663 389.469 177.087 389.779 cv
176.973 389.842 li
176.777 389.949 176.586 390.053 176.402 390.167 cv
176.208 390.282 176.035 390.384 175.863 390.494 cv
175.786 390.539 li
175.716 390.576 175.647 390.619 175.579 390.667 cv
175.433 390.759 175.343 390.821 175.252 390.884 cv
175.172 390.935 li
175.129 390.96 175.088 390.983 175.049 391.015 cv
174.956 391.084 li
174.636 391.299 174.321 391.526 174.017 391.759 cv
174.01 391.772 li
173.792 391.939 li
173.598 392.09 173.409 392.241 173.221 392.406 cv
172.841 392.718 li
172.765 392.784 172.69 392.852 172.617 392.921 cv
172.455 393.066 172.33 393.184 172.204 393.302 cv
171.824 393.656 171.488 393.995 171.182 394.331 cv
170.997 394.517 170.86 394.668 170.73 394.82 cv
170.589 394.973 170.492 395.091 170.4 395.204 cv
170.146 395.501 169.92 395.782 169.702 396.07 cv
166.604 400.102 164.97 404.926 164.97 410.029 cv
164.97 414.011 166.001 417.927 167.954 421.351 cv
170.422 425.703 174.281 429.157 178.858 431.126 cv
179.205 430.763 li
179.946 431.577 li
180.426 431.873 180.648 432.468 180.464 433.03 cv
180.292 433.558 179.793 433.888 179.263 433.888 cv
cp
f
179.263 433.888 mo
179.176 433.888 179.088 433.878 179 433.859 cv
178.673 433.865 li
178.484 433.683 li
178.442 433.667 178.402 433.649 178.36 433.633 cv
173.074 431.493 168.601 427.57 165.776 422.589 cv
163.61 418.789 162.464 414.446 162.464 410.029 cv
162.464 404.369 164.278 399.018 167.71 394.552 cv
167.953 394.23 168.211 393.909 168.478 393.598 cv
168.584 393.467 168.72 393.303 168.865 393.148 cv
169 392.989 169.18 392.79 169.37 392.6 cv
169.684 392.256 170.066 391.87 170.47 391.493 cv
170.634 391.339 170.778 391.205 170.92 391.079 cv
171.097 390.909 171.311 390.726 171.537 390.542 cv
171.858 390.221 li
171.928 390.22 li
171.978 390.181 172.025 390.142 172.075 390.103 cv
172.291 389.927 li
172.685 389.619 173.095 389.318 173.515 389.035 cv
173.628 388.946 173.742 388.871 173.864 388.798 cv
173.979 388.719 174.094 388.641 174.208 388.571 cv
174.292 388.51 174.421 388.431 174.555 388.356 cv
174.739 388.24 174.922 388.132 175.104 388.023 cv
175.306 387.899 175.535 387.772 175.772 387.644 cv
175.891 387.578 li
176.542 387.228 177.233 386.897 178.014 386.564 cv
178.098 386.529 li
178.413 386.401 178.728 386.272 179.051 386.151 cv
179.162 386.111 li
179.478 386.002 179.792 385.892 180.107 385.789 cv
180.721 385.593 181.337 385.419 181.943 385.272 cv
181.953 385.262 li
182.307 385.183 li
183.02 385.023 183.759 384.891 184.564 384.78 cv
184.799 384.748 185.035 384.719 185.271 384.694 cv
185.099 383.976 185.012 383.232 185.012 382.472 cv
185.012 377.177 189.32 372.868 194.615 372.868 cv
199.911 372.868 204.218 377.177 204.218 382.472 cv
204.218 384.909 203.294 387.236 201.616 389.023 cv
200.805 389.854 li
184.144 406.514 li
182.151 408.507 182.151 411.751 184.144 413.745 cv
186.236 415.821 li
188.324 417.907 189.471 420.677 189.469 423.62 cv
189.467 426.56 188.32 429.323 186.239 431.399 cv
185.887 431.751 185.529 432.063 185.145 432.351 cv
184.592 432.767 183.806 432.653 183.391 432.099 cv
182.976 431.546 183.089 430.76 183.643 430.346 cv
183.931 430.13 184.201 429.895 184.468 429.627 cv
186.077 428.022 186.962 425.889 186.964 423.619 cv
186.965 421.345 186.079 419.206 184.468 417.595 cv
182.376 415.521 li
179.402 412.546 179.402 407.713 182.373 404.742 cv
199.808 387.291 li
201.029 385.987 201.713 384.27 201.713 382.472 cv
201.713 378.558 198.529 375.374 194.615 375.374 cv
190.701 375.374 187.517 378.558 187.517 382.472 cv
187.517 383.471 187.718 384.424 188.116 385.306 cv
188.877 386.991 li
187.028 387.072 li
186.672 387.087 186.314 387.111 185.958 387.143 cv
185.612 387.175 185.255 387.214 184.907 387.262 cv
184.304 387.345 183.743 387.44 183.206 387.551 cv
183.1 387.657 li
182.717 387.663 li
182.111 387.805 181.492 387.976 180.876 388.174 cv
180.583 388.269 180.286 388.373 179.989 388.477 cv
179.905 388.505 li
179.632 388.609 179.338 388.729 179.044 388.849 cv
178.288 389.171 177.663 389.469 177.087 389.779 cv
176.973 389.842 li
176.777 389.949 176.586 390.053 176.402 390.167 cv
176.208 390.282 176.035 390.384 175.863 390.494 cv
175.786 390.539 li
175.716 390.576 175.647 390.619 175.579 390.667 cv
175.433 390.759 175.343 390.821 175.252 390.884 cv
175.172 390.935 li
175.129 390.96 175.088 390.983 175.049 391.015 cv
174.956 391.084 li
174.636 391.299 174.321 391.526 174.017 391.759 cv
174.01 391.772 li
173.792 391.939 li
173.598 392.09 173.409 392.241 173.221 392.406 cv
172.841 392.718 li
172.765 392.784 172.69 392.852 172.617 392.921 cv
172.455 393.066 172.33 393.184 172.204 393.302 cv
171.824 393.656 171.488 393.995 171.182 394.331 cv
170.997 394.517 170.86 394.668 170.73 394.82 cv
170.589 394.973 170.492 395.091 170.4 395.204 cv
170.146 395.501 169.92 395.782 169.702 396.07 cv
166.604 400.102 164.97 404.926 164.97 410.029 cv
164.97 414.011 166.001 417.927 167.954 421.351 cv
170.422 425.703 174.281 429.157 178.858 431.126 cv
179.205 430.763 li
179.946 431.577 li
180.426 431.873 180.648 432.468 180.464 433.03 cv
180.353 433.372 180.103 433.63 179.798 433.771 cv
179.728 433.845 li
179.58 433.848 li
179.478 433.874 179.371 433.888 179.263 433.888 cv
cp
f
176.64 434.351 mo
173.153 435.607 170.818 438.927 170.818 442.64 cv
170.818 447.478 174.733 451.417 179.561 451.458 cv
181.942 451.159 li
183.836 450.729 li
188.114 449.702 192.381 448.288 196.506 446.529 cv
196.728 446.425 li
218.843 436.901 235.477 418.308 242.464 395.339 cv
236.218 389.094 li
230.59 401.042 222.039 411.517 211.401 419.468 cv
211.058 419.718 li
203.1 425.601 194.249 429.917 184.739 432.55 cv
183.198 432.978 181.588 433.372 179.95 433.723 cv
179.848 433.83 li
179.346 433.845 li
176.64 434.351 li
cp
179.715 453.964 mo
179.637 453.964 li
173.393 453.964 168.313 448.884 168.313 442.64 cv
168.313 437.832 171.362 433.538 175.901 431.954 cv
176.083 431.905 li
179.063 431.35 li
180.776 430.991 182.46 430.583 184.069 430.136 cv
193.413 427.548 202.101 423.285 209.893 417.462 cv
210.232 417.212 li
220.86 409.181 229.31 398.543 234.684 386.424 cv
235.444 384.711 li
237.125 386.465 li
245.29 394.623 li
245.081 395.336 li
238.033 419.272 220.859 438.685 197.939 448.63 cv
197.939 448.632 li
197.701 448.743 li
193.383 450.598 188.909 452.087 184.405 453.169 cv
182.314 453.636 li
179.715 453.964 li
cp
f
206.531 417.074 mo
204.285 417.074 202.04 416.22 200.331 414.511 cv
199.841 414.021 199.841 413.229 200.331 412.739 cv
200.82 412.249 201.613 412.249 202.102 412.739 cv
204.544 415.181 208.517 415.181 210.959 412.739 cv
211.448 412.249 212.241 412.249 212.73 412.739 cv
213.22 413.229 213.22 414.021 212.73 414.511 cv
211.021 416.22 208.776 417.074 206.531 417.074 cv
cp
f
202.721 404.152 mo
202.721 405.074 201.972 405.821 201.051 405.821 cv
200.128 405.821 199.381 405.074 199.381 404.152 cv
199.381 403.229 200.128 402.48 201.051 402.48 cv
201.972 402.48 202.721 403.229 202.721 404.152 cv
cp
f
369.561 128.601 mo
376.706 135.745 li
380.529 124.777 li
369.561 128.601 li
cp
377.758 140.34 mo
364.966 127.549 li
384.602 120.705 li
377.758 140.34 li
cp
f
429.635 124.777 mo
433.457 135.745 li
440.602 128.601 li
429.635 124.777 li
cp
432.406 140.34 mo
425.563 120.705 li
445.197 127.549 li
432.406 140.34 li
cp
f
398.402 146.425 mo
397.71 146.425 397.149 145.864 397.149 145.172 cv
397.149 140.379 li
397.149 139.687 397.71 139.126 398.402 139.126 cv
399.094 139.126 399.655 139.687 399.655 140.379 cv
399.655 145.172 li
399.655 145.864 399.094 146.425 398.402 146.425 cv
cp
f
411.764 146.425 mo
411.072 146.425 410.51 145.864 410.51 145.172 cv
410.51 140.388 li
410.51 139.696 411.072 139.135 411.764 139.135 cv
412.455 139.135 413.016 139.696 413.016 140.388 cv
413.016 145.172 li
413.016 145.864 412.455 146.425 411.764 146.425 cv
cp
f
411.287 230.258 mo
398.878 230.258 li
398.187 230.258 397.625 229.697 397.625 229.005 cv
397.625 228.313 398.187 227.752 398.878 227.752 cv
411.287 227.752 li
411.98 227.752 412.541 228.313 412.541 229.005 cv
412.541 229.697 411.98 230.258 411.287 230.258 cv
cp
f
420.348 198.525 mo
389.818 198.525 li
389.126 198.525 388.565 197.964 388.565 197.272 cv
388.565 196.58 389.126 196.02 389.818 196.02 cv
420.348 196.02 li
421.039 196.02 421.6 196.58 421.6 197.272 cv
421.6 197.964 421.039 198.525 420.348 198.525 cv
cp
f
413.496 228.013 mo
409.252 234.145 li
408.426 235.34 408.219 236.819 408.684 238.2 cv
408.904 238.87 409.281 239.484 409.773 239.983 cv
410.502 240.721 li
407.391 245.225 li
407.057 245.707 406.93 246.288 407.035 246.862 cv
407.139 247.438 407.461 247.936 407.939 248.267 cv
408.426 248.603 409.012 248.728 409.59 248.624 cv
410.162 248.518 410.662 248.197 410.992 247.718 cv
416.613 239.592 li
416.639 239.542 416.658 239.504 416.68 239.467 cv
416.738 239.374 li
417.295 238.569 li
413.496 228.013 li
cp
409.184 251.166 mo
408.238 251.166 407.314 250.879 406.518 250.328 cv
405.486 249.617 404.793 248.545 404.57 247.311 cv
404.346 246.075 404.615 244.828 405.332 243.798 cv
407.307 240.938 li
406.875 240.346 406.537 239.687 406.307 238.993 cv
405.588 236.862 405.91 234.572 407.191 232.719 cv
414.205 222.584 li
418.115 233.446 li
418.137 233.374 418.16 233.302 418.184 233.23 cv
419.621 229.034 li
419.846 228.379 420.557 228.03 421.213 228.255 cv
421.867 228.479 422.217 229.191 421.992 229.846 cv
420.555 234.038 li
420.418 234.444 420.348 234.857 420.348 235.26 cv
420.348 235.815 420.469 236.349 420.709 236.846 cv
420.709 236.849 li
420.727 236.88 420.742 236.911 420.756 236.943 cv
421.025 237.502 li
420.793 237.836 li
420.756 237.948 420.703 238.057 420.631 238.158 cv
418.842 240.736 li
418.795 240.828 418.746 240.917 418.686 241.001 cv
413.053 249.142 li
412.342 250.17 411.273 250.862 410.041 251.087 cv
409.756 251.14 409.469 251.166 409.184 251.166 cv
cp
f
413.85 226.551 mo
413.342 226.551 412.865 226.239 412.678 225.735 cv
408.748 215.183 li
430.514 176.833 li
431.303 179.771 li
432.578 184.518 433.225 189.563 433.225 194.767 cv
433.225 204.817 430.777 214.333 426.334 221.562 cv
425.971 222.15 425.199 222.333 424.609 221.973 cv
424.021 221.61 423.836 220.838 424.199 220.25 cv
428.404 213.411 430.719 204.361 430.719 194.767 cv
430.719 190.892 430.346 187.113 429.607 183.491 cv
411.504 215.403 li
415.025 224.86 li
415.266 225.509 414.936 226.23 414.287 226.472 cv
414.145 226.525 413.996 226.551 413.85 226.551 cv
cp
f
418.338 241.45 mo
414.008 229.429 li
413.775 228.778 414.113 228.06 414.764 227.826 cv
415.414 227.593 416.133 227.93 416.367 228.581 cv
419.115 236.226 li
419.492 236.075 419.934 236.111 420.293 236.359 cv
420.861 236.752 421.004 237.533 420.609 238.102 cv
418.338 241.45 li
cp
f
440.127 164.935 mo
442.646 170.066 443.957 175.599 444.021 181.392 cv
444.047 199.336 li
460.574 174.49 li
464.012 169.318 462.6 162.309 457.424 158.867 cv
455.564 157.63 453.408 156.977 451.188 156.977 cv
447.4 156.977 443.891 158.857 441.801 162.007 cv
440.127 164.935 li
cp
441.348 207.917 mo
441.518 203.471 li
441.535 203.036 441.541 202.593 441.541 202.149 cv
441.516 181.406 li
441.453 175.792 440.135 170.428 437.596 165.476 cv
437.289 164.877 li
439.674 160.687 li
442.27 156.771 446.559 154.472 451.188 154.472 cv
453.904 154.472 456.541 155.27 458.813 156.781 cv
465.137 160.988 466.863 169.555 462.66 175.879 cv
441.348 207.917 li
cp
f
424.1 241.517 mo
423.43 241.517 422.748 241.408 422.08 241.18 cv
420.559 240.66 419.322 239.6 418.578 238.184 cv
418.352 237.958 li
418.34 237.688 li
418.014 236.925 417.842 236.091 417.842 235.26 cv
417.842 234.584 417.957 233.901 418.184 233.23 cv
420.891 225.326 li
421.186 224.455 421.684 223.646 422.328 222.991 cv
423.225 222.081 li
427.422 226.375 li
427.906 226.868 427.898 227.661 427.404 228.146 cv
426.912 228.631 426.119 228.624 425.633 228.129 cv
423.383 225.828 li
423.338 225.928 423.299 226.029 423.264 226.132 cv
420.555 234.038 li
420.418 234.444 420.348 234.857 420.348 235.26 cv
420.348 235.79 420.459 236.3 420.678 236.779 cv
420.732 236.896 li
421.172 237.804 421.938 238.483 422.891 238.81 cv
424.848 239.478 426.99 238.431 427.664 236.473 cv
429.5 231.113 li
429.725 230.458 430.436 230.11 431.092 230.334 cv
431.746 230.559 432.096 231.271 431.871 231.925 cv
430.033 237.286 li
429.141 239.881 426.701 241.517 424.1 241.517 cv
cp
f
400.98 251.166 mo
400.699 251.166 400.414 251.14 400.131 251.089 cv
398.897 250.864 397.825 250.172 397.113 249.141 cv
391.469 240.983 li
391.421 240.919 391.369 240.827 391.321 240.731 cv
389.534 238.157 li
389.138 237.59 389.276 236.809 389.843 236.413 cv
390.412 236.017 391.192 236.155 391.588 236.722 cv
393.553 239.593 li
399.173 247.717 li
399.505 248.198 400.004 248.52 400.578 248.624 cv
401.158 248.729 401.74 248.602 402.225 248.268 cv
402.705 247.936 403.027 247.437 403.131 246.861 cv
403.236 246.287 403.109 245.707 402.777 245.228 cv
399.663 240.721 li
400.393 239.982 li
400.885 239.484 401.262 238.871 401.48 238.208 cv
401.947 236.819 401.74 235.34 400.912 234.144 cv
395.284 226.01 li
394.891 225.441 395.033 224.661 395.603 224.267 cv
396.172 223.874 396.951 224.016 397.345 224.585 cv
402.973 232.718 li
404.254 234.572 404.576 236.861 403.857 239 cv
403.629 239.689 403.289 240.347 402.859 240.938 cv
404.836 243.8 li
405.549 244.827 405.82 246.075 405.596 247.309 cv
405.371 248.544 404.68 249.617 403.648 250.329 cv
402.852 250.879 401.928 251.166 400.98 251.166 cv
cp
f
391.829 241.448 mo
389.556 238.101 li
389.162 237.531 389.305 236.751 389.875 236.358 cv
390.233 236.111 390.675 236.076 391.051 236.226 cv
395.136 224.873 li
398.661 215.403 li
378.985 180.717 li
378.642 180.117 378.85 179.352 379.451 179.008 cv
380.051 178.664 380.815 178.873 381.159 179.474 cv
381.926 180.825 li
401.416 215.183 li
396.157 229.431 li
391.829 241.448 li
cp
f
367.397 204.771 mo
366.992 204.771 366.594 204.575 366.353 204.212 cv
347.506 175.88 li
343.303 169.555 345.029 160.988 351.354 156.781 cv
354.419 154.742 358.097 154.019 361.701 154.743 cv
365.31 155.468 368.418 157.556 370.452 160.622 cv
372.546 164.291 li
372.886 164.894 372.671 165.658 372.069 165.997 cv
371.466 166.335 370.702 166.122 370.363 165.519 cv
368.325 161.941 li
366.701 159.5 364.159 157.792 361.208 157.199 cv
358.256 156.606 355.25 157.198 352.741 158.867 cv
347.566 162.309 346.154 169.318 349.592 174.492 cv
368.439 202.825 li
368.822 203.401 368.666 204.179 368.09 204.562 cv
367.876 204.704 367.636 204.771 367.397 204.771 cv
cp
f
386.066 241.517 mo
383.463 241.517 381.024 239.881 380.132 237.288 cv
378.045 231.197 li
382.741 226.377 li
383.224 225.881 384.018 225.872 384.513 226.354 cv
385.008 226.837 385.018 227.63 384.535 228.126 cv
380.915 231.842 li
382.501 236.474 li
383.175 238.431 385.317 239.479 387.274 238.81 cv
388.229 238.481 388.996 237.801 389.433 236.896 cv
389.477 236.808 li
389.686 236.358 389.809 235.802 389.809 235.252 cv
389.809 234.831 389.742 234.422 389.61 234.038 cv
386.904 226.137 li
386.728 225.614 386.434 225.136 386.052 224.749 cv
385.692 224.383 li
385.675 223.845 li
385.675 223.152 386.236 222.592 386.928 222.592 cv
387.323 222.592 387.677 222.775 387.906 223.062 cv
388.522 223.711 388.993 224.491 389.276 225.331 cv
391.98 233.225 li
392.202 233.872 392.314 234.554 392.314 235.252 cv
392.314 236.166 392.109 237.089 391.722 237.919 cv
390.96 239.496 389.681 240.631 388.087 241.179 cv
387.418 241.408 386.736 241.517 386.066 241.517 cv
cp
f
405.08 94.1421 mo
397.869 94.1421 391.222 97.4268 386.846 103.153 cv
383.751 107.18 382.116 112.004 382.116 117.107 cv
382.116 126.51 387.746 134.865 396.457 138.393 cv
399.19 139.507 402.092 140.071 405.08 140.071 cv
406.473 140.071 407.838 139.949 409.137 139.708 cv
413.182 138.995 416.957 137.197 420.068 134.506 cv
425.139 130.143 428.045 123.802 428.045 117.107 cv
428.045 104.444 417.744 94.1421 405.08 94.1421 cv
cp
405.08 142.577 mo
401.766 142.577 398.547 141.95 395.514 140.713 cv
385.854 136.802 379.611 127.536 379.611 117.107 cv
379.611 111.447 381.425 106.095 384.856 101.629 cv
389.709 95.2798 397.082 91.6372 405.08 91.6372 cv
419.125 91.6372 430.551 103.063 430.551 117.107 cv
430.551 124.532 427.326 131.565 421.705 136.402 cv
418.256 139.388 414.063 141.384 409.584 142.173 cv
408.145 142.44 406.625 142.577 405.08 142.577 cv
cp
f
397.705 118.909 mo
397.705 119.832 396.957 120.579 396.035 120.579 cv
395.112 120.579 394.364 119.832 394.364 118.909 cv
394.364 117.986 395.112 117.239 396.035 117.239 cv
396.957 117.239 397.705 117.986 397.705 118.909 cv
cp
f
415.799 118.909 mo
415.799 119.832 415.049 120.579 414.127 120.579 cv
413.207 120.579 412.457 119.832 412.457 118.909 cv
412.457 117.986 413.207 117.239 414.127 117.239 cv
415.049 117.239 415.799 117.986 415.799 118.909 cv
cp
f
405.061 127.712 mo
403.961 127.712 402.926 127.288 402.145 126.514 cv
401.35 125.729 400.912 124.68 400.906 123.559 cv
400.902 122.867 401.461 122.304 402.152 122.301 cv
402.156 122.301 402.156 122.301 402.158 122.301 cv
402.85 122.301 403.408 122.858 403.412 123.548 cv
403.414 123.999 403.59 124.419 403.906 124.733 cv
404.215 125.039 404.625 125.207 405.063 125.207 cv
405.066 125.207 405.07 125.207 405.074 125.207 cv
405.525 125.205 405.951 125.026 406.27 124.704 cv
406.582 124.387 406.754 123.97 406.75 123.53 cv
406.746 122.838 407.305 122.274 407.996 122.27 cv
407.998 122.27 408 122.27 408.004 122.27 cv
408.691 122.27 409.252 122.826 409.256 123.515 cv
409.262 124.625 408.834 125.672 408.051 126.465 cv
407.262 127.264 406.209 127.707 405.088 127.712 cv
405.078 127.712 405.07 127.712 405.061 127.712 cv
cp
f
405.082 133.988 mo
402.836 133.988 400.59 133.133 398.881 131.424 cv
398.392 130.935 398.392 130.142 398.881 129.652 cv
399.372 129.163 400.164 129.163 400.652 129.652 cv
403.096 132.094 407.066 132.094 409.51 129.652 cv
409.998 129.163 410.791 129.163 411.281 129.652 cv
411.77 130.142 411.77 130.935 411.281 131.424 cv
409.572 133.133 407.326 133.988 405.082 133.988 cv
cp
f
430.637 233.264 mo
421.461 223.859 li
422.266 223.053 li
422.379 222.91 422.492 222.767 422.598 222.624 cv
423.162 221.863 423.699 221.065 424.197 220.251 cv
428.404 213.411 430.719 204.36 430.719 194.767 cv
430.719 189.783 430.102 184.956 428.883 180.42 cv
427.9 176.769 426.549 173.407 424.869 170.431 cv
424.529 169.829 424.74 169.064 425.344 168.724 cv
425.947 168.385 426.709 168.597 427.051 169.199 cv
428.834 172.358 430.266 175.915 431.303 179.77 cv
432.578 184.518 433.225 189.563 433.225 194.767 cv
433.225 204.817 430.777 214.333 426.334 221.562 cv
425.873 222.313 425.381 223.052 424.867 223.764 cv
430.719 229.758 li
437.291 223.258 441.209 213.756 441.518 203.481 cv
441.535 203.036 441.541 202.593 441.541 202.149 cv
441.516 181.406 li
441.453 175.792 440.135 170.428 437.596 165.476 cv
432.52 155.567 422.975 148.469 412.064 146.488 cv
411.902 146.458 411.742 146.435 411.584 146.412 cv
410.684 146.263 409.84 146.153 408.984 146.074 cv
401.182 146.074 li
400.324 146.153 399.481 146.263 398.608 146.408 cv
398.422 146.435 398.264 146.458 398.105 146.487 cv
387.19 148.469 377.646 155.566 372.569 165.476 cv
370.031 170.428 368.712 175.792 368.648 181.42 cv
368.623 202.149 li
368.623 202.594 368.632 203.038 368.647 203.474 cv
368.956 213.757 372.875 223.259 379.446 229.758 cv
385.298 223.764 li
384.786 223.056 384.293 222.315 383.831 221.559 cv
379.388 214.332 376.94 204.816 376.94 194.767 cv
376.94 189.567 377.587 184.521 378.862 179.771 cv
379.923 175.847 381.374 172.25 383.176 169.08 cv
383.518 168.478 384.282 168.268 384.883 168.609 cv
385.485 168.951 385.696 169.716 385.354 170.317 cv
383.656 173.304 382.286 176.704 381.281 180.422 cv
380.064 184.959 379.446 189.786 379.446 194.767 cv
379.446 204.359 381.762 213.409 385.966 220.25 cv
386.467 221.068 387.005 221.865 387.566 222.621 cv
387.675 222.769 387.786 222.91 387.896 223.05 cv
388.705 223.859 li
379.529 233.263 li
378.633 232.443 li
371.038 225.483 366.486 214.955 366.144 203.557 cv
366.128 203.098 366.118 202.624 366.118 202.149 cv
366.143 181.406 li
366.211 175.373 367.624 169.634 370.34 164.333 cv
375.771 153.734 385.981 146.142 397.652 144.023 cv
397.839 143.988 398.031 143.96 398.224 143.932 cv
399.151 143.778 400.072 143.659 401.012 143.574 cv
401.123 143.569 li
409.154 143.574 li
410.092 143.659 411.014 143.778 411.969 143.937 cv
412.135 143.96 412.326 143.988 412.518 144.024 cv
424.186 146.142 434.395 153.734 439.826 164.333 cv
442.543 169.633 443.953 175.372 444.021 181.392 cv
444.047 202.149 li
444.047 202.625 444.039 203.1 444.021 203.566 cv
443.682 214.954 439.129 225.482 431.533 232.443 cv
430.637 233.264 li
cp
f
400.941 94.5205 mo
427.672 121.252 li
427.92 119.891 428.045 118.504 428.045 117.107 cv
428.045 106.887 421.184 97.8037 411.359 95.0176 cv
407.969 94.0571 404.4 93.8848 400.941 94.5205 cv
cp
429.004 126.127 mo
396.067 93.1904 li
398.122 92.6084 li
402.678 91.3169 407.506 91.3213 412.043 92.6074 cv
422.939 95.6978 430.551 105.772 430.551 117.107 cv
430.551 119.475 430.227 121.819 429.586 124.074 cv
429.004 126.127 li
cp
f
398.106 95.229 mo
393.661 96.6465 389.683 99.4404 386.846 103.153 cv
383.751 107.18 382.116 112.004 382.116 117.107 cv
382.116 118.484 382.245 119.869 382.5 121.243 cv
403.311 100.433 li
398.106 95.229 li
cp
381.171 126.115 mo
380.589 124.062 li
379.94 121.772 379.611 119.432 379.611 117.107 cv
379.611 111.447 381.425 106.095 384.856 101.629 cv
388.167 97.2993 392.878 94.0947 398.121 92.6084 cv
398.829 92.4082 li
406.854 100.433 li
381.171 126.115 li
cp
f
665.063 240.99 mo
663.859 240.99 662.658 240.533 661.742 239.618 cv
660.855 238.742 660.365 237.56 660.365 236.293 cv
660.365 235.043 660.854 233.866 661.742 232.978 cv
667.938 226.774 li
668.428 226.284 669.221 226.284 669.709 226.772 cv
670.199 227.261 670.199 228.055 669.711 228.544 cv
663.514 234.749 li
663.1 235.164 662.871 235.712 662.871 236.293 cv
662.871 236.885 663.098 237.435 663.508 237.841 cv
664.367 238.699 665.758 238.7 666.611 237.846 cv
672.791 231.674 li
673.281 231.185 674.074 231.185 674.563 231.675 cv
675.051 232.165 675.051 232.958 674.561 233.447 cv
668.383 239.618 li
667.467 240.533 666.266 240.99 665.063 240.99 cv
cp
f
635.271 244.276 mo
634.061 244.276 633.074 245.258 633.074 246.464 cv
633.074 247.675 634.061 248.661 635.271 248.661 cv
645.184 248.661 li
647.717 248.661 649.777 246.6 649.777 244.067 cv
649.777 240.06 li
640.648 240.06 li
640.648 244.276 li
635.271 244.276 li
cp
645.184 251.166 mo
635.271 251.166 li
632.68 251.166 630.57 249.057 630.57 246.464 cv
630.57 243.876 632.68 241.771 635.271 241.771 cv
638.145 241.771 li
638.145 237.554 li
652.281 237.554 li
652.281 244.067 li
652.281 247.981 649.098 251.166 645.184 251.166 cv
cp
f
632.682 75.0498 mo
632.51 75.0498 632.334 75.0137 632.168 74.9385 cv
631.537 74.6543 631.256 73.9126 631.541 73.2817 cv
633.654 68.5967 li
634.045 67.7334 634.711 67.0469 635.531 66.6641 cv
636.404 66.2568 637.383 66.2402 638.219 66.6172 cv
639.906 67.3887 640.602 69.5098 639.77 71.3477 cv
638.877 73.333 li
638.594 73.9644 637.854 74.2466 637.221 73.9624 cv
636.59 73.6787 636.309 72.9375 636.592 72.3066 cv
637.486 70.3184 li
637.746 69.7417 637.607 69.0928 637.182 68.8979 cv
636.955 68.7959 636.713 68.8765 636.59 68.9346 cv
636.316 69.0625 636.078 69.3145 635.938 69.6274 cv
633.824 74.3115 li
633.615 74.7754 633.158 75.0498 632.682 75.0498 cv
cp
f
633.596 85.7075 mo
632.982 85.7075 632.447 85.2583 632.357 84.6343 cv
632.258 83.9497 632.732 83.3145 633.418 83.2153 cv
633.688 83.1763 634.078 82.9561 634.295 82.4639 cv
637.49 75.3721 li
637.703 74.8926 637.625 74.457 637.479 74.2114 cv
637.412 74.0967 637.316 74.0068 637.213 73.959 cv
636.584 73.6685 636.311 72.9238 636.602 72.2959 cv
636.893 71.668 637.637 71.3965 638.266 71.6855 cv
638.834 71.9492 639.309 72.3818 639.637 72.9375 cv
640.234 73.9502 640.287 75.2432 639.777 76.395 cv
636.584 83.4829 li
636.063 84.668 634.984 85.5195 633.775 85.6943 cv
633.715 85.7036 633.654 85.7075 633.596 85.7075 cv
cp
f
684.408 75.0498 mo
683.93 75.0498 683.475 74.7754 683.266 74.3115 cv
681.152 69.627 li
680.998 69.2817 680.74 69.0215 680.439 68.9063 cv
680.303 68.8545 680.102 68.8115 679.9 68.9014 cv
679.482 69.0928 679.344 69.7417 679.604 70.3154 cv
680.498 72.3164 li
680.781 72.9478 680.498 73.6885 679.867 73.9712 cv
679.234 74.2539 678.494 73.9712 678.211 73.3398 cv
677.318 71.3433 li
676.488 69.5098 677.184 67.3887 678.867 66.6196 cv
679.643 66.2715 680.516 66.2539 681.334 66.5664 cv
682.252 66.917 683.02 67.6592 683.439 68.6025 cv
685.549 73.2817 li
685.834 73.9126 685.553 74.6543 684.922 74.9385 cv
684.754 75.0137 684.58 75.0498 684.408 75.0498 cv
cp
f
683.469 85.7241 mo
683.398 85.7241 683.328 85.7188 683.258 85.7065 cv
682.072 85.5059 681.045 84.6777 680.512 83.4897 cv
677.322 76.4004 li
676.811 75.2568 676.861 73.9648 677.459 72.9424 cv
677.809 72.373 678.279 71.9502 678.832 71.6938 cv
679.459 71.4038 680.205 71.6758 680.496 72.3047 cv
680.785 72.9326 680.512 73.6768 679.885 73.9678 cv
679.777 74.0176 679.684 74.106 679.605 74.231 cv
679.434 74.5264 679.43 74.9746 679.607 75.375 cv
682.797 82.4629 li
682.982 82.874 683.326 83.1772 683.676 83.2363 cv
684.357 83.3521 684.818 83.998 684.701 84.6807 cv
684.6 85.292 684.068 85.7241 683.469 85.7241 cv
cp
f
651.865 136.485 mo
651.172 136.485 650.611 135.924 650.611 135.232 cv
650.611 128.719 li
650.611 128.027 651.172 127.466 651.865 127.466 cv
652.557 127.466 653.117 128.027 653.117 128.719 cv
653.117 135.232 li
653.117 135.924 652.557 136.485 651.865 136.485 cv
cp
f
665.225 136.485 mo
664.533 136.485 663.973 135.924 663.973 135.232 cv
663.973 128.728 li
663.973 128.035 664.533 127.475 665.225 127.475 cv
665.918 127.475 666.479 128.035 666.479 128.728 cv
666.479 135.232 li
666.479 135.924 665.918 136.485 665.225 136.485 cv
cp
f
656.209 240.06 mo
634.746 240.06 li
634.746 175.174 li
658.545 175.174 li
659.236 175.174 659.797 175.735 659.797 176.427 cv
659.797 177.119 659.236 177.679 658.545 177.679 cv
637.25 177.679 li
637.25 237.554 li
653.715 237.554 li
653.957 185.114 li
655.15 185.063 li
655.588 185.043 657.818 184.956 658.707 185.072 cv
668.215 186.293 675.664 195.885 675.664 206.907 cv
675.664 213.694 672.58 220.121 667.35 224.38 cv
678.084 235.237 li
678.582 234.788 li
684.381 228.986 li
684.402 228.963 688.072 225.162 688.854 224.275 cv
693.785 218.753 696.498 211.623 696.498 204.193 cv
696.498 193.013 690.369 182.794 680.502 177.523 cv
679.891 177.197 679.66 176.438 679.986 175.829 cv
680.313 175.219 681.07 174.987 681.682 175.313 cv
692.367 181.021 699.004 192.086 699.004 204.193 cv
699.004 212.239 696.064 219.962 690.727 225.938 cv
689.914 226.861 686.32 230.583 686.168 230.742 cv
680.307 236.603 li
677.986 238.702 li
663.5 224.101 li
664.727 223.231 li
670.006 219.479 673.158 213.377 673.158 206.907 cv
673.158 197.121 666.67 188.621 658.385 187.556 cv
658.047 187.512 657.236 187.513 656.451 187.528 cv
656.209 240.06 li
cp
f
654.4 82.8564 mo
648.789 83.877 643.789 86.9404 640.313 91.4912 cv
637.217 95.5166 635.584 100.341 635.584 105.444 cv
635.584 114.847 641.213 123.202 649.924 126.73 cv
650.742 127.06 651.486 127.315 652.199 127.51 cv
654.256 128.108 656.387 128.408 658.547 128.408 cv
659.939 128.408 661.303 128.287 662.605 128.046 cv
663.381 127.911 664.121 127.741 664.883 127.522 cv
668.09 126.613 671 125.039 673.537 122.844 cv
678.605 118.48 681.512 112.139 681.512 105.444 cv
681.512 94.3237 673.605 84.8413 662.695 82.8564 cv
662.574 82.8359 li
659.98 82.3628 657.119 82.3628 654.521 82.8359 cv
654.4 82.8564 li
cp
658.547 130.914 mo
656.148 130.914 653.785 130.58 651.518 129.921 cv
650.73 129.705 649.895 129.419 648.986 129.053 cv
639.322 125.14 633.078 115.873 633.078 105.444 cv
633.078 99.7837 634.893 94.4316 638.324 89.9673 cv
642.201 84.8906 647.795 81.4814 654.07 80.3701 cv
654.186 80.3511 li
657.016 79.8496 660.104 79.8506 662.928 80.3545 cv
663.025 80.3701 li
675.189 82.5254 684.018 93.0708 684.018 105.444 cv
684.018 112.87 680.793 119.903 675.174 124.74 cv
672.361 127.175 669.129 128.922 665.57 129.931 cv
664.727 130.174 663.898 130.364 663.047 130.512 cv
661.609 130.778 660.09 130.914 658.547 130.914 cv
cp
f
636.506 150.373 mo
636.33 150.373 636.152 150.335 635.982 150.256 cv
620.52 143.109 610.527 127.486 610.527 110.456 cv
610.527 95.0464 618.773 80.5859 632.045 72.7188 cv
632.191 72.6377 li
633.844 71.8315 li
635.057 87.0938 li
634.463 87.5039 li
634.27 87.6372 634.086 87.7783 633.9 87.9268 cv
633.752 88.0332 li
627.482 92.978 623.889 100.382 623.889 108.368 cv
623.889 121.154 633.418 132.171 646.055 133.993 cv
646.74 134.092 647.215 134.727 647.117 135.411 cv
647.018 136.096 646.377 136.569 645.699 136.473 cv
631.836 134.474 621.385 122.392 621.385 108.368 cv
621.385 99.562 625.367 91.4014 632.313 85.9785 cv
632.447 85.8721 li
631.654 75.9121 li
620.133 83.5054 613.033 96.5723 613.033 110.456 cv
613.033 126.514 622.453 141.244 637.033 147.983 cv
637.66 148.273 637.934 149.018 637.645 149.646 cv
637.434 150.103 636.98 150.373 636.506 150.373 cv
cp
f
680.582 150.373 mo
680.109 150.373 679.656 150.103 679.445 149.646 cv
679.154 149.018 679.428 148.273 680.057 147.983 cv
694.635 141.244 704.057 126.513 704.057 110.456 cv
704.057 96.5811 696.967 83.522 685.43 75.9131 cv
684.609 85.8511 li
684.672 85.8999 684.736 85.9497 684.799 85.999 cv
691.729 91.417 695.705 99.5713 695.705 108.368 cv
695.705 122.392 685.254 134.474 671.391 136.473 cv
670.713 136.569 670.072 136.096 669.973 135.411 cv
669.875 134.727 670.35 134.092 671.035 133.993 cv
683.67 132.171 693.201 121.154 693.201 108.368 cv
693.201 100.348 689.574 92.9126 683.252 87.9692 cv
683.027 87.7925 682.799 87.6196 682.57 87.4541 cv
682 87.041 li
683.25 71.834 li
685.025 72.708 li
698.316 80.5859 706.563 95.0464 706.563 110.456 cv
706.563 127.486 696.57 143.109 681.107 150.256 cv
680.938 150.335 680.758 150.373 680.582 150.373 cv
cp
f
637.256 175.172 mo
679.84 175.172 li
679.818 154.713 li
679.834 154.388 679.842 154.137 679.842 153.878 cv
679.842 152.354 679.68 150.842 679.361 149.387 cv
679.084 148.062 678.67 146.755 678.131 145.494 cv
676.568 141.866 674.047 138.757 670.824 136.483 cv
646.271 136.483 li
641.877 139.581 638.852 144.146 637.736 149.38 cv
637.416 150.848 637.254 152.359 637.254 153.878 cv
637.254 154.135 637.26 154.385 637.275 154.635 cv
637.279 156.941 li
637.256 175.172 li
cp
681.096 177.678 mo
634.746 177.678 li
634.773 154.713 li
634.758 154.49 634.748 154.188 634.748 153.878 cv
634.748 152.18 634.93 150.489 635.287 148.852 cv
636.564 142.866 640.076 137.658 645.176 134.195 cv
645.494 133.979 li
671.602 133.979 li
671.92 134.195 li
675.688 136.754 678.631 140.32 680.434 144.507 cv
681.037 145.922 681.5 147.386 681.813 148.861 cv
682.166 150.482 682.348 152.174 682.348 153.878 cv
682.348 154.187 682.338 154.487 682.32 154.787 cv
682.35 177.671 li
681.096 177.678 li
cp
f
636.189 100.225 mo
638.615 101.03 641.139 101.438 643.709 101.438 cv
654.535 101.438 663.854 94.314 666.727 83.9849 cv
665.414 83.4839 664.063 83.1055 662.695 82.8564 cv
662.574 82.8359 li
659.98 82.3628 657.119 82.3628 654.521 82.8359 cv
654.4 82.8564 li
648.789 83.877 643.789 86.9404 640.313 91.4912 cv
638.34 94.0562 636.928 97.0562 636.189 100.225 cv
cp
643.709 103.942 mo
640.477 103.942 637.309 103.359 634.295 102.208 cv
633.322 101.836 li
633.51 100.812 li
634.234 96.8716 635.898 93.1221 638.324 89.9673 cv
642.201 84.8906 647.795 81.4814 654.07 80.3701 cv
654.186 80.3511 li
657.016 79.8496 660.102 79.8506 662.928 80.3545 cv
663.025 80.3701 li
664.969 80.7148 666.881 81.293 668.709 82.0889 cv
669.664 82.5054 li
669.43 83.521 li
666.641 95.5449 656.064 103.942 643.709 103.942 cv
cp
f
682.279 114.804 mo
681.008 114.215 li
671.699 109.903 665.686 100.492 665.686 90.2388 cv
665.686 88.9375 665.785 87.6084 665.982 86.2876 cv
666.084 85.6035 666.721 85.1318 667.406 85.2344 cv
668.09 85.3364 668.563 85.9736 668.459 86.6582 cv
668.281 87.8569 668.189 89.0615 668.189 90.2388 cv
668.189 99.0322 673.076 107.142 680.758 111.289 cv
680.861 110.887 680.957 110.475 681.041 110.056 cv
681.107 109.755 681.16 109.462 681.207 109.168 cv
681.273 108.773 681.32 108.398 681.369 108.007 cv
681.389 107.803 681.412 107.576 681.428 107.341 cv
681.445 107.133 681.461 106.934 681.469 106.741 cv
681.486 106.531 681.492 106.384 681.492 106.231 cv
681.502 105.934 681.51 105.687 681.51 105.445 cv
681.51 105.112 681.502 104.779 681.486 104.444 cv
681.477 104.285 li
681.469 103.992 681.445 103.699 681.416 103.414 cv
681.404 103.228 li
681.375 102.924 681.344 102.635 681.299 102.337 cv
681.254 102.014 681.217 101.737 681.164 101.467 cv
681.09 101.04 681.01 100.641 680.922 100.25 cv
680.852 99.938 680.773 99.6343 680.688 99.3311 cv
680.6 99.0029 680.51 98.6904 680.402 98.3853 cv
680.322 98.1211 680.252 97.9111 680.168 97.7075 cv
680.125 97.5884 li
680.088 97.4648 680.045 97.3477 679.996 97.2295 cv
679.891 96.9473 679.799 96.7188 679.701 96.4907 cv
679.572 96.1855 679.441 95.8931 679.295 95.6006 cv
679.143 95.2632 678.998 94.9824 678.846 94.7012 cv
678.689 94.395 678.535 94.1216 678.369 93.8472 cv
678.207 93.5659 678.053 93.3115 677.891 93.0654 cv
677.777 92.894 li
677.654 92.6982 677.523 92.5088 677.393 92.3193 cv
677.225 92.0859 li
677.066 91.8545 676.895 91.6226 676.715 91.3979 cv
676.498 91.1128 676.295 90.8618 676.092 90.6191 cv
675.617 90.063 675.146 89.5566 674.66 89.0771 cv
674.545 88.9639 674.434 88.8594 674.322 88.7539 cv
674.131 88.5732 li
673.975 88.4297 673.793 88.2695 673.609 88.1084 cv
673.443 87.9624 673.326 87.8657 673.209 87.7686 cv
672.955 87.5557 672.76 87.3965 672.555 87.2451 cv
672.301 87.0449 672.07 86.8755 671.84 86.7144 cv
671.572 86.5322 li
671.369 86.3882 671.174 86.249 670.963 86.126 cv
670.887 86.0771 li
670.652 85.9155 670.408 85.7686 670.158 85.6284 cv
670.004 85.541 li
669.781 85.4106 669.559 85.2881 669.336 85.1733 cv
669.215 85.1021 li
668.893 84.9346 668.607 84.792 668.322 84.6577 cv
668.086 84.542 667.85 84.4365 667.617 84.3369 cv
667.094 84.1885 666.711 83.7119 666.711 83.1406 cv
666.711 81.248 li
668.445 81.9678 li
668.768 82.1016 669.092 82.2451 669.404 82.3979 cv
669.709 82.542 670.025 82.7007 670.344 82.8677 cv
670.398 82.8955 670.463 82.9297 670.533 82.9717 cv
670.758 83.0889 670.984 83.2139 671.211 83.3452 cv
671.293 83.3843 671.369 83.4277 671.441 83.4761 cv
671.725 83.6367 672.002 83.8052 672.27 83.9878 cv
672.514 84.1328 672.744 84.292 672.979 84.459 cv
673.063 84.5098 673.143 84.5649 673.221 84.6211 cv
673.547 84.8506 673.816 85.0493 674.078 85.2568 cv
674.293 85.4155 674.531 85.6069 674.768 85.8076 cv
674.939 85.9492 675.074 86.0601 675.201 86.1714 cv
675.268 86.2305 li
675.463 86.4014 675.656 86.5723 675.842 86.7432 cv
676.037 86.9277 li
676.168 87.0508 676.297 87.1729 676.424 87.2979 cv
676.957 87.8228 677.475 88.3818 678.004 89.0005 cv
678.238 89.2813 678.469 89.5654 678.691 89.8584 cv
678.881 90.0933 679.078 90.3608 679.264 90.6294 cv
679.332 90.7153 679.395 90.8022 679.455 90.9004 cv
679.594 91.0996 679.732 91.3018 679.865 91.5103 cv
679.92 91.5825 679.973 91.665 680.025 91.7573 cv
680.172 91.9766 680.354 92.2729 680.523 92.5703 cv
680.707 92.8706 680.889 93.1973 681.063 93.5332 cv
681.232 93.8462 681.404 94.1836 681.559 94.5293 cv
681.707 94.8223 681.859 95.1646 682.004 95.5073 cv
682.117 95.7681 682.227 96.0405 682.326 96.313 cv
682.383 96.4443 682.447 96.6196 682.506 96.8071 cv
682.613 97.0703 682.703 97.3408 682.785 97.6118 cv
682.895 97.9214 683.004 98.2939 683.104 98.6665 cv
683.197 98.998 683.285 99.3452 683.365 99.7017 cv
683.463 100.13 683.549 100.565 683.629 101.01 cv
683.686 101.306 683.73 101.628 683.773 101.952 cv
683.828 102.305 683.863 102.644 683.9 103 cv
683.906 103.124 li
683.908 103.141 683.91 103.167 683.912 103.198 cv
683.943 103.507 683.967 103.824 683.979 104.142 cv
683.99 104.238 683.99 104.317 683.99 104.368 cv
684.006 104.689 684.014 105.067 684.014 105.445 cv
684.014 105.712 684.006 105.987 683.998 106.254 cv
683.998 106.461 683.988 106.683 683.967 106.904 cv
683.963 107.064 683.945 107.299 683.928 107.524 cv
683.91 107.774 683.885 108.032 683.857 108.29 cv
683.803 108.739 683.75 109.149 683.68 109.568 cv
683.629 109.897 683.564 110.239 683.494 110.571 cv
683.289 111.573 683.029 112.555 682.723 113.475 cv
682.279 114.804 li
cp
f
651.178 109.023 mo
651.178 109.946 650.43 110.693 649.508 110.693 cv
648.586 110.693 647.838 109.946 647.838 109.023 cv
647.838 108.1 648.586 107.353 649.508 107.353 cv
650.43 107.353 651.178 108.1 651.178 109.023 cv
cp
f
669.271 109.023 mo
669.271 109.946 668.523 110.693 667.602 110.693 cv
666.68 110.693 665.932 109.946 665.932 109.023 cv
665.932 108.1 666.68 107.353 667.602 107.353 cv
668.523 107.353 669.271 108.1 669.271 109.023 cv
cp
f
658.535 117.827 mo
657.436 117.827 656.398 117.401 655.617 116.628 cv
654.824 115.843 654.385 114.794 654.379 113.673 cv
654.377 112.981 654.936 112.418 655.627 112.415 cv
655.629 112.415 655.631 112.415 655.633 112.415 cv
656.322 112.415 656.881 112.972 656.885 113.662 cv
656.887 114.113 657.063 114.533 657.379 114.847 cv
657.691 115.155 658.125 115.354 658.547 115.321 cv
659 115.319 659.424 115.14 659.742 114.818 cv
660.057 114.501 660.227 114.084 660.225 113.644 cv
660.221 112.952 660.777 112.388 661.469 112.384 cv
661.473 112.384 661.475 112.384 661.477 112.384 cv
662.166 112.384 662.725 112.939 662.73 113.629 cv
662.736 114.739 662.309 115.787 661.523 116.58 cv
660.734 117.378 659.682 117.821 658.561 117.827 cv
658.553 117.827 658.543 117.827 658.535 117.827 cv
cp
f
658.555 124.102 mo
656.309 124.102 654.064 123.247 652.355 121.538 cv
651.865 121.049 651.865 120.255 652.355 119.767 cv
652.844 119.277 653.637 119.277 654.127 119.767 cv
656.568 122.208 660.541 122.208 662.982 119.767 cv
663.473 119.277 664.266 119.277 664.754 119.767 cv
665.244 120.255 665.244 121.049 664.754 121.538 cv
663.045 123.247 660.801 124.102 658.555 124.102 cv
cp
f
222.378 251.153 mo
212.458 251.153 li
209.87 251.153 207.765 249.048 207.765 246.46 cv
207.765 243.868 209.87 241.759 212.458 241.759 cv
215.33 241.759 li
215.33 237.383 li
215.33 236.691 215.891 236.13 216.583 236.13 cv
217.275 236.13 217.835 236.691 217.835 237.383 cv
217.835 244.264 li
212.458 244.264 li
211.251 244.264 210.27 245.25 210.27 246.46 cv
210.27 247.667 211.251 248.648 212.458 248.648 cv
222.378 248.648 li
224.911 248.648 226.972 246.588 226.972 244.056 cv
226.972 237.383 li
226.972 236.691 227.532 236.13 228.224 236.13 cv
228.916 236.13 229.477 236.691 229.477 237.383 cv
229.477 244.056 li
229.477 247.969 226.292 251.153 222.378 251.153 cv
cp
f
141.773 219.189 mo
141.491 219.189 141.206 219.161 140.922 219.102 cv
135.807 218.059 li
135.129 217.921 134.692 217.259 134.83 216.581 cv
134.968 215.903 135.628 215.467 136.308 215.604 cv
141.426 216.648 li
141.863 216.739 142.307 216.654 142.678 216.409 cv
143.052 216.163 143.308 215.785 143.398 215.344 cv
143.578 214.446 142.993 213.56 142.093 213.374 cv
139.113 212.765 li
138.435 212.626 137.998 211.964 138.137 211.286 cv
138.275 210.608 138.936 210.172 139.615 210.31 cv
142.597 210.92 li
144.846 211.384 146.306 213.592 145.853 215.843 cv
145.627 216.945 144.988 217.887 144.056 218.502 cv
143.367 218.955 142.579 219.189 141.773 219.189 cv
cp
f
117.327 226.944 mo
116.524 226.944 115.748 226.908 115.016 226.835 cv
114.942 226.833 114.868 226.828 114.799 226.819 cv
114.456 226.786 114.104 226.744 113.77 226.694 cv
113.66 226.683 113.552 226.667 113.443 226.649 cv
113.075 226.593 112.728 226.531 112.381 226.46 cv
112.015 226.392 111.626 226.31 111.246 226.21 cv
111.002 226.153 110.726 226.081 110.449 225.997 cv
110.273 225.953 110.058 225.893 109.833 225.814 cv
109.729 225.788 109.563 225.738 109.396 225.68 cv
109.311 225.652 109.216 225.619 109.118 225.582 cv
109.037 225.559 108.961 225.532 108.885 225.504 cv
108.236 225.266 107.896 224.544 108.133 223.895 cv
108.371 223.245 109.083 222.907 109.732 223.146 cv
109.99 223.232 li
110.062 223.263 110.135 223.286 110.207 223.31 cv
110.343 223.357 110.46 223.391 110.585 223.426 cv
110.815 223.504 110.968 223.544 111.127 223.585 cv
111.4 223.667 111.625 223.727 111.85 223.779 cv
112.204 223.872 112.534 223.94 112.862 224.001 cv
113.189 224.068 113.494 224.123 113.806 224.17 cv
113.905 224.186 113.963 224.197 114.021 224.201 cv
114.107 224.211 li
114.419 224.259 114.748 224.297 115.068 224.329 cv
115.215 224.337 li
115.878 224.405 116.588 224.439 117.327 224.439 cv
118.718 224.439 120.082 224.317 121.382 224.076 cv
125.424 223.364 129.204 221.565 132.324 218.873 cv
133.346 217.99 134.275 217.036 135.086 216.041 cv
136.356 214.497 137.411 212.809 138.224 211.02 cv
139.49 208.25 140.183 205.298 140.284 202.244 cv
140.292 201.97 140.299 201.726 140.299 201.475 cv
140.299 198.433 139.714 195.487 138.561 192.707 cv
138.518 192.707 li
138.202 191.9 li
138.157 191.783 138.102 191.671 138.046 191.555 cv
138.008 191.475 li
136.342 188.025 133.804 185.022 130.672 182.797 cv
126.764 179.991 122.151 178.51 117.327 178.51 cv
115.519 178.51 113.72 178.726 111.979 179.151 cv
111.607 179.229 111.277 179.323 110.954 179.414 cv
110.219 179.62 109.471 179.879 108.727 180.186 cv
108.32 180.344 107.944 180.509 107.577 180.681 cv
106.904 181.018 li
106.709 181.112 106.528 181.205 106.356 181.305 cv
105.765 181.622 105.202 181.961 104.643 182.333 cv
104.432 182.478 li
104.326 182.55 104.22 182.622 104.117 182.696 cv
103.403 183.206 102.805 183.674 102.278 184.137 cv
101.979 184.395 101.697 184.653 101.423 184.92 cv
101.127 185.199 100.86 185.475 100.601 185.75 cv
100.368 185.998 100.139 186.25 99.9189 186.51 cv
99.8389 186.61 li
99.5527 186.936 99.3218 187.228 99.0986 187.521 cv
95.999 191.554 94.3623 196.378 94.3623 201.475 cv
94.3623 201.797 94.3701 202.12 94.3857 202.443 cv
94.3936 202.657 94.4014 202.847 94.416 203.037 cv
94.4443 203.359 li
94.4512 203.515 94.4639 203.685 94.4854 203.842 cv
94.542 204.446 94.626 205.029 94.7402 205.623 cv
94.8584 206.294 95.0054 206.935 95.1924 207.601 cv
95.3218 208.087 95.4717 208.551 95.6294 209.008 cv
95.7363 209.312 95.8428 209.613 95.9668 209.907 cv
96.0054 210.009 li
96.1211 210.307 96.2417 210.595 96.3789 210.884 cv
96.7905 211.797 97.2451 212.652 97.7393 213.448 cv
97.9243 213.754 98.1094 214.047 98.3096 214.333 cv
98.9385 215.264 99.6333 216.146 100.39 216.973 cv
100.425 217.008 100.498 217.086 100.555 217.162 cv
100.973 217.714 100.863 218.5 100.312 218.917 cv
99.7729 219.325 99.0117 219.23 98.5879 218.712 cv
98.5391 218.662 li
97.7017 217.745 96.9307 216.767 96.2466 215.754 cv
96.0254 215.44 95.8105 215.1 95.6035 214.758 cv
95.0586 213.881 94.5513 212.927 94.105 211.935 cv
93.9512 211.611 93.8057 211.266 93.6689 210.91 cv
93.6484 210.855 li
93.5088 210.522 93.3857 210.181 93.2627 209.83 cv
93.0557 209.229 92.9014 208.732 92.7759 208.262 cv
92.5703 207.531 92.4063 206.812 92.2769 206.077 cv
92.1504 205.422 92.0547 204.758 91.9956 204.122 cv
91.9736 203.96 91.9556 203.748 91.9448 203.542 cv
91.9277 203.426 91.918 203.309 91.9155 203.193 cv
91.8999 202.984 91.8911 202.775 91.8828 202.558 cv
91.8657 202.199 91.8569 201.837 91.8569 201.475 cv
91.8569 195.821 93.6729 190.47 97.1094 185.998 cv
97.3682 185.659 97.6387 185.317 97.9268 184.993 cv
97.9868 184.916 li
98.2544 184.599 98.5107 184.317 98.7744 184.034 cv
99.0698 183.721 99.3711 183.413 99.689 183.111 cv
99.9873 182.822 100.306 182.529 100.633 182.247 cv
101.216 181.735 101.88 181.215 102.653 180.664 cv
102.768 180.58 102.896 180.493 103.025 180.405 cv
103.232 180.263 li
103.879 179.832 104.513 179.451 105.137 179.118 cv
105.326 179.006 105.564 178.882 105.803 178.768 cv
106.487 178.425 li
106.934 178.216 107.36 178.03 107.795 177.861 cv
108.606 177.525 109.45 177.233 110.276 177.003 cv
110.649 176.897 111.037 176.79 111.426 176.708 cv
113.319 176.245 115.319 176.005 117.327 176.005 cv
122.679 176.005 127.797 177.649 132.128 180.758 cv
135.541 183.184 138.321 186.446 140.174 190.201 cv
140.178 190.201 li
140.264 190.387 li
140.265 190.388 140.266 190.39 140.267 190.392 cv
140.305 190.472 li
140.355 190.577 140.404 190.681 140.451 190.786 cv
140.52 190.934 li
142.036 194.256 142.805 197.803 142.805 201.475 cv
142.805 201.752 142.796 202.021 142.788 202.29 cv
142.676 205.713 141.907 208.988 140.503 212.058 cv
139.601 214.044 138.43 215.919 137.024 217.627 cv
136.126 218.731 135.095 219.79 133.962 220.769 cv
130.499 223.757 126.303 225.753 121.827 226.542 cv
120.389 226.809 118.87 226.944 117.327 226.944 cv
cp
f
138.683 192.711 mo
137.991 192.711 137.43 192.15 137.43 191.458 cv
137.43 190.754 138.027 190.205 138.72 190.206 cv
138.919 190.206 139.118 190.206 139.325 190.198 cv
147.139 190.129 155.455 188.374 163.412 185.121 cv
171.824 181.687 179.306 176.804 185.054 170.999 cv
185.094 170.952 185.132 170.912 185.17 170.873 cv
194.612 161.273 198.144 150.375 194.609 141.727 cv
193.371 138.703 191.341 136.079 188.569 133.917 cv
182.24 137.438 li
115.479 178.33 li
114.889 178.691 114.118 178.506 113.756 177.916 cv
113.395 177.326 113.581 176.555 114.17 176.193 cv
180.977 135.275 li
188.76 130.944 li
189.406 131.414 li
192.887 133.939 195.418 137.09 196.928 140.779 cv
200.854 150.384 197.123 162.294 186.949 172.637 cv
186.873 172.722 li
180.884 178.782 173.1 183.872 164.36 187.44 cv
156.111 190.812 147.476 192.632 139.388 192.703 cv
139.162 192.71 138.923 192.711 138.683 192.711 cv
cp
f
234.764 238.636 mo
211.689 238.636 li
184.816 172.309 li
184.557 171.667 184.866 170.937 185.507 170.677 cv
186.148 170.416 186.879 170.727 187.138 171.367 cv
213.377 236.13 li
231.689 236.13 li
215.168 155.991 li
215.205 155.764 li
215.372 154.73 215.456 153.674 215.456 152.623 cv
215.456 141.572 206.466 132.581 195.414 132.581 cv
193.261 132.581 191.158 132.918 189.162 133.581 cv
189.012 133.645 188.848 133.68 188.675 133.68 cv
187.983 133.68 187.422 133.123 187.422 132.431 cv
187.422 131.532 li
188.274 131.236 li
190.555 130.466 192.958 130.076 195.414 130.076 cv
207.846 130.076 217.961 140.191 217.961 152.623 cv
217.961 153.729 217.878 154.841 217.714 155.933 cv
234.764 238.636 li
cp
f
130.704 211.563 mo
130.704 212.486 129.956 213.233 129.034 213.233 cv
128.112 213.233 127.364 212.486 127.364 211.563 cv
127.364 210.64 128.112 209.893 129.034 209.893 cv
129.956 209.893 130.704 210.64 130.704 211.563 cv
cp
f
141.535 203.537 mo
141.267 203.537 140.996 203.452 140.768 203.274 cv
139.666 202.419 138.346 201.967 136.951 201.967 cv
136.258 201.967 135.698 201.407 135.698 200.715 cv
135.698 200.023 136.258 199.462 136.951 199.462 cv
138.879 199.462 140.78 200.113 142.303 201.295 cv
142.85 201.719 142.949 202.506 142.524 203.052 cv
142.277 203.371 141.908 203.537 141.535 203.537 cv
cp
f
99.5566 219.17 mo
99.1777 219.17 98.8032 218.999 98.5571 218.673 cv
97.7017 217.745 96.9307 216.767 96.2466 215.754 cv
96.0234 215.436 95.8047 215.1 95.5957 214.745 cv
95.0586 213.881 94.5513 212.927 94.105 211.935 cv
93.9565 211.603 93.8174 211.274 93.6787 210.935 cv
93.6494 210.856 li
93.5146 210.509 93.3867 210.174 93.2661 209.839 cv
93.0557 209.229 92.9014 208.732 92.7759 208.262 cv
92.5786 207.566 92.4082 206.825 92.2769 206.077 cv
92.1504 205.422 92.0547 204.758 91.9956 204.122 cv
91.9736 203.959 91.9556 203.753 91.9448 203.542 cv
91.9277 203.425 91.918 203.309 91.9155 203.193 cv
91.9009 202.998 91.8926 202.797 91.8848 202.602 cv
91.8657 202.199 91.8569 201.837 91.8569 201.475 cv
91.8569 195.821 93.6729 190.47 97.1094 185.998 cv
97.3682 185.659 97.6387 185.317 97.9268 184.993 cv
97.9868 184.916 li
98.2544 184.599 98.5107 184.317 98.7744 184.034 cv
99.0698 183.721 99.3711 183.413 99.689 183.111 cv
99.9873 182.822 100.306 182.529 100.633 182.247 cv
101.216 181.735 101.88 181.215 102.653 180.664 cv
102.768 180.58 102.896 180.493 103.025 180.405 cv
103.232 180.263 li
103.887 179.835 104.514 179.459 105.125 179.124 cv
105.338 179.009 105.553 178.897 105.768 178.785 cv
106.487 178.425 li
106.94 178.222 107.354 178.041 107.775 177.869 cv
108.593 177.54 109.428 177.25 110.261 177.007 cv
110.64 176.899 111.02 176.802 111.398 176.714 cv
112.511 176.446 113.685 176.251 114.877 176.136 cv
115.545 176.072 li
115.969 176.594 li
119.594 181.059 122.15 186.13 123.567 191.67 cv
123.739 192.34 123.334 193.022 122.664 193.193 cv
121.995 193.364 121.311 192.96 121.14 192.29 cv
119.869 187.323 117.619 182.755 114.448 178.704 cv
113.603 178.81 112.773 178.96 111.975 179.152 cv
111.625 179.233 111.285 179.32 110.954 179.414 cv
110.209 179.632 109.453 179.894 108.716 180.19 cv
108.327 180.35 107.938 180.52 107.558 180.69 cv
106.904 181.018 li
106.72 181.113 106.517 181.219 106.323 181.324 cv
105.774 181.625 105.203 181.968 104.633 182.34 cv
104.432 182.478 li
104.326 182.55 104.22 182.622 104.117 182.696 cv
103.403 183.206 102.805 183.674 102.278 184.137 cv
101.979 184.395 101.697 184.653 101.423 184.92 cv
101.127 185.199 100.86 185.475 100.601 185.75 cv
100.368 185.998 100.139 186.25 99.9189 186.51 cv
99.8389 186.61 li
99.5527 186.936 99.3218 187.228 99.0986 187.521 cv
95.999 191.554 94.3623 196.378 94.3623 201.475 cv
94.3623 201.797 94.3701 202.12 94.3857 202.443 cv
94.3945 202.677 94.4019 202.86 94.416 203.037 cv
94.4443 203.361 li
94.4512 203.524 94.4648 203.686 94.4854 203.842 cv
94.542 204.446 94.626 205.029 94.7402 205.623 cv
94.8613 206.306 95.0112 206.963 95.1904 207.597 cv
95.3218 208.087 95.4717 208.551 95.6294 209.008 cv
95.7388 209.311 95.8604 209.627 95.9814 209.943 cv
96.0039 210.002 li
96.1299 210.31 96.2563 210.609 96.3901 210.909 cv
96.7905 211.797 97.2451 212.652 97.7393 213.448 cv
97.9292 213.771 98.1123 214.052 98.3096 214.333 cv
98.9385 215.264 99.6333 216.146 100.39 216.973 cv
100.425 217.008 100.498 217.086 100.555 217.162 cv
100.973 217.714 100.863 218.5 100.312 218.917 cv
100.085 219.088 99.8203 219.17 99.5566 219.17 cv
cp
f
115.088 226.84 mo
114.396 226.84 113.835 226.284 113.835 225.592 cv
113.835 225.143 li
114.112 224.799 li
117.767 220.248 120.326 214.855 121.512 209.201 cv
121.653 208.525 122.316 208.091 122.995 208.232 cv
123.672 208.375 124.106 209.039 123.964 209.716 cv
122.701 215.737 119.981 221.48 116.096 226.329 cv
115.868 226.639 115.501 226.84 115.088 226.84 cv
cp
f
72.1362 246.99 mo
71.7979 246.99 71.4756 247.102 71.2524 247.295 cv
71.1514 247.382 70.9839 247.566 70.9839 247.826 cv
70.9839 248.278 71.5117 248.661 72.1362 248.661 cv
82.7344 248.661 li
84.6924 248.661 87.4434 247.422 88.7407 245.957 cv
145.167 182.249 li
145.565 181.824 li
147.415 179.974 147.404 177 145.57 175.167 cv
144.677 174.274 143.492 173.782 142.233 173.782 cv
140.987 173.782 139.819 174.265 138.941 175.143 cv
138.79 175.315 li
75.3057 246.99 li
72.1362 246.99 li
cp
82.7344 251.166 mo
72.1362 251.166 li
70.1196 251.166 68.479 249.667 68.479 247.826 cv
68.479 246.907 68.8926 246.023 69.6143 245.4 cv
70.2949 244.81 71.1914 244.485 72.1362 244.485 cv
74.1777 244.485 li
137.124 173.42 li
138.521 172.021 140.319 171.277 142.233 171.277 cv
144.161 171.277 145.974 172.029 147.341 173.395 cv
150.152 176.206 150.163 180.769 147.365 183.565 cv
147.019 183.936 li
90.6162 247.618 li
88.854 249.607 85.3926 251.166 82.7344 251.166 cv
cp
f
398.277 629.885 mo
397.586 629.885 397.025 629.324 397.025 628.632 cv
397.025 624.331 li
397.025 623.64 397.586 623.079 398.277 623.079 cv
398.969 623.079 399.53 623.64 399.53 624.331 cv
399.53 628.632 li
399.53 629.324 398.969 629.885 398.277 629.885 cv
cp
f
411.639 629.885 mo
410.947 629.885 410.387 629.324 410.387 628.632 cv
410.387 624.339 li
410.387 623.647 410.947 623.087 411.639 623.087 cv
412.33 623.087 412.891 623.647 412.891 624.339 cv
412.891 628.632 li
412.891 629.324 412.33 629.885 411.639 629.885 cv
cp
f
400.814 578.471 mo
395.202 579.491 390.202 582.556 386.725 587.105 cv
383.63 591.132 381.996 595.956 381.996 601.059 cv
381.996 610.462 387.625 618.817 396.337 622.345 cv
397.155 622.675 397.899 622.93 398.612 623.125 cv
400.67 623.723 402.799 624.022 404.961 624.022 cv
406.352 624.022 407.717 623.901 409.018 623.661 cv
409.793 623.526 410.535 623.355 411.297 623.138 cv
414.504 622.228 417.412 620.653 419.949 618.458 cv
425.02 614.095 427.926 607.754 427.926 601.059 cv
427.926 589.938 420.02 580.456 409.107 578.471 cv
408.986 578.45 li
406.393 577.978 403.531 577.978 400.936 578.45 cv
400.814 578.471 li
cp
404.961 626.528 mo
402.563 626.528 400.197 626.194 397.931 625.536 cv
397.143 625.319 396.308 625.034 395.399 624.667 cv
385.734 620.754 379.491 611.487 379.491 601.059 cv
379.491 595.397 381.305 590.046 384.736 585.582 cv
388.615 580.505 394.208 577.097 400.482 575.985 cv
400.598 575.966 li
403.428 575.464 406.516 575.466 409.342 575.969 cv
409.438 575.985 li
421.602 578.14 430.43 588.686 430.43 601.059 cv
430.43 608.483 427.207 615.518 421.586 620.354 cv
418.773 622.789 415.541 624.536 411.982 625.546 cv
411.139 625.788 410.313 625.979 409.459 626.126 cv
408.021 626.393 406.504 626.528 404.961 626.528 cv
cp
f
397.591 604.638 mo
397.591 605.562 396.843 606.308 395.921 606.308 cv
394.999 606.308 394.251 605.562 394.251 604.638 cv
394.251 603.715 394.999 602.968 395.921 602.968 cv
396.843 602.968 397.591 603.715 397.591 604.638 cv
cp
f
415.684 604.638 mo
415.684 605.562 414.936 606.308 414.014 606.308 cv
413.092 606.308 412.344 605.562 412.344 604.638 cv
412.344 603.715 413.092 602.968 414.014 602.968 cv
414.936 602.968 415.684 603.715 415.684 604.638 cv
cp
f
404.947 613.44 mo
403.848 613.44 402.813 613.017 402.031 612.242 cv
401.236 611.458 400.799 610.409 400.793 609.288 cv
400.789 608.596 401.348 608.032 402.039 608.029 cv
402.041 608.029 402.043 608.029 402.045 608.029 cv
402.734 608.029 403.295 608.587 403.297 609.276 cv
403.301 609.728 403.475 610.147 403.791 610.462 cv
404.104 610.771 404.547 610.922 404.959 610.937 cv
405.412 610.934 405.838 610.755 406.156 610.433 cv
406.469 610.116 406.641 609.698 406.637 609.259 cv
406.633 608.567 407.191 608.003 407.883 607.999 cv
407.885 607.999 407.887 607.999 407.891 607.999 cv
408.578 607.999 409.139 608.554 409.143 609.243 cv
409.148 610.353 408.721 611.401 407.938 612.194 cv
407.148 612.993 406.096 613.436 404.973 613.44 cv
404.965 613.44 404.957 613.44 404.947 613.44 cv
cp
f
404.967 619.716 mo
402.723 619.716 400.477 618.862 398.768 617.152 cv
398.278 616.663 398.278 615.87 398.768 615.382 cv
399.256 614.892 400.049 614.892 400.539 615.382 cv
402.98 617.823 406.953 617.823 409.396 615.382 cv
409.885 614.892 410.678 614.892 411.168 615.382 cv
411.656 615.87 411.656 616.663 411.168 617.152 cv
409.457 618.862 407.213 619.716 404.967 619.716 cv
cp
f
429.105 602.347 mo
428.545 602.347 428.131 601.844 427.088 600.58 cv
424.443 597.376 417.418 588.864 411.697 586.319 cv
411.064 586.038 410.781 585.298 411.063 584.666 cv
411.344 584.034 412.084 583.751 412.715 584.03 cv
418.098 586.425 424.25 593.299 427.613 597.294 cv
426.354 589.696 421.336 583.138 414.119 580.002 cv
413.73 579.822 413.33 579.659 412.904 579.505 cv
412.18 579.26 li
411.992 579.194 411.83 579.138 411.67 579.096 cv
411.074 578.912 410.492 578.759 409.846 578.614 cv
409.662 578.577 li
409.48 578.54 409.295 578.502 409.111 578.47 cv
408.984 578.449 li
406.385 577.978 403.529 577.978 400.932 578.448 cv
400.814 578.47 li
400.555 578.517 400.293 578.564 400.043 578.626 cv
399.809 578.677 399.614 578.719 399.418 578.776 cv
398.928 578.891 398.516 579.008 398.111 579.132 cv
397.873 579.209 397.637 579.284 397.407 579.369 cv
396.549 579.663 395.713 580.011 394.896 580.411 cv
394.676 580.525 li
394.486 580.622 394.295 580.72 394.109 580.821 cv
393.846 580.965 393.583 581.108 393.328 581.259 cv
392.857 581.539 392.366 581.854 391.831 582.224 cv
390.871 582.895 389.946 583.652 389.088 584.47 cv
388.878 584.671 388.672 584.878 388.466 585.092 cv
387.985 585.59 387.192 585.604 386.694 585.124 cv
386.197 584.645 386.182 583.852 386.662 583.353 cv
386.889 583.117 387.118 582.89 387.354 582.661 cv
388.308 581.751 389.333 580.913 390.403 580.165 cv
390.993 579.759 391.529 579.414 392.051 579.104 cv
392.333 578.937 392.622 578.778 392.911 578.622 cv
393.116 578.51 393.326 578.402 393.533 578.296 cv
393.769 578.175 li
394.704 577.716 395.638 577.327 396.568 577.009 cv
396.803 576.922 397.073 576.835 397.342 576.748 cv
397.839 576.595 398.313 576.461 398.786 576.354 cv
398.963 576.299 399.217 576.241 399.483 576.184 cv
399.75 576.118 400.064 576.06 400.373 576.003 cv
400.596 575.964 li
403.436 575.462 406.531 575.466 409.373 575.974 cv
409.422 575.98 li
409.668 576.021 409.92 576.073 410.164 576.123 cv
410.365 576.163 li
411.105 576.329 411.75 576.499 412.359 576.688 cv
412.531 576.732 412.756 576.808 412.979 576.886 cv
413.721 577.136 li
414.252 577.328 414.717 577.519 415.143 577.716 cv
424.42 581.747 430.428 590.913 430.428 601.058 cv
430.428 601.938 li
429.596 602.245 li
429.412 602.312 429.254 602.347 429.105 602.347 cv
cp
f
382.603 595.839 mo
385.028 596.645 387.553 597.052 390.123 597.052 cv
400.947 597.052 410.266 589.929 413.139 579.6 cv
411.826 579.099 410.477 578.72 409.107 578.471 cv
408.986 578.45 li
406.393 577.978 403.531 577.978 400.936 578.45 cv
400.814 578.471 li
395.202 579.491 390.202 582.556 386.725 587.105 cv
384.753 589.67 383.341 592.67 382.603 595.839 cv
cp
390.123 599.558 mo
386.89 599.558 383.723 598.974 380.708 597.823 cv
379.734 597.45 li
379.923 596.426 li
380.647 592.485 382.313 588.735 384.737 585.582 cv
388.615 580.505 394.208 577.097 400.482 575.985 cv
400.598 575.966 li
403.428 575.464 406.516 575.466 409.34 575.969 cv
409.438 575.985 li
411.381 576.329 413.291 576.907 415.121 577.704 cv
416.078 578.12 li
415.842 579.136 li
413.053 591.159 402.477 599.558 390.123 599.558 cv
cp
f
446.967 662.481 mo
446.834 662.481 446.697 662.459 446.564 662.415 cv
445.914 662.194 445.564 661.495 445.773 660.845 cv
445.775 660.839 445.777 660.831 445.779 660.823 cv
446.088 659.534 446.27 658.2 446.314 656.858 cv
446.324 656.735 446.322 656.675 446.322 656.61 cv
446.322 656.192 li
446.322 641.688 430.963 629.888 412.084 629.888 cv
397.889 629.888 li
379.01 629.888 363.65 641.688 363.65 656.192 cv
363.65 656.61 li
363.65 656.673 363.65 656.731 363.655 656.796 cv
363.706 658.228 363.883 659.569 364.186 660.848 cv
364.345 661.521 363.928 662.195 363.254 662.354 cv
362.578 662.513 361.906 662.097 361.747 661.424 cv
361.407 659.985 361.208 658.478 361.155 656.945 cv
361.147 656.872 361.146 656.747 361.146 656.61 cv
361.146 656.192 li
361.146 640.306 377.628 627.382 397.889 627.382 cv
412.084 627.382 li
432.346 627.382 448.828 640.306 448.828 656.192 cv
448.828 656.61 li
448.828 656.745 448.826 656.868 448.816 657.003 cv
448.768 658.465 448.561 659.977 448.209 661.438 cv
448.152 661.63 li
447.977 662.151 447.488 662.481 446.967 662.481 cv
cp
f
397.219 654.835 mo
396.71 654.835 396.231 654.522 396.045 654.017 cv
395.882 653.577 395.799 653.11 395.799 652.63 cv
395.816 644.853 li
395.816 643.82 396.217 642.829 396.915 642.136 cv
397.536 641.519 398.324 641.173 399.182 641.188 cv
400.018 641.188 400.824 641.532 401.443 642.155 cv
402.135 642.852 402.529 643.841 402.521 644.871 cv
402.514 647.048 li
402.51 647.738 401.951 648.296 401.26 648.296 cv
401.26 648.296 401.258 648.296 401.256 648.296 cv
400.564 648.293 400.006 647.729 400.008 647.038 cv
400.018 644.858 li
400.02 644.488 399.891 644.147 399.667 643.921 cv
399.563 643.817 399.394 643.694 399.172 643.694 cv
399.172 643.694 399.17 643.694 399.168 643.694 cv
398.946 643.694 398.782 643.813 398.68 643.913 cv
398.453 644.14 398.322 644.483 398.322 644.854 cv
398.305 652.632 li
398.305 652.81 398.335 652.989 398.395 653.146 cv
398.633 653.796 398.303 654.516 397.655 654.757 cv
397.511 654.81 397.364 654.835 397.219 654.835 cv
cp
f
403.291 658.853 mo
402.6 658.853 402.039 658.304 402.039 657.612 cv
402.051 657.409 li
402.061 657.352 402.064 657.298 402.064 657.235 cv
402.08 649.468 li
402.08 649.026 401.896 648.628 401.59 648.406 cv
401.486 648.336 401.369 648.295 401.234 648.292 cv
400.543 648.276 399.995 647.704 400.01 647.013 cv
400.025 646.321 400.576 645.759 401.289 645.788 cv
401.912 645.801 402.498 645.993 403.029 646.356 cv
404.014 647.066 404.586 648.224 404.586 649.47 cv
404.568 657.235 li
404.568 657.416 404.557 657.574 404.535 657.741 cv
404.459 658.362 403.932 658.853 403.291 658.853 cv
cp
f
413.654 654.835 mo
412.76 654.835 li
412.068 654.835 411.504 654.273 411.504 653.581 cv
411.504 653.409 411.539 653.243 411.602 653.095 cv
411.648 652.938 411.67 652.792 411.666 652.663 cv
411.648 644.857 li
411.648 644.483 411.52 644.14 411.291 643.913 cv
411.189 643.812 410.994 643.721 410.807 643.694 cv
410.34 643.694 409.953 644.229 409.953 644.863 cv
409.963 647.038 li
409.967 647.729 409.408 648.293 408.715 648.296 cv
408.713 648.296 408.711 648.296 408.711 648.296 cv
408.021 648.296 407.461 647.738 407.457 647.048 cv
407.449 644.868 li
407.449 642.837 408.951 641.188 410.797 641.188 cv
410.805 641.188 410.813 641.188 410.82 641.188 cv
411.645 641.188 412.439 641.524 413.057 642.136 cv
413.754 642.829 414.154 643.82 414.154 644.854 cv
414.17 652.627 li
414.184 653.048 414.107 653.516 413.945 653.987 cv
413.654 654.835 li
cp
f
406.674 658.794 mo
405.986 658.794 405.428 658.261 405.422 657.574 cv
405.412 657.463 405.404 657.345 405.404 657.235 cv
405.389 649.473 li
405.389 648.218 405.965 647.06 406.932 646.37 cv
407.465 645.996 408.053 645.802 408.684 645.788 cv
409.398 645.759 409.947 646.321 409.963 647.013 cv
409.979 647.704 409.43 648.276 408.738 648.292 cv
408.607 648.295 408.496 648.333 408.379 648.415 cv
408.078 648.631 407.893 649.026 407.893 649.47 cv
407.91 657.233 li
407.91 657.292 407.916 657.354 407.922 657.409 cv
407.926 657.521 li
407.926 658.212 407.365 658.794 406.674 658.794 cv
cp
f
389.455 677.228 mo
388.933 677.228 388.446 676.899 388.269 676.378 cv
388.045 675.724 388.396 675.012 389.051 674.789 cv
396.555 672.237 401.654 665.474 402.041 657.56 cv
402.057 657.226 402.064 656.913 402.064 656.61 cv
402.068 654.839 li
396.214 654.839 li
396.046 660.909 391.056 665.796 384.945 665.796 cv
378.729 665.796 373.671 660.738 373.671 654.522 cv
373.671 651.085 375.212 647.878 377.897 645.721 cv
378.438 645.287 379.226 645.374 379.659 645.913 cv
380.092 646.452 380.005 647.241 379.466 647.674 cv
377.376 649.353 376.177 651.849 376.177 654.522 cv
376.177 659.356 380.111 663.29 384.945 663.29 cv
389.78 663.29 393.713 659.356 393.713 654.522 cv
393.713 654.239 393.698 653.963 393.676 653.687 cv
393.567 652.334 li
404.582 652.334 li
404.568 656.613 li
404.568 656.958 404.561 657.313 404.543 657.653 cv
404.105 666.629 398.342 674.275 389.857 677.161 cv
389.724 677.206 389.588 677.228 389.455 677.228 cv
cp
f
362.89 662.364 mo
362.315 662.364 361.797 661.966 361.667 661.381 cv
361.339 659.89 361.163 658.388 361.146 656.917 cv
361.146 656.468 li
361.146 655.776 361.707 655.216 362.398 655.216 cv
363.09 655.216 363.65 655.776 363.65 656.468 cv
363.65 656.901 li
363.666 658.187 363.822 659.517 364.114 660.841 cv
364.263 661.517 363.836 662.185 363.161 662.334 cv
363.07 662.354 362.979 662.364 362.89 662.364 cv
cp
f
447.059 662.447 mo
446.965 662.447 446.871 662.437 446.775 662.415 cv
446.102 662.259 445.682 661.587 445.838 660.913 cv
446.139 659.604 446.299 658.251 446.314 656.888 cv
446.318 656.8 li
446.324 656.735 446.322 656.675 446.322 656.61 cv
446.322 656.468 li
446.322 655.776 446.883 655.216 447.574 655.216 cv
448.268 655.216 448.828 655.776 448.828 656.468 cv
448.828 656.61 li
448.828 656.729 448.826 656.839 448.82 656.955 cv
448.799 658.484 448.617 660.005 448.277 661.476 cv
448.145 662.056 447.629 662.447 447.059 662.447 cv
cp
420.646 677.271 mo
420.563 677.271 420.477 677.261 420.393 677.243 cv
420.285 677.222 420.154 677.182 420.047 677.139 cv
411.738 674.32 405.836 666.471 405.422 657.628 cv
405.422 657.528 li
405.414 657.429 405.412 656.317 405.412 656.317 cv
405.4 652.334 li
416.26 652.313 li
416.26 654.522 li
416.26 659.356 420.193 663.29 425.027 663.29 cv
427.65 663.29 430.117 662.126 431.797 660.095 cv
431.949 659.915 li
433.146 658.395 433.797 656.518 433.797 654.522 cv
433.797 651.841 432.596 649.343 430.502 647.667 cv
429.961 647.235 429.873 646.446 430.305 645.907 cv
430.738 645.367 431.525 645.279 432.066 645.711 cv
434.758 647.865 436.301 651.077 436.301 654.522 cv
436.301 657.087 435.467 659.5 433.887 661.503 cv
433.715 661.705 li
431.57 664.3 428.4 665.796 425.027 665.796 cv
418.918 665.796 413.928 660.909 413.76 654.839 cv
407.914 654.839 li
407.918 656.313 li
407.918 656.319 407.918 657.28 407.924 657.458 cv
407.926 657.562 li
408.291 665.333 413.51 672.276 420.914 674.788 cv
421.592 674.929 422.02 675.591 421.879 676.269 cv
421.758 676.861 421.23 677.271 420.646 677.271 cv
cp
f
427.875 719.73 mo
431.453 723.303 li
431.543 723.399 431.584 723.452 431.627 723.507 cv
438.602 730.481 li
439.016 730.896 439.566 731.124 440.152 731.124 cv
440.152 731.124 li
440.738 731.124 441.289 730.896 441.703 730.481 cv
442.117 730.067 442.346 729.517 442.346 728.932 cv
442.346 728.347 442.117 727.796 441.703 727.382 cv
440.135 725.813 li
439.191 724.87 439.215 723.36 439.24 721.763 cv
439.252 721.06 439.264 720.332 439.199 719.636 cv
439.102 718.573 438.631 717.571 437.877 716.815 cv
434.332 713.272 li
427.875 719.73 li
cp
440.152 733.629 mo
440.152 733.629 li
438.896 733.629 437.719 733.14 436.83 732.253 cv
429.818 725.241 li
429.754 725.177 429.689 725.099 429.629 725.019 cv
424.33 719.731 li
434.332 709.73 li
439.648 715.044 li
440.816 716.212 441.543 717.762 441.695 719.405 cv
441.771 720.237 441.758 721.069 441.746 721.803 cv
441.732 722.593 441.713 723.786 441.912 724.048 cv
443.475 725.61 li
444.361 726.497 444.852 727.677 444.852 728.932 cv
444.852 730.187 444.361 731.366 443.475 732.253 cv
442.586 733.14 441.406 733.629 440.152 733.629 cv
cp
f
375.842 713.3 mo
372.299 716.842 li
371.543 717.597 371.073 718.599 370.976 719.661 cv
370.911 720.358 370.922 721.085 370.934 721.788 cv
370.96 723.387 370.983 724.896 370.04 725.839 cv
368.473 727.407 li
368.059 727.821 367.831 728.372 367.831 728.958 cv
367.831 729.543 368.059 730.094 368.473 730.508 cv
369.301 731.335 370.745 731.336 371.571 730.509 cv
378.585 723.496 li
378.586 723.483 378.625 723.435 378.665 723.389 cv
382.3 719.757 li
375.842 713.3 li
cp
370.023 733.655 mo
368.769 733.655 367.589 733.167 366.701 732.28 cv
364.87 730.448 364.87 727.468 366.701 725.636 cv
368.269 724.068 li
368.461 723.812 368.442 722.618 368.43 721.829 cv
368.417 721.095 368.404 720.263 368.481 719.433 cv
368.632 717.787 369.359 716.237 370.528 715.07 cv
375.842 709.757 li
385.844 719.758 li
380.541 725.052 li
380.479 725.134 380.424 725.199 380.363 725.261 cv
373.343 732.279 li
372.457 733.167 371.278 733.655 370.023 733.655 cv
cp
f
379.725 700.544 mo
379.515 700.544 379.303 700.491 379.107 700.38 cv
351.744 684.823 li
348.548 682.974 346.271 679.999 345.321 676.442 cv
344.372 672.885 344.865 669.172 346.708 665.986 cv
350.029 660.262 356.895 657.71 363.106 659.858 cv
363.268 659.858 li
363.503 659.999 li
364.209 660.265 364.894 660.589 365.539 660.962 cv
371.666 664.421 li
405.707 683.78 li
406.307 684.122 406.518 684.887 406.176 685.488 cv
405.834 686.09 405.068 686.3 404.469 685.958 cv
364.296 663.137 li
363.774 662.835 363.232 662.577 362.673 662.363 cv
362.669 662.363 li
362.462 662.288 li
357.337 660.421 351.624 662.505 348.876 667.242 cv
347.368 669.847 346.965 672.886 347.742 675.796 cv
348.519 678.706 350.382 681.14 352.988 682.648 cv
355.708 684.188 li
380.346 698.202 li
380.947 698.544 381.157 699.309 380.814 699.91 cv
380.584 700.315 380.161 700.543 379.725 700.544 cv
cp
f
422.521 725.073 mo
404.463 714.807 li
403.863 714.464 403.652 713.7 403.994 713.099 cv
404.336 712.497 405.102 712.286 405.701 712.628 cv
422.1 721.952 li
438.654 705.396 li
429.824 700.376 li
429.225 700.034 429.014 699.27 429.355 698.669 cv
429.697 698.067 430.461 697.856 431.063 698.198 cv
442.701 704.815 li
440.75 706.845 li
422.521 725.073 li
cp
f
371.515 705.399 mo
388.071 721.955 li
457.184 682.637 li
459.783 681.136 461.645 678.706 462.422 675.799 cv
463.201 672.888 462.799 669.849 461.289 667.241 cv
459.277 663.771 455.537 661.614 451.531 661.614 cv
450.15 661.614 448.797 661.866 447.51 662.362 cv
447.42 662.396 li
446.916 662.593 446.398 662.842 445.881 663.136 cv
439.74 666.603 li
371.515 705.399 li
cp
387.649 725.077 mo
367.469 704.817 li
444.646 660.956 li
445.252 660.61 445.867 660.315 446.471 660.077 cv
446.533 660.048 446.596 660.024 446.662 660.005 cv
448.223 659.409 449.859 659.108 451.531 659.108 cv
456.428 659.108 460.998 661.743 463.457 665.985 cv
465.301 669.173 465.795 672.888 464.842 676.446 cv
463.893 680.001 461.615 682.971 458.432 684.81 cv
387.649 725.077 li
cp
f
721.08 715.293 mo
721.08 713.994 li
721.002 713.532 721.188 713.046 721.598 712.759 cv
721.908 712.542 722.283 712.484 722.627 712.572 cv
723.473 712.562 725.904 712.552 733.229 712.541 cv
737.355 712.541 li
738.563 712.541 739.543 711.56 739.543 710.353 cv
739.543 709.142 738.563 708.157 737.355 708.157 cv
731.568 708.157 li
731.563 708.157 731.555 708.157 731.549 708.157 cv
728.828 708.157 726.326 706.209 724.67 704.919 cv
723.992 704.39 723.193 704.085 722.35 704.028 cv
721.66 703.983 721.137 703.386 721.184 702.696 cv
721.229 702.005 721.836 701.482 722.516 701.529 cv
723.863 701.618 725.137 702.104 726.201 702.936 cv
727.678 704.086 729.688 705.651 731.553 705.651 cv
731.557 705.651 731.559 705.651 731.564 705.651 cv
737.355 705.651 li
739.943 705.651 742.049 707.761 742.049 710.353 cv
742.049 712.941 739.943 715.046 737.355 715.046 cv
733.23 715.046 li
729.215 715.053 723.18 715.065 722.449 715.077 cv
721.08 715.293 li
cp
f
580.563 622.712 mo
580.48 622.712 580.396 622.704 580.313 622.687 cv
578.383 622.294 li
576.123 621.827 574.664 619.617 575.127 617.366 cv
575.523 615.431 577.248 614.026 579.227 614.026 cv
579.521 614.026 579.797 614.056 580.066 614.114 cv
581.031 614.312 li
581.709 614.451 582.145 615.113 582.006 615.791 cv
581.867 616.469 581.205 616.905 580.527 616.767 cv
579.551 616.565 li
579.443 616.542 579.342 616.532 579.227 616.532 cv
578.432 616.532 577.74 617.095 577.58 617.87 cv
577.396 618.77 577.982 619.653 578.887 619.841 cv
580.811 620.232 li
581.49 620.37 581.928 621.031 581.789 621.709 cv
581.668 622.303 581.146 622.712 580.563 622.712 cv
cp
f
593.434 667.254 mo
592.793 667.254 592.264 666.782 592.191 666.161 cv
591.783 664.24 591.469 662.23 591.258 660.185 cv
591.24 660.052 li
591.041 658.147 590.938 656.387 590.92 654.669 cv
590.914 654.382 li
590.912 654.188 590.912 654.029 590.918 653.884 cv
590.881 653.604 li
591.047 653.222 li
591.352 652.601 592.102 652.342 592.723 652.646 cv
593.18 652.868 593.439 653.331 593.426 653.809 cv
593.426 653.816 593.426 653.823 593.426 653.83 cv
593.418 654.032 593.418 654.177 593.418 654.314 cv
593.426 654.657 li
593.441 656.283 593.541 657.968 593.732 659.792 cv
593.748 659.927 li
593.955 661.915 594.262 663.866 594.66 665.728 cv
594.688 665.989 li
594.688 666.681 594.127 667.254 593.434 667.254 cv
cp
f
723.686 715.038 mo
652.287 715.038 li
647.975 715.038 643.674 714.588 639.5 713.7 cv
625.896 710.821 613.533 703.259 604.686 692.405 cv
604.248 691.869 604.328 691.08 604.865 690.644 cv
605.4 690.205 606.189 690.286 606.627 690.822 cv
615.113 701.233 626.973 708.488 640.02 711.249 cv
644.023 712.101 648.15 712.533 652.287 712.533 cv
721.18 712.533 li
721.18 691.656 li
661.1 691.656 li
661.031 690.476 li
660.705 684.806 656.719 680.036 651.254 678.673 cv
650.852 679.039 li
650.273 678.473 li
649.701 678.378 649.117 678.321 648.498 678.303 cv
648.316 678.285 li
647.49 678.144 li
635.838 675.864 627.152 665.606 626.809 653.747 cv
626.801 653.033 li
626.801 652.78 626.801 652.561 626.816 652.345 cv
626.803 650.065 626.346 647.866 625.457 645.806 cv
625.184 645.17 625.477 644.433 626.113 644.159 cv
626.748 643.886 627.484 644.179 627.758 644.813 cv
628.787 647.202 629.314 649.75 629.322 652.387 cv
629.318 652.497 li
629.303 652.662 629.305 652.827 629.305 652.991 cv
629.314 653.694 li
629.623 664.374 637.457 673.628 647.943 675.679 cv
648.66 675.802 li
649.305 675.826 649.914 675.883 650.5 675.973 cv
650.518 675.957 li
651.137 676.081 li
651.234 676.101 651.33 676.12 651.426 676.142 cv
651.494 676.155 li
657.818 677.571 662.561 682.784 663.42 689.151 cv
723.686 689.151 li
723.686 715.038 li
cp
f
604.688 644.892 mo
601.371 644.892 598.152 644.266 595.121 643.029 cv
589.264 640.654 584.52 636.219 581.766 630.54 cv
581.639 630.27 li
580.336 627.507 579.555 624.578 579.313 621.56 cv
579.25 620.929 579.219 620.222 579.219 619.423 cv
579.219 618.069 579.326 616.696 579.543 615.342 cv
580.213 611.2 581.914 607.26 584.463 603.944 cv
585.674 602.347 587.088 600.898 588.658 599.646 cv
588.908 599.433 589.193 599.212 589.48 599 cv
589.543 598.95 li
589.84 598.725 590.156 598.5 590.471 598.292 cv
590.762 598.093 591.09 597.888 591.41 597.692 cv
591.734 597.491 592.068 597.292 592.412 597.111 cv
592.928 596.817 593.527 596.517 594.209 596.209 cv
594.488 596.083 594.777 595.956 595.066 595.844 cv
595.139 595.809 595.213 595.776 595.293 595.749 cv
595.604 595.62 595.922 595.501 596.248 595.39 cv
596.578 595.271 596.934 595.155 597.289 595.049 cv
597.514 594.979 597.758 594.907 598 594.845 cv
598.213 594.78 598.477 594.714 598.73 594.658 cv
598.854 594.627 599.012 594.588 599.168 594.558 cv
599.748 594.427 600.326 594.317 600.896 594.233 cv
601.061 594.208 601.236 594.184 601.404 594.165 cv
601.475 594.152 601.537 594.144 601.604 594.14 cv
601.777 594.118 li
601.945 594.098 602.111 594.077 602.283 594.064 cv
602.361 594.061 li
602.652 594.026 602.943 594.008 603.234 593.997 cv
603.283 593.991 603.326 593.988 603.365 593.987 cv
603.457 593.979 603.541 593.978 603.635 593.978 cv
604.314 593.942 605.193 593.939 605.982 593.987 cv
606.342 594.007 606.666 594.024 606.99 594.06 cv
607.104 594.065 607.27 594.083 607.434 594.104 cv
608.027 594.159 608.658 594.253 609.33 594.385 cv
609.516 594.415 609.736 594.452 609.947 594.498 cv
610.154 594.538 610.389 594.592 610.615 594.646 cv
611.436 594.839 612.25 595.079 613.037 595.362 cv
613.092 595.379 613.193 595.415 613.295 595.45 cv
613.465 595.509 li
613.727 595.606 613.945 595.69 614.152 595.779 cv
614.268 595.815 614.381 595.858 614.49 595.909 cv
614.697 595.991 614.902 596.075 615.102 596.181 cv
615.58 596.388 616.064 596.624 616.578 596.898 cv
617.293 597.27 617.975 597.673 618.646 598.122 cv
618.959 598.319 619.291 598.553 619.623 598.795 cv
619.9 598.981 620.232 599.233 620.598 599.538 cv
620.877 599.753 621.197 600.019 621.508 600.302 cv
621.783 600.536 622.084 600.81 622.383 601.108 cv
622.971 601.67 623.525 602.257 624.01 602.833 cv
624.291 603.15 624.543 603.46 624.758 603.755 cv
625.023 604.077 625.264 604.397 625.492 604.733 cv
625.711 605.031 625.938 605.368 626.154 605.722 cv
626.361 606.035 626.58 606.39 626.779 606.753 cv
626.945 607.021 627.137 607.373 627.35 607.809 cv
627.523 608.121 627.699 608.479 627.863 608.856 cv
627.922 608.989 li
628.07 609.304 628.207 609.64 628.346 609.995 cv
628.66 610.76 628.932 611.546 629.143 612.306 cv
629.381 613.092 629.576 613.909 629.713 614.708 cv
629.783 615.028 629.85 615.422 629.914 615.933 cv
629.984 616.401 630.029 616.814 630.055 617.205 cv
630.096 617.591 630.123 618.017 630.131 618.462 cv
630.148 618.749 630.158 619.081 630.158 619.423 cv
630.158 619.746 630.148 620.071 630.131 620.396 cv
630.133 620.449 li
630.133 621.142 629.572 621.702 628.879 621.702 cv
628.188 621.702 627.627 621.142 627.627 620.449 cv
627.627 620.323 li
627.645 619.976 627.652 619.698 627.652 619.423 cv
627.652 619.128 627.645 618.843 627.629 618.556 cv
627.619 618.138 627.596 617.78 627.559 617.413 cv
627.531 616.999 627.484 616.633 627.432 616.276 cv
627.383 615.891 627.33 615.534 627.256 615.187 cv
627.125 614.436 626.953 613.72 626.736 613.005 cv
626.545 612.313 626.305 611.621 626.018 610.922 cv
625.893 610.599 625.779 610.317 625.643 610.028 cv
625.57 609.862 li
625.434 609.554 625.291 609.261 625.127 608.962 cv
624.924 608.548 624.77 608.264 624.615 608.013 cv
624.416 607.653 624.232 607.356 624.041 607.067 cv
623.838 606.737 623.648 606.455 623.441 606.174 cv
623.229 605.858 623.027 605.593 622.805 605.325 cv
622.754 605.258 li
622.58 605.019 622.371 604.761 622.113 604.47 cv
621.666 603.938 621.176 603.419 620.633 602.9 cv
620.359 602.628 620.107 602.399 619.85 602.179 cv
619.561 601.915 619.295 601.696 619.029 601.491 cv
618.693 601.212 618.428 601.01 618.182 600.845 cv
617.859 600.608 617.572 600.407 617.279 600.222 cv
616.658 599.806 616.057 599.45 615.41 599.114 cv
614.926 598.856 614.49 598.644 614.063 598.46 cv
613.957 598.409 li
613.82 598.334 613.678 598.281 613.535 598.226 cv
613.217 598.104 li
613.029 598.022 612.836 597.948 612.635 597.872 cv
612.453 597.81 li
612.383 597.784 612.311 597.759 612.236 597.736 cv
611.492 597.47 610.77 597.255 610.037 597.084 cv
609.842 597.037 609.643 596.991 609.441 596.952 cv
609.242 596.909 609.063 596.88 608.883 596.849 cv
608.256 596.728 607.707 596.646 607.166 596.595 cv
607.016 596.577 606.898 596.563 606.779 596.555 cv
606.445 596.521 606.164 596.506 605.883 596.491 cv
605.086 596.442 604.408 596.448 603.693 596.481 cv
603.396 596.499 li
603.148 596.506 602.9 596.521 602.654 596.549 cv
602.508 596.558 li
602.502 596.56 602.477 596.563 602.445 596.564 cv
602.326 596.573 602.209 596.589 602.09 596.604 cv
601.717 596.651 li
601.57 596.666 601.414 596.688 601.268 596.71 cv
600.758 596.786 600.238 596.884 599.678 597.011 cv
599.523 597.041 599.414 597.069 599.305 597.097 cv
599.074 597.147 598.869 597.199 598.674 597.257 cv
598.424 597.323 598.215 597.386 598.016 597.446 cv
597.693 597.542 597.381 597.645 597.076 597.754 cv
596.77 597.859 596.484 597.966 596.209 598.081 cv
596.016 598.162 li
595.756 598.262 595.494 598.378 595.242 598.492 cv
594.629 598.769 594.096 599.036 593.615 599.31 cv
593.289 599.481 593.006 599.649 592.723 599.825 cv
592.432 600.004 592.141 600.185 591.867 600.372 cv
591.605 600.545 591.357 600.721 591.123 600.896 cv
591.025 600.974 li
590.764 601.165 590.502 601.365 590.25 601.579 cv
588.813 602.728 587.545 604.026 586.453 605.465 cv
584.152 608.459 582.619 612.009 582.016 615.739 cv
581.822 616.96 581.723 618.2 581.723 619.423 cv
581.723 620.138 581.75 620.763 581.809 621.335 cv
582.033 624.163 582.777 626.88 584.02 629.438 cv
584.145 629.702 li
586.645 634.699 590.869 638.602 596.064 640.708 cv
598.797 641.823 601.697 642.387 604.688 642.387 cv
606.053 642.387 607.408 642.267 608.715 642.03 cv
609.395 641.909 610.049 642.36 610.17 643.041 cv
610.293 643.722 609.842 644.374 609.16 644.496 cv
607.705 644.759 606.201 644.892 604.688 644.892 cv
cp
f
578.699 710.864 mo
578.361 710.864 578.039 710.976 577.814 711.169 cv
577.715 711.256 577.547 711.44 577.547 711.7 cv
577.547 712.152 578.074 712.534 578.699 712.534 cv
587.643 712.534 li
589.623 712.534 592.375 711.265 593.533 709.816 cv
598.08 704.13 601.77 697.847 604.496 691.145 cv
608.492 681.374 610.383 671.726 610.115 662.467 cv
610.059 660.481 609.652 654.46 609.648 654.399 cv
609.645 654.314 li
609.645 649.839 606.004 646.198 601.529 646.198 cv
597.055 646.198 593.414 649.839 593.414 654.314 cv
593.732 659.796 li
594.15 661.862 594.461 663.845 594.676 665.854 cv
594.945 668.301 595.084 670.803 595.084 673.286 cv
595.084 686.497 591.273 699.296 584.064 710.298 cv
583.693 710.864 li
578.699 710.864 li
cp
587.643 715.04 mo
578.699 715.04 li
576.684 715.04 575.041 713.542 575.041 711.7 cv
575.041 710.782 575.455 709.897 576.176 709.274 cv
576.859 708.685 577.754 708.359 578.699 708.359 cv
582.336 708.359 li
589.039 697.895 592.578 685.782 592.578 673.286 cv
592.578 670.894 592.445 668.484 592.186 666.125 cv
591.975 664.163 591.672 662.229 591.26 660.21 cv
591.236 660.03 li
590.91 654.387 li
590.908 648.458 595.672 643.693 601.529 643.693 cv
607.371 643.693 612.127 648.435 612.15 654.271 cv
612.189 654.853 612.563 660.427 612.619 662.394 cv
612.896 672.005 610.945 681.997 606.814 692.091 cv
603.998 699.015 600.188 705.505 595.49 711.381 cv
593.85 713.433 590.402 715.04 587.643 715.04 cv
cp
f
591.09 600.926 mo
607.652 607.291 li
607.652 637.495 li
607.652 639.335 608.428 641.101 609.781 642.339 cv
610.998 643.448 612.574 644.059 614.215 644.059 cv
628.865 644.059 li
630.422 644.044 631.883 643.433 632.979 642.337 cv
634.07 641.232 634.674 639.769 634.674 638.222 cv
634.674 635.028 632.07 632.413 628.871 632.392 cv
627.627 632.384 li
627.627 618.472 li
627.123 606.122 617.059 596.46 604.688 596.46 cv
599.771 596.46 595.018 598.033 591.09 600.926 cv
cp
628.877 646.563 mo
614.215 646.563 li
611.947 646.563 609.773 645.722 608.094 644.191 cv
606.219 642.475 605.146 640.036 605.146 637.495 cv
605.146 609.012 li
586.248 601.749 li
587.785 600.382 li
592.449 596.237 598.451 593.954 604.688 593.954 cv
618.434 593.954 629.609 604.71 630.133 618.44 cv
630.164 619.249 li
630.133 619.265 li
630.133 629.988 li
634.115 630.616 637.18 634.079 637.18 638.222 cv
637.18 640.432 636.318 642.521 634.756 644.104 cv
633.186 645.674 631.102 646.545 628.883 646.563 cv
628.877 646.563 li
cp
f
588.166 633.404 mo
585.824 633.404 583.621 632.492 581.965 630.836 cv
581.477 630.347 581.477 629.554 581.967 629.064 cv
582.455 628.576 583.248 628.575 583.738 629.065 cv
584.92 630.247 586.492 630.899 588.166 630.899 cv
589.838 630.899 591.41 630.247 592.594 629.065 cv
593.082 628.575 593.875 628.576 594.365 629.064 cv
594.854 629.554 594.854 630.347 594.365 630.836 cv
592.709 632.492 590.508 633.404 588.166 633.404 cv
cp
f
594.447 615.329 mo
594.447 616.252 593.697 616.999 592.777 616.999 cv
591.854 616.999 591.105 616.252 591.105 615.329 cv
591.105 614.406 591.854 613.658 592.777 613.658 cv
593.697 613.658 594.447 614.406 594.447 615.329 cv
cp
f
209.229 715.293 mo
209.758 713.653 li
209.947 713.064 210.534 712.699 211.128 712.784 cv
232.762 712.751 li
233.969 712.751 234.95 711.77 234.95 710.563 cv
234.95 709.353 233.969 708.367 232.762 708.367 cv
226.975 708.367 li
226.968 708.367 226.961 708.367 226.955 708.367 cv
224.234 708.367 221.733 706.419 220.077 705.129 cv
218.452 703.866 215.999 703.992 214.526 705.392 cv
214.025 705.868 213.232 705.848 212.756 705.347 cv
212.279 704.845 212.3 704.052 212.802 703.575 cv
214.056 702.384 215.709 701.728 217.455 701.728 cv
218.957 701.728 220.43 702.231 221.606 703.144 cv
223.085 704.296 225.095 705.862 226.958 705.862 cv
226.962 705.862 226.966 705.862 226.97 705.862 cv
232.762 705.862 li
235.351 705.862 237.456 707.971 237.456 710.563 cv
237.456 713.151 235.351 715.257 232.762 715.257 cv
209.229 715.293 li
cp
f
72.9556 625.411 mo
72.873 625.411 72.7891 625.403 72.7051 625.386 cv
69.1226 624.659 li
68.0278 624.434 67.0898 623.798 66.4766 622.866 cv
65.8623 621.935 65.6484 620.82 65.874 619.729 cv
66.2573 617.8 67.9717 616.393 69.9473 616.393 cv
70.2456 616.393 70.5229 616.42 70.7959 616.477 cv
72.8369 616.894 li
73.5151 617.031 73.9521 617.693 73.814 618.37 cv
73.6753 619.049 73.0112 619.483 72.3359 619.348 cv
70.291 618.931 li
70.1807 618.907 70.0762 618.897 69.9473 618.897 cv
69.1631 618.897 68.4824 619.456 68.3291 620.228 cv
68.2373 620.671 68.3232 621.116 68.5684 621.488 cv
68.8135 621.86 69.1885 622.115 69.6245 622.205 cv
73.2036 622.931 li
73.8809 623.068 74.3193 623.729 74.1821 624.407 cv
74.0615 625.001 73.5391 625.411 72.9556 625.411 cv
cp
f
161.876 643.458 mo
156.44 670.61 li
156.25 671.485 156.096 672.349 155.978 673.2 cv
155.747 674.84 155.63 676.489 155.63 678.105 cv
155.63 697.215 171.176 712.761 190.285 712.761 cv
212.415 712.761 li
212.415 691.884 li
194.878 691.884 li
185.669 691.884 178.177 684.392 178.177 675.183 cv
178.168 658.064 li
178.178 657.878 178.177 657.762 178.177 657.646 cv
178.177 653.547 176.407 649.654 173.32 646.967 cv
170.846 644.791 167.666 643.546 164.364 643.458 cv
161.876 643.458 li
cp
214.92 715.267 mo
190.285 715.267 li
169.795 715.267 153.125 698.597 153.125 678.105 cv
153.125 676.372 153.25 674.605 153.497 672.854 cv
153.623 671.942 153.789 671.014 153.989 670.097 cv
159.822 640.952 li
164.398 640.952 li
168.318 641.058 172.061 642.523 174.97 645.081 cv
178.599 648.241 180.682 652.822 180.682 657.646 cv
180.682 657.813 180.681 657.981 180.671 658.14 cv
180.682 675.183 li
180.682 683.011 187.05 689.379 194.878 689.379 cv
214.92 689.379 li
214.92 715.267 li
cp
f
87.793 715.265 mo
74.1064 715.265 li
73.4146 715.265 72.854 714.704 72.854 714.012 cv
72.854 713.319 73.4146 712.759 74.1064 712.759 cv
87.793 712.759 li
89.9028 712.759 92.9033 711.632 94.2134 710.348 cv
102.044 702.671 106.357 692.405 106.357 681.444 cv
106.357 678.12 105.962 674.86 105.184 671.753 cv
104.037 667.362 li
106.978 669.7 li
112.609 674.178 122.055 676.851 132.245 676.851 cv
140.34 676.851 147.899 675.204 153.614 672.205 cv
159.121 643.448 li
132.662 643.448 li
125.818 643.448 119.394 640.772 114.57 635.913 cv
114.083 635.422 114.086 634.629 114.577 634.142 cv
115.067 633.654 115.861 633.657 116.348 634.148 cv
120.697 638.53 126.491 640.942 132.662 640.942 cv
162.152 640.942 li
155.853 673.841 li
155.336 674.124 li
149.2 677.498 141 679.356 132.245 679.356 cv
122.984 679.356 114.252 677.217 108.137 673.537 cv
108.619 676.111 108.862 678.759 108.862 681.444 cv
108.862 693.084 104.283 703.984 95.9673 712.137 cv
93.9702 714.095 90.2432 715.265 87.793 715.265 cv
cp
f
73.6392 711.14 mo
73.1206 711.14 li
72.8257 710.845 li
72.5469 710.615 72.3696 710.268 72.3696 709.878 cv
72.3696 709.464 72.5703 709.097 72.8804 708.868 cv
73.0801 708.649 li
73.5083 708.631 li
73.5479 708.627 73.5894 708.62 73.6289 708.626 cv
73.7754 708.62 73.9224 708.614 74.0693 708.595 cv
85.1812 707.757 93.8311 698.421 93.8311 687.331 cv
93.8311 643.808 li
93.8311 643.115 94.3916 642.555 95.084 642.555 cv
95.7759 642.555 96.3364 643.115 96.3364 643.808 cv
96.3364 687.29 li
96.3364 699.724 86.668 710.158 74.3262 711.085 cv
74.2993 711.09 74.2715 711.093 74.2412 711.097 cv
74.21 711.131 li
73.6392 711.14 li
cp
f
73.7261 711.138 mo
73.5342 711.188 73.3643 711.274 73.23 711.392 cv
73.1255 711.482 72.9575 711.666 72.9575 711.926 cv
72.9575 712.378 73.4854 712.761 74.1108 712.761 cv
81.8271 712.761 li
82.4512 712.761 82.9785 712.378 82.9785 711.926 cv
82.9785 711.474 82.4512 711.091 81.8271 711.091 cv
73.7261 711.138 li
cp
81.8271 715.267 mo
74.1108 715.267 li
72.0938 715.267 70.4521 713.768 70.4521 711.926 cv
70.4521 711.008 70.8657 710.124 71.5869 709.501 cv
71.9966 709.144 72.4941 708.88 73.0386 708.729 cv
73.0513 708.716 li
73.168 708.694 li
73.2432 708.677 73.3198 708.661 73.3965 708.647 cv
73.5576 708.627 li
73.7456 708.599 73.9277 708.585 74.1108 708.585 cv
81.8271 708.585 li
83.8433 708.585 85.4834 710.084 85.4834 711.926 cv
85.4834 713.768 83.8433 715.267 81.8271 715.267 cv
cp
f
96.7539 645.118 mo
96.1113 645.118 95.5332 645.099 94.9873 645.056 cv
92.3008 644.876 89.6724 644.269 87.1875 643.255 cv
79.1104 639.983 73.3286 632.931 71.7231 624.39 cv
71.4316 622.846 71.2842 621.25 71.2842 619.648 cv
71.2842 619.112 71.3013 618.575 71.3369 618.038 cv
71.6436 612.995 73.4385 608.198 76.5283 604.172 cv
78.5 601.596 80.9023 599.448 83.6665 597.79 cv
84.2598 597.434 85.0293 597.626 85.3848 598.22 cv
85.7412 598.813 85.5483 599.582 84.9556 599.938 cv
82.4629 601.434 80.2969 603.371 78.5166 605.696 cv
75.7314 609.325 74.1133 613.647 73.8369 618.196 cv
73.8047 618.685 73.7896 619.167 73.7896 619.648 cv
73.7896 621.095 73.9229 622.534 74.1855 623.927 cv
75.6323 631.626 80.8457 637.983 88.1304 640.935 cv
90.3701 641.849 92.7368 642.394 95.168 642.558 cv
95.6611 642.595 96.1763 642.613 96.7539 642.613 cv
98.1494 642.613 99.5137 642.491 100.809 642.251 cv
104.854 641.537 108.631 639.739 111.742 637.048 cv
112.731 636.2 113.655 635.255 114.49 634.236 cv
115.411 633.114 116.21 631.937 116.865 630.738 cv
117.102 630.315 117.317 629.892 117.524 629.47 cv
117.606 629.3 117.684 629.128 117.761 628.95 cv
117.881 628.678 117.993 628.398 118.104 628.119 cv
118.241 627.79 118.355 627.468 118.463 627.146 cv
118.563 626.878 118.63 626.66 118.697 626.442 cv
118.759 626.243 118.821 626.042 118.875 625.841 cv
118.982 625.454 119.077 625.073 119.164 624.685 cv
119.226 624.397 119.291 624.093 119.347 623.788 cv
119.347 623.784 119.358 623.723 119.371 623.662 cv
119.423 623.339 119.471 623.022 119.513 622.714 cv
119.562 622.382 119.593 622.076 119.624 621.762 cv
119.666 621.208 li
119.677 621.04 119.689 620.874 119.693 620.707 cv
119.711 620.337 119.718 619.997 119.718 619.648 cv
119.718 618.476 119.631 617.309 119.458 616.182 cv
119.409 615.845 119.356 615.522 119.287 615.201 cv
119.203 614.767 119.107 614.356 119.005 613.954 cv
118.917 613.594 118.825 613.255 118.717 612.916 cv
118.595 612.515 118.47 612.139 118.328 611.763 cv
118.198 611.396 118.068 611.059 117.921 610.728 cv
117.772 610.37 117.624 610.037 117.461 609.71 cv
117.125 609.013 116.797 608.402 116.451 607.83 cv
116.308 607.59 116.164 607.366 116.02 607.142 cv
115.53 606.397 115.05 605.745 114.558 605.145 cv
114.413 604.958 114.276 604.801 114.133 604.644 cv
113.771 604.22 113.434 603.853 113.104 603.524 cv
112.875 603.287 112.655 603.074 112.435 602.876 cv
112.11 602.579 111.798 602.297 111.485 602.032 cv
111.218 601.798 110.952 601.595 110.688 601.397 cv
110.595 601.324 li
110.036 600.896 109.441 600.489 108.83 600.118 cv
108.231 599.741 107.614 599.397 106.978 599.089 cv
106.839 599.015 li
106.605 598.894 106.372 598.79 106.131 598.685 cv
106.031 598.638 105.945 598.603 105.86 598.567 cv
105.521 598.419 105.206 598.288 104.883 598.173 cv
104.513 598.03 104.172 597.905 103.823 597.798 cv
103.448 597.673 103.099 597.571 102.742 597.479 cv
102.413 597.389 102.098 597.31 101.782 597.238 cv
101.684 597.22 101.607 597.202 101.534 597.183 cv
101.252 597.124 100.972 597.072 100.69 597.027 cv
100.591 597.007 li
100.538 596.997 100.492 596.987 100.451 596.979 cv
100.143 596.931 99.8662 596.89 99.5903 596.861 cv
99.4922 596.852 99.3906 596.841 99.2822 596.822 cv
98.9468 596.786 98.6045 596.757 98.2627 596.741 cv
97.8447 596.708 97.479 596.692 97.1045 596.692 cv
96.9614 596.688 li
96.8945 596.683 96.8213 596.684 96.7539 596.685 cv
96.582 596.685 96.4136 596.685 96.2397 596.69 cv
96.019 596.692 li
95.3271 596.692 94.7666 596.132 94.7666 595.44 cv
94.7666 594.748 95.3271 594.187 96.019 594.187 cv
96.1865 594.187 li
96.4268 594.175 96.7744 594.167 97.1069 594.187 cv
97.5757 594.188 97.9971 594.206 98.4194 594.242 cv
98.7813 594.257 99.1938 594.292 99.5977 594.337 cv
99.6904 594.351 li
99.7427 594.36 99.791 594.364 99.8379 594.368 cv
100.18 594.403 100.513 594.454 100.847 594.505 cv
101.084 594.554 li
101.085 594.554 li
101.423 594.606 101.76 594.67 102.098 594.741 cv
102.335 594.795 li
102.684 594.874 103.036 594.962 103.389 595.059 cv
103.786 595.162 104.189 595.278 104.591 595.413 cv
104.968 595.529 105.362 595.673 105.756 595.825 cv
106.105 595.949 106.475 596.103 106.844 596.264 cv
106.936 596.302 107.05 596.35 107.156 596.398 cv
107.427 596.517 107.71 596.645 107.993 596.791 cv
108.02 596.804 108.074 596.829 108.142 596.869 cv
108.836 597.21 109.511 597.586 110.148 597.987 cv
110.792 598.38 111.433 598.815 112.041 599.276 cv
112.117 599.313 li
112.242 599.433 li
112.541 599.655 112.84 599.888 113.122 600.136 cv
113.443 600.407 113.781 600.711 114.12 601.022 cv
114.373 601.251 114.638 601.505 114.892 601.769 cv
115.251 602.128 115.634 602.544 116.011 602.985 cv
116.175 603.165 116.355 603.374 116.517 603.584 cv
117.041 604.222 117.573 604.945 118.075 605.706 cv
118.128 605.788 li
118.287 606.036 118.447 606.284 118.599 606.541 cv
118.982 607.173 119.347 607.853 119.711 608.608 cv
119.891 608.969 120.062 609.353 120.223 609.737 cv
120.384 610.103 120.537 610.498 120.682 610.903 cv
120.833 611.309 120.976 611.735 121.108 612.169 cv
121.229 612.548 121.338 612.944 121.437 613.35 cv
121.548 613.784 121.653 614.243 121.742 614.702 cv
121.818 615.057 121.882 615.437 121.936 615.815 cv
122.126 617.054 122.224 618.349 122.224 619.648 cv
122.224 620.036 122.215 620.414 122.197 620.802 cv
122.192 620.978 122.179 621.177 122.165 621.377 cv
122.118 621.997 li
122.082 622.366 122.046 622.71 121.993 623.065 cv
121.952 623.373 121.9 623.708 121.85 624.035 cv
121.821 624.184 li
121.75 624.574 121.68 624.903 121.611 625.226 cv
121.512 625.665 121.407 626.087 121.292 626.498 cv
121.234 626.718 121.163 626.95 121.091 627.183 cv
121.007 627.451 120.924 627.718 120.822 627.985 cv
120.714 628.314 120.578 628.693 120.425 629.063 cv
120.309 629.354 120.186 629.66 120.055 629.956 cv
119.966 630.161 119.877 630.358 119.778 630.563 cv
119.548 631.034 119.311 631.497 119.058 631.95 cv
118.333 633.275 117.446 634.582 116.428 635.825 cv
115.5 636.957 114.473 638.007 113.376 638.946 cv
109.928 641.929 105.734 643.926 101.255 644.716 cv
99.8213 644.982 98.3027 645.118 96.7539 645.118 cv
cp
f
80.4731 636.672 mo
79.5186 636.672 78.5591 636.517 77.6348 636.195 cv
76.9814 635.969 76.6357 635.255 76.8623 634.602 cv
77.0884 633.947 77.8018 633.601 78.4561 633.829 cv
80.6987 634.606 83.2349 634.022 84.9175 632.339 cv
85.4067 631.85 86.1997 631.85 86.689 632.339 cv
87.1782 632.827 87.1782 633.62 86.6895 634.11 cv
85.0254 635.774 82.7646 636.672 80.4731 636.672 cv
cp
f
85.938 616.791 mo
85.938 617.714 85.1895 618.46 84.2676 618.46 cv
83.3457 618.46 82.5977 617.714 82.5977 616.791 cv
82.5977 615.868 83.3457 615.12 84.2676 615.12 cv
85.1895 615.12 85.938 615.868 85.938 616.791 cv
cp
f
109.074 630.089 mo
117.215 630.089 li
118.857 626.876 119.722 623.282 119.722 619.65 cv
119.722 607.156 109.557 596.858 97.0635 596.694 cv
84.5518 596.694 li
84.7729 597.152 85.0117 597.597 85.2656 598.025 cv
85.3877 598.226 li
87.8945 602.347 92.0034 605.382 96.6616 606.552 cv
97.7437 606.81 li
104.435 608.679 109.074 614.798 109.074 621.704 cv
109.074 630.089 li
cp
118.707 632.594 mo
106.569 632.594 li
106.569 621.704 li
106.569 615.918 102.682 610.79 97.1162 609.234 cv
96.0669 608.985 li
90.7598 607.653 86.0933 604.207 83.2471 599.526 cv
83.2476 599.526 li
82.5396 598.367 81.9561 597.151 81.4863 595.874 cv
80.8672 594.188 li
97.0752 594.188 li
110.953 594.37 122.227 605.793 122.227 619.65 cv
122.227 623.951 121.133 628.203 119.064 631.947 cv
118.707 632.594 li
cp
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get execAdobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get execAdobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnduserdict /AI9_read_buffer 256 string putuserdict begin/ai9_skip_data{	mark	{		currentfile AI9_read_buffer { readline } stopped		{		}		{			not			{				exit			} if			(%AI9_PrivateDataEnd) eq			{				exit			} if		} ifelse	} loop	cleartomark} defenduserdict /ai9_skip_data get exec%AI9_PrivateDataBegin%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 10.0%%AI8_CreatorVersion: 16.0.0%%For: (Marharyta) ()%%Title: (kids line.eps)%%CreationDate: 21.07.16 17:22%%Canvassize: 16383%AI9_DataStream%Gb"-6lZ+;lOX@RkJ9NtbCL!W\7ps>"6N%8pKHAB),)qh5eCN)<6_QaX/R6Eu'IEJ%Dg^I*OdQIKU.Rk2c&r@jpkargMhg3Gj.hZ!%]m>&$qX!dB:TscgX3K/o=""!Vo?g).oB_CaRjYp7\2nn^EI)p-q=W:[l-7KPebRbgc*'&&h]H3CIXCues5nRtDl;d]=+B(SH@C84%Vk&nBIZqK,4?Gbj]Xkg:^>7l+$*`n6+8s)OJ#5Gj^B#rorT9hA^-'*BmI0Kaj.0QTbGX[XBh6_8j+%*goUE1Vg[!nSZ`D:LpdK,3%pRA75^H?pc/9pXK<u]ckpMp4RF)_!Kn_<Y>]l:<bl@7[i@af]!IlF"5!T8\Cjo-1=s%W2OI<'H7N;rk)iVuQWqg[RC^BpCNf6mSn%!FFaXI@`>Ool%OOGE;Cr0a<Kbqu,cuS+G[p;f5I&VVSTcXnA<e^TD'SHa[[/'/sLFS'nUV=uQ!E]<fsNs(_-i:QJkT?>Im\Y&D';%qld^ooB$/O`S:"5lT\XGh=_"]022iRgT/r(kC#\gZ\R_agqVB]peqWNIsh4>l"rquX7Nf&mU%Papta\_UZ:f=JQ6#0q!?8ijmTDP%Pp?3<Ec*hs=>m;2h,%kA9Y3=JdPi],9hj*hSA(42XS0lL7q_%#]VC_**M7PGqs=1GS$U:Ffau>.s)NP]HGMs-Xo=AfGO+P/2ZD0U%qqQ+.:G6QFSH!@([k!E/G(9Cc?Ldo2hd3t,4?g["q9&_P+3g](XY13FDiac&FBInans@V!hqt$^m!LY_Ij*`_cM6'2IdZY8BF+AR%!ko*EhhIeB%hJ3;T#qqQqQa]17&uj*.d+^ed:[6.di-rIrXVf6L/tFM(&l'G[+aD-X8RH/\\F2Dp@ltsn.=Iu*p/EZ%hJ4/iLujj%Lc&Lu7rQndG]J0R_Tk[HM,ouWI\IS>1hNcV0I-K`)pARP1%2@[H5:S=:OL$<n.Rs!S^]H-KV+VjIKPHfiLO.H]cX@10Dn5-_aD5Z%ra=ejA$)J+#s\*YB!0Nsll)AMNffAc)D1RlXY<!;6r2N&c!'"=a7(%M0Yam1=qs2Yq;E\b@<U@Sr7&dg_,%GTr:!Xs-nNcWlMYtf%^]BCAi6U%3NDHU8<a)u;/t0=?O-+3_HEVW9qkY(g+51+G"#DYn4KVcP>KdUBd7X1nq.WRq/:O<&B".BZ_!H&aZuUJFY^><t^m0If%(qD=h\1l4IfMeoa7]08<HaR`.q:Lfa2iSi[`nT%UT%E`5Vig:U$CeHd=r[-RaFD(ajg=?ASWCd)>u&sQVZlgKh#m*^r56tk%ZQ[d%m.+9?AKNV#Z''?X=cG/e1#DG,orBI2S+mN/72;Blo3U<*^\'6LI9qBghp+_@$*sK[^Ja]Lq5o.Sl>s)fh:;MlmHL,%\,LgPWBMuM%ol'#gK*+E*htm*5?gI=S>Q:SrTBJ</%R7A)qE-t+GFtLgq_9*4<33NY0E0dIl5cL!s2MePYUBI*mlm]7n8PSro4,NsK79]:;nr"n%+54U;HM9]7s"3sA\_dYBrO:GJkMQ4\7f6fjqd:o"]_`gQXi$Cn)h5End+[a?5BPHGoFKjL^ZO?s3r*gCB@pp+o#V!Fs7B4pR;5V/%Orq27%e)V(r9M/oQgDL)q%)5&ap@aV3LE#/CYl2(PQT/65P5u"rFb".-`hp%a$D'tr5AT?<j:Y*Yk+!'giLE9_fskApNaK\lfGnu%c*p%]`:*6n!F2rY`iA\q%^g2E]+b*nGL+TFc'$uAe+6bJ^39B7EMGb"R]R\UGV@tRlQ;HK%G]lD1M61[hJI%ArA^Q0o,5HDEQ0&K%5&`+@o\j_DEUE38p/Q1+c>0;bAP67LNWEDPkm-2dC$6)f@tWKK-[jC4QW>c;ME75o+*uF/iSB*!k0*S756m]Wi*ZM":TK*]W\re8%YdNR1AfJRBf6mh5ZIp?*c94K7*rF2\\CXMar)@o)cJ_Fn&>&5KN#5>0`R0NkkpR%Lk%hUNo,dpg!Xa^S4C^LeUPIBfXp\j&53G'g%^sdpsbe)p%F*S`qp%pHrf_<o6SfKH^ho1@@E:%&%q7gP20Xa3dJ[IQiRZTJ%Vr'(2j=1d0CouJ:Kj[.;oOp%ZKXKOC1VQC5rfJ55%]9i62ALA`:BFM<bnTd7;5(bHp(Uh'8lVI-=4GHRkN\"qif?Xb!Spnt)n+o'3]=QqS]J<osY\;%<&'(3B(!f'6res6ipUB@k.$NeS%s)\=P[KRN=1B+tW'&.],'nb?pUV?X'o/(T[>+O-Ie'Duc:@kjEI6JNa]RIV(;-u3Q6OF_+"ukDfs5J?>7Wq*/`4#r#[<Xk#T6lq`%*iORi!;PH5g[Ms$EJ[GkrQ?o+:Lii=]kOS<din=A'm`s7@IW7[G@)UW:gO:e#f>7qE":*;OiGDQ\WTOifITJD8dX'mbK[D']jiSH%nhf_S=>SuJl(c+ERpBUHcB%#II>JU6m0e)/Ve"aP`pKA9i^`6Ygu^>G"+)PYo+7K,^K8j_anXj+bM:`*%GE!e]X9BcPWN!uH>h=9%^?b@DF&oh8M]!>9s.n1403M?N?$QBi`n%GTcLGuNr?.[>&)FP26b;%7.*HPh-0.msMIX?1f=',.5#seMbd,,gD4];\pZo'k$f<&l%m/1@6lGDe]([7/8hiHZ)1m5A?e""GH5r12aXnfcskFR(bpO_RD]G+nHOXF]el;)a'csf%PNLru<6`4hCRJ<CD5."R1]rf18@QbX>%[`C%];95G2hSm:./-h>c(CB[s#/@40M=RS;>;@`V0/sUMe,HYMjB>;o%XMpVUL(9%[!MD/@#J@%Q8%aT2=]J0r-*(_B3L?R+'dj&%=GHY0/B*&)pS2YPp@h6Z7D5;B)u&X5b9:;.hUDTj*Ad/"'io/mk2h!:MtVM@)YcW:q2m&U^OPr[r(Z)IZd7XXnDS#P`SohonWV_r%kMQ4hL%pMkpN++<iPSH-^E<&k*'ho::+5Ms+4WmSdW\>n1)]a.X2RAre8CDnB%pK)m/B'FNI4\YO;qU!DOVs>M\!nMVKpLr_$>)!%K4(!\8lS4lQ0El*e"19@FaN5Yf7*Acr-lt<EOF1Y5bk+gc'!/J\\G'@KB/t,&,#l@FVm%7_o')L$sWPmK^R*#GIJr7Q*T+_c-pJT%gZ,n?k8g-jNHqV*an'B%kn^>*r.=MiB@D>P^e3QEm>"p8Tg<H^df*j:OMfB#fm0'LB"tF9SXtBImThPi=Au$UDNB1m1UfmRTN-Lm%C0!Q-nUYKYBZpA.)tPspP%`gsR`"sic2+AIpM/g]=S"9,]fKBPmJZd!aY_640P/tq)]"CkNuI_N[5I&0(EC$>m,qS]l+ZQ7])D5*%:a;BT[lo_CmQ"J.%u7pN-qM&##Bd9(gM/7>&MCfM`CC;S,Hu;`CZeX1%,[,Ih8=9;_X]*je%@>pq!^_?"t&0(K>Vl7)%;B]hE.t'%DU5W5O7hTsdc(X:gPK;&g"W.$BPUqMGn8,'W6<aS[V]%M;]FcK]K%bQ]@=KoBUeno%9A??B3;ZtK;.OHX>&m5.:]Po07.$lo.)qZ%Mn`emQ+JjernDQk*(aJ.ILJ^]?SQ_RoF#$ikjMegL],-Loc9?J>6QBIaaI@aOOP[B8"7QXRR.GL&sX=t/f*6U3c(2CJqKBGnMYAg%BiW<Ns4QufRI*l?g<u1h9:ULas0UO5[`Cr9&d`#8#RG10WN<4P09]P)<AU)Lp_rSJrJ/G"o+B;62SOF?jZ=<SPp\bUe%U'g#%]P_%qqeVbM_@Yn[_#SuD-:kkB>&XZ.PMp*n(MTMUWCV.PK(PG_Y\[Il6utU2Y[o#o"]?o[p+2J[X#hZ(bU02,[g/h+cd)5igO@01;T&S%Ck_I)oc,#V06)CQT#MX:TQPPBE97=Li6/aUaK$%>*:iT.D(KtRT.e[U(5uPZd.7.qei>\D>V2[fDt'Mbo-+_Bq0Fn7fm*$&M6Dd\%0@<dPQY?>iVi6dR`Z'B*2J5qYhMNKf4RIO=4HRn_[?c,tmcA<cgJbl+a55@d1OfARFT:W4[XUM]>L0)>n.XRFkC1`8^Rt:M5QC-n%6m;QgpA=Z0^PG5S"SV`'Q9Y8'%MoKBA*s"Go'pGoK>%0On?/BsM4#En]'sYi\S46W'2.iRLfdT_ac_.Yh<m^ti(*IHB<2jn]'I.M%`=JEn$5#jA#MY`MTCXPX^U97MB4>Ptn"2Y"R#],unotZU^O(I\bI4<V]Cch\#ME>lL-.%Zge4PPc!0(&IP9`P*!)f.(if<>Xt1L`%,4WE@7/0EV</SFqCGt5MQf>PYeb2H`ZS:R5A)F-KgZh+h*#;&Gk@1JqgMhqM8/;nA]_KbN6X%a]_"?O*'6qRrI_fqd]u9HR_t3ct%)iU]Gqm!6pe%bA4o^'o4_`10*c)\Aq($17NYT=;0S_&/ec9A)DWi^?_2se6<IP:X/MeHG[IDDlV+tJf#HVHdB]C3phGTa;XCCY/i%>jT;2at8)r'Q@.YB?Fo$=IVEJYKjCUS+bFcZF+=hU@#2uZ8E+"j79>hC[]0I3STa/CUI9E]!eM"gXkD?mZu\f?#b8<CdAh(eqW"E%X+Dp"2V4Yh_2)^c\(Oqm2;MSE=hq'^_4KB<mF_2B59F\2pi?uG*n4V;[m?.BR,kq9gWf0Zn?ackp^EdApOg-5Rt$1kXJ1SdA!Ws)%J&]GRbALlIQ7Xs&MS@a=+/>gYn&;o8B,3]E4gg(6:/f3)a`"EY$e:lWaY2oGIQe>p:&B;7O*L?+J$3]oDAmsXmB\?L_uFD\2Jl02%'o0K^i@@-tAO"\0GIF[=nPcut_qVW8f%pE)2=bLRVnV0G1G,J"a^TkNg@"t<l'T/7YheKm=DUFX;Z;<DZ13$3h&@-fF[Yk&/8SWk%b/IgPGfe$MQuT*ApFn]0G@MNY9:Fmg/h=SnB8bp@))le;D![fgU)SDJfnM0D@Enu0ITlW_E$B^Zd&&9qhp#:_FliWE;'O\(ei[Ga%)Z?f4@.C\X=Ct6gkPR&OLK`!=[<jKko-.?ni\Fh4("^*=U%W]C`J774WG;r1S8XP_7m>>qbP!7=o1/h,IBKJ"3jt&e)>Ld6qBL$u%4>:KW5DJ>'K=<O\p#!Ya3nh\1mg$W+oHc>:L,e/^6Lcqqa*dpuE.\`-DP!^/*^1US.,H;mKASeK>;+sm5<r8?k<8N(YRq?7E]NfJ%^&>[8qGOB/hYdp>g:cBnf=&@?D7on.CjTBK^-CTTIfA.fqZRMfNC*Pqn+R2oIe;sLf-m8j^\4i`:uh1['\<3[qWe"D)gs[Fc#:<Y%]m]cI<C6NWX5@4Uen:<tgq!#<IT+#Xr;:F3l<g]thS/g1jk!Qq+7HnWH?HeZ4?pPDh<<$hCd."%nU($*m*.2TI/72G:N!A=ci38&%p#`S^s4KX/7p-+AoD@k6PQ(FXH#E5$G6b$Q?X7"iUCm.MQf"@*?bKU%EeYQ@^>AeVj6JYMGQ%@5n`B<6L@Db:UU0Fc2og?CQG+0f%$T^Ga^3S2*a%+eCc3p4WYkmVg006iGG4Xtol/h6#\SloO*k5V(p\3bU$GBba5.uDloBk]7='+R+\(b97]c3>8[/^#Ja6.j.o!:t@%d/>n+K=c'U]>"6UHV8;Up`''rJ'Ygs+.o0tI<0i7k1d5+LL0Jcp[amHh7Ff\pD:$9cHgA\(49:O5!Qcq4ZbYgrUTiTgXD&sDslc>%YKo7tHK5o-g#gIB+5`Z;HZ\uHqY9pRoZ>R;%J]edno`"O0AiAWSh:CmFn#[Tb;WdWHi3#je%#AMO=e5;4%s"(d_@-s^\m3B<57Z:%<5cNLrquD#kEGr7o'4Pfr36"IcH#s&A]=]0(Rn3LGC4DAq&_\jI!Ko*VQZRKR5U])CmP_5j)G<OYqtc*k@6dmldF<*T2<he[2KCp%8XGg&4nZk/SY[n4+2@7dr`B-[5<J)TW(HsBc+j;![!CKDJ,Ec2rP.4b6mVT#G;c)c!VYE@8tYu9O_7bUoAfGk^1eSbkHA2Ugq1PY%3U]33f?V((m@U$;I/`@mNq'])foDiah0KV"9p6$8aM,8X?g1ggS,^[I]q[[)7ln,aN_8UM9>:75I.!qa:M2%WNT9?nq0C\AnnC>)%W*&NZk%b\Fn#1]jqqW6aT,i.<ofmaa[q[k(g0MD*4[6P@h=O^]qU;E$St9YDHhs(5[CeSkO>ieZEI-C^I<5>_opsqlNc4o=B/DPc%Y&<^8l@ZNR'YjJ)2gsO)^OC74.o8(Dajp3p+TIBtDYDrD?>[D9mc4UNci%"Vc0MWlJ%E9Rq,<p-jr;^2-^pX_>bQ'7jqUu\-*'+e%gZD3X*S6dMZ\u<U`6rp[*%"j2gA'suq"j[G"L[^k]jH3FdJNLs9c*a\:VQ:-3d]\0)cK9kqYFl4)rF0Zp8(Ku\NW0iHstdq;qnpS%;FlkXFK5F)gN5<'BA:]6E&lE%[i@nHs7l/sj-q^bF`L^`p\FLHc09?es*ikqPRQXJe_0cOmIsBuKfA%sX7&fehr&$/F*:=(cee:+%K6I9kO8'Z!"_!e19Q'0QCLZK\^S?%fH$.mGj:e$"a8c.ne(85N0/h!B#@J-NhY)MJ@hY=\!O\!5iS6)!I(KDDYp$#Z*(6msDbiIh%+3-a8==gZ''4KU@ij6,'Du(>sqO)&cjh8JN*FF9e(0\iC=)Z)5qrEgQ4o4!bldH(f=[0uW\N%@j?iRE-lh]tugY5#T52!Q^5$"`!%FVjM?s&H+`DpQ^9?Os4[Vga#O+1L.B)$oa3>i'l$h=:0_5HhMDh=S>>q5b0Wo16L:)%17+2d;pR6!*7?lLOQN$Zk0]4(u\+.l1AC%-cGqVo6POKf&C!i[uMI,D!@$G5JM@,pU'mKj\!$1=5l[?5<J;Gpa(arm&p=4*V<]epYqs.VEZh*@sTM@Df2a2IU#M=\&6*jh&M(3%6U:*1m%rq@2a8+kQg4$O-pNDaHLpg%s,OY[O*h@RcHf8bd:mT+Uu'.hq<,*9\)4o1F04D^97:/$Tl3`Q^A7IKP[\P+j%ejl$%;i:%\U=F$5E3FjLk>QWe!QEZa/8CllF+%uUXQDbF\CRaAp+-A^B6AiqY'%$gZt&%??5k:oD-[kIdA4_SDG=%mUFLL4-'#9NoU-\2S,5_%f;^PIG'S;cSQ8PcC%"!9DpQab"lircYA\A!kcJ"R;Ou/%b(GL3+2@XR"S1/o\Xbg3U+O`=h=R>enDrm2p$$8No_KDC55F$bmFKm!%l].!DDYM@]p7$]$)NXf.ml+#[N4/,pYc,Eh]E\Q0D"q8i_:[X/$t/sE!;g5B!5$kT1G^&$q3[^uX4?ZO"7t60`[7u^I3K3rk0p^E%c/!+1fc<0292'0:rqss+0,#6gZVKfUAIG?Cc`Yc@Z\Ol>D-jYOf&,LWcaLBs>)]2FZV)3"YAWPtHNE7]9Dlmua$9CGX&loONk[Tf%5/-sWcCjS__g@Hjc_#)to;AoRYPJt51b[O7c)sk>9Q!T[]^)J"Sm7i(r-t%[h/,'/fC(DUn]7F4R,JtLqnK:?_/m0'U:t;h[sX&D%N=lmbAIg:!nH2.k\NShuXfaY3Ys8ioMUp?p+h(6(IIm<0;s*\p(D#KLlf\,/R:1".cpk`pF)B/CIjs+(9@YG7!b,.,DS)0u?eV9W%eroXs=JIZ?mHgEg[d^#G[o[L>*M$A?0/%faN+sljb6VY!UJ=`oDdIk,3OnL)lhV3H_W-tuU3Q\I-[-?lnOCj-Q+FR'qWjX"B:F<r%VqJbsAh3`5Sj*(U:N+Om\Qnt&r)78)PmN8m*r`4Dcd#=YI^=jKc)\2*MrQbB&YH12\3J[<lWkLAVd#Zr?1tD7KeN.V77#+b$,"-'%m8(+&I_C)NI>/]tmsBu\2Z1-Ba)A/as2tPD7p;&4XS[;D!Vk5aG+Z]4CL^sS2a,m[k2c=8FS,6B]C2>_j3>]8o98Vb`t,R<\\*1p%F*jD2Zh(RHqN:UH>rk3!oDCXO]-kVtk*q8nm<34?ebSH.1`!32&3fUu]!@SlnT"o,B\Ll2p?Zrd/\=208BK5c'5n.DgZ7MU@J6*O%4-c#qX#J?]J`Lk&\b%]&Y#bWTcb1$qmoRQ]2c&eo14r?aT&gqrNGhlsHEQXmJ)j+(?Q<GQl"58Z05/!PZ00lEL@NWYq>0Z*p\"@2%j@sLJ>^q0Eq%R[5Z^\G-`p!jAmEnY#k]`rf:[I)cm]/.bBMUOs4T4CZ.cHSN+CB?Cj5t'W6+bE>/t_RtgnD4;0sucC=`8NUm;\JK%:S1`81ci<=1rElHgUo6Op9reW4@Ia"nn*(r!eNddW7CS6S[\bk2a#U\S%C6oBkJE(M.:i;^Qs$MNdA9JB4=ZN&cl.U>AE.B%BnWY%4@*!"i9#k:B7nfS?_m5KH1#BLU+82^ca*\]qYKU@aV3m32Pt!q'R=q&CjLJS3MOH`B_@mWIr_e,Kg+A.lC-Ppc/E=8o#4pKS,`*M%Dnc-cj*ZmKQi:'8Rc=AC`FI'?7@2A%@ba=k@;c7]kj7jHoO:%B3'+VFr[D8jBm=dtm;kn#`5[-Ok"0_%@f,l]o\f#q;g`sQ#?iVg%0-KKEk1_rchKWS-or`-QBaHHhr9Q)7kF\AQIsj?rD?W,Do^a`fa0-Y810[&l:J\qkl(K?S;\5:TLDW*rpS$t5a`-gRYL6@q^M>_*%09<k0rG>V2ceb1amVSF'Ai%\;CZCbJ6[AIiq\Ff1]QZHi'R;<T1L#m"^H]EgE>FG5T]Bfc>!FT]j&>4b&thauG!:B*[/u"]??QZq%FLab#rTs^4^-DPX@.UGD<cd6;oMpD!&&YL%L\]KGZp?P?+91,OYkLW'dC[k,Vi!1fai,\fr8DF\35"(u]M"2<XtdH-?t5g<;],08%_kQ*[Rl2(AANoBDnbJ!fjY-Q2qVb"dj@;kE1)Fp\K_V6PF^38,[/L$*<F&;]03H]"nae:-QN*G?Fj3+Z;A#fiV3:@=lFU:@rog/_%qYl7';l]W8LVD+QJ#''oG?Wg)gMVl)Dh>1)WUq!3m)5E<F7#.-$p.Y1g2?S#)\t--(,dn6h2kS(/\#)Q;[:h.WCD?.qOmRa0/QMo%VffpK_9JY*ghmK/*W+YALU;d=c?jW<Z\$0P=?Cu63_I"=Vn-$Eboltqg5"KV=LSVX1NO>-A*eEQOk]O`],B,MI.UB]UN`h-MTr8Q%j'=t&-1?T1QO[fCIJ$i`P]fEPM3&_S0#c7/)q#(Fk<.eof<*hGmQIfK`^M?*DXHoR!-4Y&^1fN@i-d/Yp?-IgnDl:I]\@hS*'g$0%Nbs/Z>_9[A.3qV7(Z2`"[W?RM`Z,75#l2H,VD&0;fD8Y<?\XA(N@"$<G7Ms<r^Xnmcgr(eN&1-d8T*@a@nOpXeL-g<;shXI')O;a%MZVP2:/>'B\tn2[ib^;egb!"L\95M:OKlVF$<I#KXO+a*s45T<n+P"CX&c?`4=24@bs&3P/$tdSrH)*,e_JV50DA8mI]#tk+:\5.%l^b]ap_TDarpT^a&V9[qr^6$c(HSl4*KN5j]-(WVTaXJJEOQHP/ZL=`OBAdHJ/$3b`6`_-p==Y]V\Ua@0IE<J%dE;^%BOQdA"i@%%nU.L3*ZrcZm\\.YoqRM_KoQLO_APe3rlu"qI6`5VpA%sr3!Z;?gsfb&KN7IC@C_,o0i[LX7h;;:+/eEt`\n95C$[_HNLaP;#\/J#%<;#>IRL\SLL?JCs9f@_iN=)u>a5rfR&Ai>%l,)@o_J*VW-qN\Q8P&//7**lUNY1p?9+5'Z>UD%K8s:CF<<?>U!qZrNA,R\_oB\.I%3T7\=`EIBo.S.`bK)W46d3%Dgn]odfr^ZN_]2#C.:0E@[i:(.1Fd%$>EQHfH;G)h"G[IlIXm^:,X/TP?4+qu%4[fl:e0+uc)V^T<%JGtW47eADqmi;Y[pX'k!FI<S?ejl(;QA11LR/3Ke9'TOB@^V3>3%5m/Ca/u>k<+"l'EJ7i&qC=X'2n;K'n[6mMq07j.$@ab>j3q&%3s/ReXE<kIdBnj2[=_U4BO$>b.=%XgE*g0?`G#><,*s[Y;bWb+1@YeF*@c5-6?CkeluY!E+Y+<"\hgiQGnI/-j8=OCAK\]W#8ha(%3D%-p^cM9;/4O"g+JH+b5`F>5,YjnH7mB5i8HE86N9=Ff*Zun??.P,&M]9tKQMY+2_KNc5j3)o,E3LR`K?h1mCNNsr;=c:Y!C4jl%^'rQCZgVl*fa^RD*>63j_>Z;CisO@uNQ>Q#SWHe^r6B.bQS844R]&Z)Y/@d7J5'RRJ3_iUR*e>.YbhJTlhK%nVgjuJ8H\a0D2p<2%D<U>pF#j>,CP@kq8-0sFOL9et8Q`nTpeE7Yp*97j4!hpUQA1%!9[=iU.I:MX"g78Tq2N+,_iu[jW.&4PlT10-jS'5,;Y#A28YseD%$OnL+Vp<]m:;m9;mG82)*?p$^8-a6qbCTkU)otq;G`%YOK8^]7Z.O_>rI@Q=,dR\#eBG6!n[!;7%dPA'Vk+;ZBCMNG*lJ@1\=],O%0bSGX2KQ>_OdGac!-]e&YP844-K0c5B-\*n80D>Ib7I2a_7)\XqGrDU-I7,`/<Ycf0fdY2lu8I\;]ug)B'>n>3gWF&`O?s.h?IP2%d%;Lj($DsmDjj953?UQPO=5".`GY3JLO&A/aBfo%Y'3idb?KX:MtXiSpAWP<,/9^+%L<7>UI+nb5fbSK0!NVB3njaFEF=,9"uE%s%o9R=4(K`Q6@.(!m]fKTeoD8^pkgS.I9#fWn,(@>$SpOW`bPPo(4K>riH0"_^LGa7EK@S3C)=,5AE99p4ljO8p+WaUVe&.E[(,KJY%o)\0,FPObr7o0(;BCOei+9LbG43Fb%9d]oMXF9>FL9.:9_o@f#Nojd-RiJ=(:OdU4G+!d;i-i_a:h1t,FsRHZmU?V-gJ'fJ3b9&s%8Cjc3T]ur9Qo3)-lUF_>^i\agAq7Qg"Cm0D%s#+#e<QUlBkk<*!%0k/+jH!I1U2u.cL'[5jJV``D3/_o^C76:TW[KeKtI>P4f12H%3#u;a"R5=_#)Xfs%k4%YF=T\6lprE/[t?`LU(H!d3ImC(U@T[567.&GnGC%RU'q;bN"3t'QFh02bX8O(=Ze$Ccpp\[9b9't6(I"u%WADYgjd;\%R!4g*@`K5+0qm7S;AG3`(SD`M#mG?C'I*[\9p2cZ#)tLUYY&W-Frcn2TFM9i=ZWAE%2ENQo;sXG1nG3obXCO(B$=0f%-fFW;6k,m0oPG&$$4"8JpXG$Z[O(PJ&%':nJj]_]l\Le!E_mQcBE\kI42K8\!,5C%)J>r/Ul0E.*a=T[)q@inMU2\bE[olcdM]Sb%hA+=P\lF6&-/iMN,VPlX>S3M',j9k2P5W(sMCt,m`+:]gmBjZhBGBZh@b$M$N/5T+1*d3k!s4*g1IZ;<F\0FrWHU4"d?!!H878>D%2"_G*U)>,%VL^;d3Z#2KNlVX@BctkCiuF//;iG^h#OG!Uk`isL8P5SRnr:&A[LI46V]gs*f)KCpm$F;O`!o'NjnfIl^KSAQ4!N+=%$p3&<A;A+eoV=$,5\sN/IXUY/OPNd9#;(apls#ohL^m\12.U%e):gMe-?48Zp`6)o?&!'Tr=q@%fTBR@XC-^gZ450V#cV'_IO&0V%1,tGm*t_Ohp'V:a/*8$,.KKg`L3+H7fb$&CB>#%g#TQ,K:cgklJ2<-/..+'F.'sR*6a#F71(n]M2#.k)h`Cf[?CcVsI-MD;G#q66%(HW<s93oAoG/.(h^ml2XR"_kF;W?cZS^#m@cVc$P"O'FK"6Br%-]M`N:;11q.fbmJ@1?gF[e2deJRHkNe*Sr/+M`C,a_,`As$MA-%VaTib1392]ffCTF1pA\16kC1CN[>/sTG*F9X,![QX2bo?T]f3&-<nY-]OERAE#0QVLT0V]C,DkL\Qp";#of,?,r;%.6U@QZbGcNk%QOpC)Y)_WndV;NR0T.WH&Wj.P<QYQGlD^;I7`-#S-HAtLUB[46Ak5*0/<W^oLk+TM&@t._]E'U$6ZN[3Y=NrM_e?qg?a<HT(k=^1%7%2LWd#R$HkHSs.`\en9.mt>\UBcnLaE0QnJ!G%,XIp+;3a+QuegtT`!9F?ZM`$5)BXNF/md0BnY^p7RCKP6(PS#u&8('5U92btk%AgV0ZB`N^sl/O%%&XO2@<KNEd8H`1Vc[bAOql%%/G-liI;a!3Y=h,9kREV:8A[dlL5QaH;@0Cg&N9WJ>3X-1IP0k`F?</$!9`!q:%EFdW3meM*bYWi$(q'6WZ13aX_lDg>/LsmNt]0KWC-3\%<*;sCh&LKRn"BpU7"(jN^+FaC>kA<\<R&gQbE67W0<6_;X33KDUdcQ("%"hFi*)/aC;?1b!$"kpt)OJ&TRI?1fe#gf-Bb@K-NQoFcEm@BJ[dc1"tH@mRZ@gS\`e%-$oTIh9H$"uh]*90q%K5*Us[CS5oMi'O3%#EuH@)Bd5[RAQ)eWB!]b`?.'Z!q\CC3c]ePobBCk4GKL6?**BrAQU'&UoZa!od$UHo_f<e$Te%O@J957Z--"Ro984^J>3ZN'^-:&%6!%r6KWa/\DTA_?K)9)$T89LAK?aHZ&G]%rUX0UWa5C4?RFR.2+'0`iL]PDN$)n.8+Nn+n*?js0FiZ/iW=:.-0op/edpZ00Vf0Pr%1\n^\qs3%4YFXP*]64Pbb7#u&[8j91G#hC/"&OXrHpAH^[_P0+iRp@t_h&TC:'*Jk/.9bY_lMIj-;/$9"Ipk?J4-:`;(4J-%m%,%%e1rH&"n@H-R^>S2obW.<%&4iIKpOHs$:f9d_+tB;@=qhQnp87`dT<Nd4d9$P3)tc=7*nC)d.ae$E;>`UVaq4J2oC1fWpfQ]p]^Ao%Sa(Rg]kj/j9[-O7A#+b2G4lt(6jiRce$]RqV"L2g>4qrq=jKh-*O%0S'1k:rV<RoW^e[-O'.>u;-//2d$.('TVc?W![=S-7-Wr2t%T[g`:[l@Lt.$r#J0u_rC%N.Uq4XOI9D$:g<@fHI&3-m"gI#onn8#k3Q"1e8!;I"j$51P+b&NMVa!&=;O;_H[G!tZ!h+<]O':'!7]%V#Z-&WP9.95p:d6"q[A?5[aW.;oNF<V_kj`+D2#]'u;2fOH'Bn=Q's3JtD1E#N_G<pZt!(/1O.U$I;RY",laa\SsbAErJtlK)`H`%>CCH2Rii2_RY?9NK[#-0,19QQ,?mmHXMkI_=QaPb$,K,r/6o,3(YCj]D@CQO3Mm5F.NmfJ>[5dhMt2<ap.;BE/ef6KBLo$3W?4M4%g;"C1UC.&*rfPKCAG+XEO$t*fLl!-X_3bl%NR/A)YDL<!221Y?Tnhf[&p6HIl_@WR:b2Y_2rS9J7S_85Nh.@@GoJ-@&#?M77Y;b<%(U+>[)OLQi1bj'#SJsBk['VYINJ_`dG8/ACjNqN>l"<(uK%OR8h>7"@BRqtX'$EQr5tK!F"E0I;#L1(gA^VQ7kX>:Un=1jZG*.si%fb%Z"EF;LHR3FSf&?@mgCC!4Nm]tD,QSq[$%QV<S/5q'md!5U??(Mkt$!ff)-?#j'F,)J(9L[%DII:e"Lr<FWD3U"`V#ERELgp]C%@NCm?'o^YN^-Jk3S*pcjWoR$["Qmp1/e[-GJIrM3<<dV!8VJ\4=i9LR2))Ir`5j*S!)aD'`cLI82U"bfLW-a;\'kXK0JOVn2!:5s%6pW+AB'=Ysa,Q80AFGF%g4KUcUJr>fWg4Nm!iEJ0eM>&j`pX@=p0iX#+UG"3_qA&.E6+g/FZuHpmb1F<0I+Rg[b*$"-b@Y;@;87c%$m<)+=Yh&-3Da.IAI<f73)<3Jdg,Dn9taC=_""/AaWh:!Wq.4(N8K3:fWq&f5WTNs^VIQ'XP8?W#]A8iHn'Qb!6J1F\tDnd$o@93%:cLN^1:FFqS7[nc:9oA(o;"E1(A(]nbs>';KA5SAI>)>Ait6ZiRNl;F+^hmI^d,6lKTNHW?)HmTIYL^nJrL%5-J:87dR1)H>R9"Y%131hN2s&,S-F7t_,D1H0"2$lGQ-gS[D#]%Xk7EIar2NWZ$X+o@(8+<3W0U2uni1V&1S*Dh4]*gSA?%DmM+B!bde8,l,Yn-%<tM//%>4F@:9*H!@!Ke*;`m'nDfYeU\C,E.cEmW9G<m_,?h'%[D!KYUN+sJ/!<eO.$K/XO'A=QPi&g333P+;ffi4/#^=A?"P&+p)kGaMqS%JMd<F!((lJ+>h=&3On8ebZV=.Gsk:JqQpOfh'A2+Opr#-WR2((f`@T\KM2_P,)Ttd9Md>[)l?2Flf:30*Bsaa![:PC\%0sH6>.NR%bSAeV_uJYc:.8Ki,Jp6>-Whe%R!lWXR2IAl"hG2.9.$H/9dB.^!ss_UMU`+NAIBqccQN>m^7,8I`\e7B6m5#rTN_':2N336CD`i'%@OD)sN.;0t`8gq3WeCMC0`Wm7;=Y1'b#Ts&1Hq*R&0b$[(-U&'%9QUETpNGSa$C<A682VS7\S46!%-4$SY/7%dUCWu1AsE']o*)#%]+LiBoP]r.Lfho]mp)K*!0:FfE=$nNHBRC%5fadG*?rJq5Y)#hn!h&WW5HNm!RE;>JSPK\65G#nR)0o<<'tECTZT+,6>#5'VBEoa%#FGl5TVBeM6jnXI;dD4=66XI,$887!+=%SU-ukM9""_q6@<AZiAMEYUG?mC63>UNfbB/+h25*D/KMQ`:-rRsensoQ%(9)qD('Uu)%mGt3#5WAk6l.PQ&\J]S:^??*k0J:0RQUT2LL]n&EeMae"l2<g'r6UBA6OL+XGT?)YJeZ3Y@"?>0$QJ:D1m:0["c/i_!_mC10BOck%d'\,?;1N18l"^BbJ^?YuTeeIB#'^')TdOU1h#32uKSc..P0pp,"rQ#<?uTWi_ALo06XcnkJ1ukO&-Q#!\KV;JnP5*f'E,OGA.&Bs%VnoH%h'Kt6m_(q2=p#:g$60Tsf&.\VUd(c%qA/4WfO6PX_V9q?,)!\6Ams#9ki;j**0D5O!-Dst=>=p?j5b>k%oK4>bm&/0U;u>>%>b%+3@Gi.Rm8/_9_.?K<B.KG<\+Y"R#sL<]p@AY61/8@&fF+EB)mT7dnr=!M_T7@rE[AOu*lehsFQe=HBgF'cd\kRtU[9!33p#UZ%K6]@2%*tNGFQ3A^9jF)9NCX&+:BXB_dRfEF_dGDk=hTV^2ArNiI6Ru!n:fs,4NKT^W%RhP.>ih3=+Z&P',^:rk(eY815=Th$Vs#h%ZLAG,l)-:=3,SS$iC$a&m%B/)RN3.Ld=JUT)O)SR9!EcM@RunhW&Q277mB&>!>-jHKX#U2Ag=5_L$n;q@5sKS(tjoLP3aGN3=J%#%OXENA9N_ns!Bdt:OHS<1@P<p2TRQu/,EeX6@o*33Eu`3.`->1n9sci^5d^n,",8Zm>(J(@e0,ca+WFr(D+8I!&Ijo!Kh72#/_DJ?%gI%-TD-]ZBA9a4f22S+>@P":gK=NeV2l#of2"OGHDD0D#,a>V=j/bXAoD4VgdNt%?So0/M(_+LLNH*Oc39+D:aV\Y_`]0IX9l;(b%D1"kAk9Qb1b\iScCHs?Nn3ka&A>433A8aq@#c0gt[,@nE$99*"MNI*)6X@=\hPX6sqr(:`N#S0Pd3A6=,]LSAm]'hlA6>?m0k"k8%P8Ue7kgt>!OJ=u[RbdlIhr?,R`S7]/-\09s%ZseD;0>8O=\V-lH9O%Z3&,WO':c3`P"XGr:N@OsWL/u;6(naMAt/]=I:2p+<C>m4%5[I5WXoKmH<#6Ao'A5,Lk_Lt7/j^tM?J@5h(Vlh!ou6DU95VM4"!JMfo;"<4Ed$pbe#j2T;C=h^3/2q`"i/F1s"n0gqqOf*VJ^;<%()1kVkqS#%@%pF%p&^*!XX_4_Fp8iXT`"uWU&KA]Pb@f?iNo4Kdhju84SI/*L1s[:HlUEQY`h6N5LQO26I0BAT^"f>(lc/\O"gZD%+e<97c&mZ[Z3kj1;:2ZC_A6eX$d'[G2QUL2,*TP[1IDl0W^u^BMDHEO[ja*-B'4$$?.L1P6EHr?&n4`=mQ3(!\FYou\lkL2i<dQ:%,',5L6d:.:c"cb%"(I$"Jj-]+bN:gi:^qMHB[!;C+O\L_:_ILsZLJD5bS"iHLpr)0><)PSAXMhl"`WD;$?JL0KT8)Y"Fr`KO:<B9%Q*\^<TnK*@(1EOT_LPHABg$u\42G#bKbYTc+kN."PnBS+<5E%PA/O$.O6Da=hdLbl*)OeLUF6MB'jY?r0#EXi#TQsSq>fa?L*`sO%J@sX9^TVL*5i-XX)I'>$S#hlnN=]i/JC#g#.7`Ka!]C4U5u,=U!ll6Koo>iR]RmSBc"4s=<Shj&Nh5`#`X--9cmI.#FY!N3h>grl%.RR&@h,#(ObhXtIH*)?MO$-oj4p"'^63o!gC(Ukp_Yo*F\hm%(2MQJe0Z56C,[qE(o5hc#2WTD:5dh$U5&9c21]S]&![K)'F9/.3%`%=G$*sY%iMF7;RPY*f's41:7BC$q=!G6n8))3(h0Bk0f^]?bJ2Y&]B(n2Dj92'0T9?f3.98q-Br&Vd8\rHPja5b&BS]Q7H;:=6)%(D7^!-oDha;?R9!d440_2CF<tdj\^<$Z9A3:hC=h[/CJsp]31:S(*2jDkEmY7Sa]K(d=$iCf%':Prg6):["<%*TP8VU8]i>ImGKp%`G.QT#/RrC/EOhqnsL]`eOa]na&6dfI2A;fRX$(gBds0[@3DEO'9X690esY5-`(8UL&GWYQH3pd]OK`N,GZ4k-0MZX&.-)Y1L=6.%+M0$0[D6TQ1G8(+J<W$,>,G,M>[.UCrBT-7qW>V-.Q';&D0Uf2`7+EV&`/B9<P7#Vi8oV84JPD[7l(:/%1QicL"0#:LGS%$L(pEc%#XoM2Au#J.Zj8EK(hRCd^e>PupX)X8SBToG=H?."(5Bp:P(5>fNTeG%3[=#te/j/VY`m4O!m>;#N^t6C>9C)n=95(u9ZdXOaBjb#%cisgr!`^'62)Vh*9_/l@!JXRfPqH*mME6f9&Us;H_@'!e7(i#VJR8)q`55/]/lB?VI;XdT(:D[,)[KQ>.ZNp*n1*Mr0shRE>Vni#%OC`oR(lB+p.Ho3>g_$Jk!6'A?%XrSV+BXO`['XiuY0nbI(D')P@tbr.-"BSnA1,P+N8rchlnDW6A:YaV`0AqD_%U**n62^K->OUm%\Q5WO+=FP09=10m_)J'86k`$G'M)h3+ure/m;Q)Tjf('`)g8537l)L9C]G"\a2B":*l(c%3K?:)*]VP)n87;7^qp8\0Y]59jr(dd%SaR6opYI)WTK=V_%rhuUBlP<0P=Cc;b=G4$Mk`XS,`64(<GIC[B&sYKLFs,MMu^F6/8@poV`>u;PR/Uk&8p!t&\uKO_cC;`,_K\3%cih3?l/4(5Ee9uG<YN%%JO)\k9X@i+#*qps+6j1g@\n5H$q?`"A*4I,U"7=dkp4>H;=_ug-5"I%d8`fCd=eKZKRpe.l8/CC_$g,T%Qq)!31T_GX7l8HCih53]L[tWZPTf?MGkPYqjlqA@T(Wg;1O@m8Tr%5NKZ#X]XNI3NY!$TG?pR6^Tt1S%E^cR*ac&1kQ5J:TUWb'J%)&[5O,9cV1dg[a!#`b^4&"@#CBME(?P:*'oZ9^8^#I=l9f]3`"&.tS#[/qIdP]\En6]+m>02+^h)iBjlfSJ5m!:['fXRf@EiQQBK%&g^+^8NK+9j=)3^hUm2\)r(e+6BM;<XB#el4:8A&5D5o)/bYH<PX[rZU0TEI8>V$>&^sH\fhm]O`\Nr[R?VH[`DkW+fVPO_)B-i=%E_=EuV3n(`WcsZcXd\ZQ%Csnh'?jYe_[_Buj`DI&KI;5/ca6^tQ)Y=C8+JQ05q`cibZZhpZ)?LigQ7ra;"[[c+[`%L,=B\A4N=<g%1[G4N#;jU_-V]+`ckgq/.&(O.-Te0.?l6$P3gpGN!p)Ve'!Stj0qs_eXD)os8;=6c[%6cI"O<_B!7JsW&MjOt0-8;pKn)KS+N_+_%\rI/K.-7Qs&LFJD?P7cAc-5oNP>M*fG")Oh2^XA*4B9E%8To[Y3=ALH>cjW)g.d;Ea&2q,$,GW`fE6qd:,!Hqa<SbAO8so)B&jpe%/jR+jhMhqA^_lOes,cbuVXaC?_1u)k$A<h&VBE,VVM$Q4NMSBI0Yn0+?Fb>385hW#[Uo\Q>S\FrfO4A]/dro=(-i_Cg=\L5P!N:c%<8O&l]eVo];;=@<+>@?j$ni_o:>krTf80:BaT/]M+Uj6ceik29b;q$o:m@][U*VBQ(?\rm@7q(^-j6l'k!fn=OK63.#T.;XO<QKU%S8s4TY!e!$GB?5C4Y-a-gBL&eo:T6e<_a.781uTc*.;iOO>-A5RiHh7M#2dl2tOR0^Lj:C9tZ8A)a%k#E&t"uci]"YUqlVUp^`rP%B]lV/,d2HkI@`pq!TL*;r<MmAL_DB[jP]`5=iB$EFAtQW0?EkB#T:l<(P)>u#b"s?XL:F_Z@[Y.:=]d#02ltm5o9h.L`(4@.hs2,%(o>4Rn@,0T_V+uU(a:*pWm?e+4p4;07WiS`'!8UdGQN_j5=<@t,fL/n=,-aXTY(andmNR)WIo]<B2suUdOJ!X6&%-#Rk/&Ob)d3@%/Sg129=b,7#i_jRBV8*MJK6$F1n!PXmq3I,I\&+=U(OUN<dIJSl56:O)r"M`(!s`Ja>i,dCsW2I%:V;1`Ee'NZpRZ2M)c621l9^m%1J(>4^mndK'%IL:)@Um6QAM2c(_\u4OI?$jYUI69\P\^#LAAK6V2`;#!)TpL=Cc:O;^$3rkC+2fC+0Q\dT2N7n\?8,[rXB8,#o]j%-`dIr9P!K,6K_WhY`BLF0<fXO9P(435UMMDC]r($Pb8Bib/b::Eeh"eKWqaPcE0-2"o96sA??`R7\Tq+8iIq0nYehOCDg5R,q.-e%$19Ds;K*jC(LVS,3-:@_UbS5#Yp^<%Rg=.+dV;(D%YQs7&LuiLA:9PO=OI4:mj1o"#)=X=F_V.L<'j_A9.OXH3MFPb%1!u-J5?^=%o0J(ob)kC.Q@20fTOB-93#@3u)C-+e2+*JG)'D+53a3cs/<CV6RUJqYKeeVOSIWKeZ)3`eS<+O;R!?!+/E&.soj>#cT*W)j/1*31%/pke.@()Vd<Q@5C"e`(Nh$BBXe,_Us[i$A/<Xs:AGc"Qd_B9JJUqFsS@)O9>19pqLg'iPW#'l7W4'SqF/5\_R_n:mQ+[IZHT;n:6%T<a+p:p_][(,_U5@[mbEjq4G\)l_F3f&2rfGliOTZ'iuX"Dg5XQS#>4k]'Z8j?8p98<=Qn?XW@B_0S*8e<.,dS@s^j"u/JNB&)n2%8i@)IG\;mp@>P*\V2ZeJA&51+@(qr&c"%p:Ueee34==9DGsL_X7M,:%L+K(K!&7-JEna`iJ[F/*IXl#%:<nt"#:TG,dqRZg73AVG%nrDXDWiR,HJltqg87,>m=Ed0q\fe8*L.JQs.p9:NQ6<^01dft:)D]4ggiX2)kFTI;;=.k=hge8-e>S[6A)p9YGN\^1<:s*6*6oqQ%$*H>#TFNS*0G'3DM!?9m:n,`G)T%Ffo0L4P6XpT?7a,fPA@$G3O(C=#:)'/:._6;LZuZ2nk->%Z-KJ*.:M$<qjL\9T1'[0K+D.?T%5DT3T=WDk-<g-Q+j'_&n!/E.7RDo<5R4aOPbL,38oljOq"9L=YIp(F9X8ar/n^6F*pS'or.5rZ8JT3sl42mGm)2'KYN7id[L.G!_%7q,?$Wt.Ldc5`Jg8NllQVrCPT<gVk[!NE)^A9!p&,RFp+,0PuemD,,`<f\YfMM.iE@(rpWmMbpURge3DSiWEH((SK!;\/s&))raC%Z%ll@8Y_fEo`ONLB@;6`*m,(=SOgaSR_Bn^.PVBp%Lr8f+pd^!<X=[VM.`X&$5sftrE(Z^*b5sRAu]gB2&0IDq8TM!&]'U7_&5L[%DlU!p6k>+H81<jLZ.mWTOJFo/9npRG*p?.f]E6Im&X=Km#N5[H&puLoFTP^?)lsIVd.kse73EH!>j6[Y"9d&'L@I`:S%TfpE0R/q%2@1.$(rS.3o]h()US].`Al6#i8"bTTf#dN>Rf9c:3*m`siP`;[6t5Ztj+blX,qROV$^2dj/m*),aE70.BL9X)0\[9AKI$i!T<^Wb%KN2G"lZ&Tc&u0\!<L8kkW@lrHC0[E(Z5c8e,Jf_GP]7VX;4_bH5a=E8+:i7''tAFK5M!IJ.KTLXpuS4KU<+ZT#:9MO@g4(,*q9a3%6U<T2+:f](6X)l-cB1A/J10Z^ILp_O6&S2\8!H/[P-47D2lo0Z2JjpeN`!?Q&(R'dfL*#ULgp!VKA2:BU,,NS96WS4mE@kH8d[\>%W9n`T6!alB%*2EM-VDf;l.?9f+:A4Xnen;+I7%#>P$F'u9)fH%(a/r)1Pr'9e.^leXU6PZV'@1T&S>#DC_^BT:.t$n+%J+"E>]Lj%1WEKJg(O^LhfTL3)j@AGY4euKOZ$h%+/UpN!RL#&c#Zn50$5D=>H.*S3=aa-+GlJ#_WVuP!:\_fUVA8"_#aL7WrY(JTrg<<7d?N6%aj)%?SfK[gs*#k(a4a1BTm&W/NclK+!'o5+E!o,LKaHfnI@6TIY3#c$F%i?MX&c<VP>seuWDO/Y/08Ec4r',Hq#27re)5*FN6Z91%HOMId-s2!Z43-&7;%SY""0<Ub$F%;Y3WLUb)3,M%iO^e$_Idjp!^^TT+?ITG4sru/38%GB#UT`^F`^F4N;u3o+>2+P)(MXCJ:#@b%1tul3:eX8u@dmD%O?OG!4t-D$C?0D0:s>BU6R3\WXs<X0M+Pp7A+Z1AGKmHPDc6e3K<!8g]5d3/$s?AG^u/?`@5gHW8i0W[2BXPa%gXhINqtBh&GomF/+Gmo<f%$oQ)s"NGd>I"X'TAq7''mRMcNb3k1O2<E>WW<s%1(;fd@3PX\J<n)81;VLV@Z6*?m'uD+5e!D0c.Gp%_h#0NHRYHY_]`PK3RtO*Y];coHs,nm10>7rZ3>0)TJ@<C\F_/LekJBF%U9FQdd.u2b=ra"5qJ<ed1GR)'d+)bM&nt)S4Y@gAg5$d%-?8BD&XW62kFE=*pSJo'-%fMN1?:Jd"f6ra^jqpU"/IW44Y&SqJ>i$*=ZM`DHn6K#(GOi=?W%SHDN#paW\mKV,@[q(TMg#0AX,Ni%("`\WMFJgd#dlcK:_b+t<<b\n3G>_p=%qTY,RO'E:_KBtg(FC_l+)qG9VU9T'19f\;%;do88?DOkC7]@5&aV>(F8j4;V-c],eGM7%"bsA8YtI%'YdTOYDQUp#=dI%SMJbGbN%R4:HO(0[<E+ePd"P'a**>!2Zs:PG/I@n&J-<sVR/f+-@:kK$OGs)[2uoRb:;SFfXbkaT%&=9HP<%3^;JN5[BN(8IK#m/<^G"/clij*P3OIn4EDTHO""cJZmQ$-_a/-j@qW#`m@\hK'H%`/s]<U=+bo>\UKE2uWF<gehB&a1-)%[Y<32_H:0oY+:Rs1mUVn5U\Ck0n=V.NbAYsdj5Wd))%#aq.ASLn>-3'C.,_h"4hNU<irGGNX$.0ifJ3#$8XL.QrP^kW\0(IOP4@;%9KF#)pbC/9/AS+@j2V"*lKuokr'rY7_;m#bHTX(XP$nPsaf1F^q[n'<Qkmur0T6I^8=Le'#p<d9P4OcFbaXUm;k6X;f=59@*9&,>%&RjU#+DZWL0OQ2COH<;Ed_%,e$7r-mEQ"ToNMV3]-u@#4;\8h&KTC2Sr,V(gI!Wh)XW*tJ5iL+idaK4bnpnO<gLuKfN)upm70pF9%OQ'94V\4+aKY`8d0PEt2[Q*><.ML"<_d+*YZ-C'@4Kq)H(;P"3ij8.FicQN0)?TBCkf9S9bE5/<PAWL&8G5_N[=o%PJ;HSWk!E)9%d@LkBr&e6?2(I70P5[n*9rbBR_n<>8&V)RB!>&6UBSo>Cg$r"I.hAkgYa'K+ld5bm5[=BS@^ol&W3,O_f:ejM*_nt4D#orsPB+Yp%nJ!db.S7UB*?hg;BlqVIFUD5$5lkPu)m<:2%^H/6-QiihVUD(S#Qu!`$EBK/,s]$O/-tU$I013#$im+_4;Ok)763UZ/;mTbWuArB%#]F5TKNPh3Q/\&lXRFs.XocgA2S\>"f4;9:)77c0[LOa`FN^Z+O\]#M$F!8W$<mQ,q*N"rZ(ic$0Iu_rYn:8SaXXOV)&a#jW$RqL%0R=17omJlSKuCJP=p;pN7'8l)j[+pZF.@@'<F"`.!]g=?&r!c,,tpJ].AO!d.B[l+$-?QUD7+AL^dO@k5cUE6;KR^#6g)+(%>k2P%=(4Q1J`0bS;rN\+:kLa_b*]I)r&W%L^(<?+>GM2R"7i-].*D&`jr$-MG8GptimRu#6T6.k]Fb_+SgVJ*%-W=t'M"&E%aW+V%cN[7%%1"s$_^7[4oGe7]!L=YTSAf3+>1'JS#dae>Pp"EH,pt2M8h]Eb"/Q.%Q=tOt"Xk,QpdSkWFo(POF1,&sL,RjO":,U=.U@h7,(R%2%Fm3W4nglK>MXsT"-?sFR].jDAO)\-sCpI#chRsXTjKh:H;,V"&+I@iu"64-a`\^XNWZ%jBGEH:Pm)p1sg.cE$XMu.+22lSW^FC@,%DE$lR'Xc%`E%Wl1!e#3.hPiQMVqD2kUkt"T22GifKS=aNUi[t[(NHhK+3+^/lmi=OG&lR]SJ!R=>_g(H@o#g5;U*Z>"^'r4Kkj:R%&'++>-gK95"E3O)FDC\LF:0#)0BG;BbgYtsFAIMO<Inb;-=J*oKOU36SWGbI<pF4c#1!$PdCNQG^O8X:oI5dX8khJf\q)L?A!s)0%k#p/d[(3./N^leW?Mlbt'dg_L+h/k%Ms4RKKZ+s>0(ob0Li)@NZC&je/mdM]aY>OPaPdsQL"t5\`WkLsko#i;i1;W?HaYhbOTHPu%77OV4^JK*:JX7,KfS4GOb1:7Y@cle[QYnSF[.M"5-;R0EGS<1V\qGV^\(Xgk!USOHg:>hW@LS&fWDsXEFG-N]EPEG%lgSg6&]U:B%!/&Obj"t].]FEVbotdK-ailoL8=G:_`E9Pd"pddA+ADd.eE(p6$bg**3<TRi"/2D5\\lmK@*(K]]DusBKiSkb]fY3MG[h_VISq:1%Keu\sfiE(=(.aX>UZVbIm?5uK.XRL6emEs,fOZPV&fJSdGV8Y780ucg@&-(g&kY*H8SUPg<R9+$:+f2j:@^dK_VS;FqA_#?2*"9r%$[=uUSXKO/b9C6r&Cj!t\JR4hM"0?DMq@b2eLO$kjY05"QfA(n/K8Yo+Xu-o;cj3CN\Mk%dE&sEAR_bu9r9DY/.[;PRb^hO5:7.0%qXR2>,:TLO_G.l1n@YZWcJk&T%M;J<C=h'nC#_`X5p`"C>%Yj%lXj7"\K:BL=Ul2rbrG/+!gQeu"gp3_`q:"a:a^o@=7PGgZ>QH0%LGn2.Ng,/iA9<0)&B5!<)$Yob2Pdb&bPp)GF:n]pmJbg-B(h'+RG_&N4c^N#K^j@'^n?\iJ:K'MB[Z)*QBO1'25s>m's=E3h0lH1%2<;lYX:<YS@G3+U/)QB=HHOl*mgf&G[EtR$a)#rg-#eYTAD[%a7ST;sg&7\qSWKi1A9WS1:E'V3.]S[C(pc/8&V5p+10ASF\78D&%6C`EW6],->5lBQnVKaeT.4_J1&4Z6l6?`SSCPm%\lJktdBTiB0Hc.*qP=U"];!%6rGR8eRB,)I?VW#>F%'A@U;I]?PKr3<>YV'Gj%_K+cSTo^=.;3b;d8Fr$klA.n_%r1Ag90/g%(QdQCG<1Lp"=/`#J_ngnlKCOpE\p3:*>(d*MQf.d0UDL+/-F(\+kBMoDGcLYoGfLo%7/nt%:EjnEMF@Llob%\/Ehm.==m_qk`rmQ$dfg:$09N'18-4GnJjpsP6k3Eo!XFD,2e1oKBH4678?8pZM\:eQkJY4;Tf`<GKV'40%7<uNH_VHF:7.2D?nJ6&`!nPI(+t`\77)H#dVZ@Qp`d=pU]O:;N\G)6h"3sg7nJph^A>qU"LCFgFPm"Y<70J.*,!^Z1A"Sf^jUHLc%o=t]Gf(!?7"nXKNhRsQDK$*rLgeTONqeQ\r8--+H<"YklhaKh5n:pRlR0k>J.\Y!>&\7.0#$+P#Uu^kn_ui*FXBN5%cRrgP9[1e5%0f&k(1`BaN+X.d9O=!hnFoY2Q+IWK7$M;+q`*5n[F3]R`Z3TL7k6g6*[f[84_\GiTP(b[NP?b4,<0U0[EZL5F/tJB+1!sbDLtrc-%'WQ]HZHb:80L5`V/2]\;Yo+Z8%805'm6g]>a[t9aPJa)9FN]Q&Bg)\e..;-F'Gs5?9"%lAR8lmZVm:nf3C"p0Yna,g@0fm]^a#[^%K2S[TnCl#j5TG/+Lf2+j9@/M$$YmUf'#j3*X_&Af,b4@'C,K!Xh*Iu7<P&gE($eWsiaj#n<RAl5>D$2J$4HB6O"KnL$VLVDc7ZnC%3[V'U2J:W4,3/l?<_G>46h\E#'^T;>65qn[Je3(3oC2W2R%K.^ct90RN>NmV12q`#QBRNWK>d'Z8WuInG-\d#J.'hpj+5F;j=h:r%,QuF.]?eJmU0Lh=P^p:iQ[#bSY";J(T0sBE;.:m@"%%0$8dmAn$(pOsMLq2/^hgtfC5h(:L_FJ/Q#K:3W(A-.;WPWH(X>UT?l9NV%ArfJ75^8J4,-0Wp+RLXYO+f<AACl?`,G?(dBc]q=_n:ft3^A)`RLB;t1^$8sOgX<'C^;TX9N^@s;`.$6_^H[e1BWh?kQ`PVZFD73%FTEnG,i,k%PK5lRiILFK=n2rspf7i/?1GXH_E@4.j@>166<)a3#)qt>WISM(60+&h6#,D/$B'L*h*O!E8WP]>$sil6=Q)CCPWQ1\%E3;p@$$2@;;/f^$!UGEb7:io<SP_Y(\#<3]mm'W2fbGO<M-:T,[[BZ"\^/R(8;)dV_<WtAgED=!$nN9N;(NF5`"==rn!75p^+k@8%9X<eYR*p&H)lj^]E_8k2?`/KE"IZ>^$S92q`s*B]9[]L?IgURDUpO'"W]qV;U*ad><9/q[(-G!+)8o:i1I;YL"M@"Nip$qF$J\$>%SQ]/:a:dRNlb[A%].VC0U4QS`/@%hf]"i^AV1kQV\u@;`.tU=2JOMVe2-2&`22aSKJ8>.-jPdCNQm+0-"^^:):FPJfPc?6BT2Q:Q%oZ]MmF:a%L>9)4qPAG"e5H@ODX%km[:-V9lEc%aMBrFf"B@Z6TeZ&M"W(s':XS5FcRED0Fc?p%Z.AAlbAKWTNp/[6<b#GIqW')s*%#ck?M[FbA':p=+\&oDX2Ll%mQ24<GlnhJWEk=rW>IlHYXY0q89k<Y5l'Y7>TFR-:#l9<`/]%NK>J5cY<S-=I"qf)d*oT"N?Af.Rp%:iC'JYfB?`.,F0-!>E0-"!U*J6RMC5o+WHb=F+-nbPP>E,VnWsQ]IV%M,5(uctOa>3%K:bO#tMS7)::n*-%r[o*uKT=Qm`rS]#O_%Fue4WJO4$bQl\WjKG5Al0A?qnX;37\6HRDJT8W+i/<0')J5S0=bGlIl`E6P?Ro7WGjV4C2Yp\Do`P=r^!PYa0'VVj6>JWQ0^bjDK%PqB;tE=@X14#&oq65,HZc-auO,uHd@ZI3PgbQ/$p.=Te3IUcYeaU/WU@@RT2iKA3qJdrY!'8%R2XO;ZMd9jimC50r5VAn`fDaoQ`%_E'aeN#(`qV=l3>S/'=!Q2POIT%QB7KtLnQWu]W)RGu2;9@X[`)GReAG'RB$grk,:8DMn6*6"3JPu&cd@PaT!c*CUIR*QOE^j$pY%3obpMTbI;)N_\GOF;PZ"#k(Qc>;!!AYHWMli8;O;_f0'5I1&Wl\-[+sg'iS^2N>Z<d0fU]3D6)I:GZO0\n@E+^h!YRo;@s)?Gr*t%W#/aO:XlR;XEbKQdE[/EajFI,/'6))XTYJR8C:tLn[^?5`feHr&^0JL@u6UQkQ7*U,krJ==Ajbg/rUB[%V_fBUe#(\6sY1%Gt.97%2FYG!Zlg(MEkFdKSlj]BJdEb\`"\N"Q_;.\Z_,Ji5FYGt2P9n`55G(5T.n\Z=YQ\?/1q$WEc*;-Rpj0+L_FB7;_Fn$-l$nOb_NUe%0:R\o+aU'^rE*^h>KS&VduANX*:Bc80No!DBY\_WPoVYgYSXNo/?c;[]im_E\C#VR+iHS1*:_;n>-/oYJR#V)E^VJ)L(q5iZ)[-!%[%b2@OeQQYU2@RP1.\0m5QFh&A_KEVc9ctC;%eUcW:EapE]H%3QCYrb<j,._+Q7<+(j)j,+9_,<C9V02H//Ls!Tn$AD[.6cGA&8k%\35Pt>u+!Sa@VMT1lFVm/A,=0JRq]8Y=VS<G66Gqi3`C%>mP$U1[Cc$VE-0CQ=XP@r2>N3W&o18j1'=O#KdT#Es/2t]F:,cG*GQA%kCa/+,s8I#*A8IT$=,gSJd#F1BS%ZY0p3j<J&fng$G2C>JKi;f0O^<59i6p=-$esSgrR^WXt/9Kkp)iA(IUCB;5hDH0?XoJ\<s?a%RPR<3Lpt14$3\O?JTN#>02crl=;6DgV4:D`G%srugB+dKOEIT1n#_]Z`d$R[Mt'%o=IRS(8h5o7FB2-kY>Ha3CCk65h,.cL@e?Cq%,(WF9@mkXI6:<A^gUs7H8\_Xo["fi+dH`:K$$R@iU;<Y4<*e&$Z.QDD[B=-h6h8N?9k27=i4[R1[O!CLdpT^_J!Dfo/E=e@[\de@%(h3ST&dY?>g0LKgBj6_N2f[[>.&K)T=VC8%4>`Ah'j7ZD#f]c$_N^'+I[epF`K;5i"jbY\3iV$lCJ.sSL;4aA#0\lG:mX/WV?gs'%#TtoOJ>53=S1[1<40]0W9P-gr55sh-gaB4kX(bJ"*5E-).eA=#"$kAKgO9M*%oLqSLg7b)lZ-;t(rG1=*Wst]L1ONFN+6q`!8X`_%IO\GDoK86>@Zt(\2_PL-d:1.4h2m>%='4+thHg/J1Jdc%b/[nDMf([L6Jm\Y/<7"+8j4b.$t8$h<j$4mBKuC+irT<(=:%plBa(d9%$%EAl_A;GDC3E89pDH@[^PuuG233.Ql0eIU<i"o@!\Gb.]W]k@(WNU*D5n+qYnJO\U1+pA4)_E9nTdN;TEo\,i]o<f5<H@dj9/f*%!_K5N#uN+<:nn"CRRB;tj:fq0-tL8bdms-SI4*b@:[aE.To9ek-<Mi/b(qeZB!i$u6,m(]bAuEgFt=(PGi]K<F7-^GQ0_g/%;O)>%HI(nrs3Z&#WkSE`-ob<Sh1BqAikEg%IGi>=@8&A5]JBaXi[iruJlL&'mOMC<(?<dLL3!6WJ`kmPk$O?RU`gT5A;B8#)J`]@2GGNp%<At"8?FIVTK%ZfW[UD)ddJ5Q2]8Q004iB0OA_r;)mfHd#Kf/f<7UqQ5<OJfB6#7?<0\CNHLFk22h\>1[;X[`HC_8oN_gn9D-n7<h%FfSo(8sZ%QA@rF_QsoSUCr'r[U\A>SGLteDfEaB20GqU?GekV&94oM+m"d@PPV^4%9:!U=n1^k<i=;Y@hAE\QTh;n2_5JRq@$#H>%]P^".=2Pr\,JmQ9DMHQ]MHf&An)a0=r\]La>^@8$\\A7hH4P7S3:88bGS(b!ES+Wu6_2*q4!Mnbg-3CshBs!BcE))Wmm%4Y_cNM(%)lcpZKlIXDr&TJsYD6[CcuZ,5D)7.&8E"0F\b?hL$t0O^ENV@.\_LPG%rW8X&Jc:3Jg)$S"OPp1HiF(#mK(II)E3m9]E4EE!0WUt%,YMP.V?tlRZ5bC^G6#-]S;aJcR@%S]kmT7HbtPXjeOMdB7)5%!X)MO%hLp6?-DniJ-AsM#-XKTdg-`5hG+B9hqT9KU69I2m68Ku2%K2/P9$teWgDbHL"Q?^-)=)T@KEq!\pje^9P(V,'9@\_.jM*WmXYZ4i<#o,RqC)[R^VF7g'B=OrS/-2k$Bi:F^Z[uK0]CA!)m@6W*%S''.Jpi@[ASqt"t':jI0.L::/&hBN1,^?4b>C\FQ%/HL!;PA0^.qYV`mg3DC2]W.S[7]+inN%j&$&\fRDQt(9!O9i*AdC.sW@`&)%>W(T?ite\e7h%]4k28-CR`Ms(;mQKY,b$K@_%Hen"pj\U-)>%%+Gp)5*^<'"Us*:kH1V7CV9P%oV:D?^c#V?h'c^(?$%9np$lkR3%qW9tcR=>;6I%GPR&NtXNOT@a2+C_H!q6;2Q8dkhAN"m.;,[LU[3,,tKd!J/u6d+VNl@\&`%&8=nk^KUR"eP4&CGIlk1<uB$Ho]r*%cMsj>bqK`7'2?\;SUh1BkECo00?6*tZ(Of0)k0d4"A<AHl`*n];\j[`9rSdia/^L!0?7k.a[]8i%]`UnDQ9'7#e`#]o^Q,I6H?%A%Z6kY7gu0W#+0H3IMe#ib-bHJ^A>V=>W^c.g+AR-`n<bH\)[+=Sk_ip,!L^7D+,"VgnHrnE]iu6Qf#;5R3(A#jieop<1g%"STi7@C%56TDr5ZYI9;5_2P<QofqF,<d4Pp&r)/!'=2X@o)I1aJ#)#:rkd?"YFM&^mrlBsLW"<u;'?IF5S5(`hApX6=Fmlj[_W*Beo_5E7`r%EC^NA&$[-L@W\j'0jr.P`nnR>QR?iVj$nk.O%`=.+dGL&'CA)-5kEhR"A\L`Wm$`>*?nar`8kkA+6Y=#gkUQI#jtq'](gi#cQZ>!%JTPeHnk:Dm1G#46!jgLr,\M%I90O0(h?'E[eV/o/e7\$6!i)a+7OdTEi']4ShM/NCjGDkV3nEe*<7QK6q?^#I!8_UX(rPH7?.sT+%XdJapWgd$ec/u-<YpGoS'oMMhA8??E%$`f0Wa:n"B1=-(*'cYV2RQfo)bfluW03Ja8Y]9UF:u\Qgq^.H$HAR"Y_T;b_pGPO=Z_FZ%Oss%_%O2730k^jH+atgM*`6\*XYJrj?@?e#UajRgS=gPg9#Qb$N"&IK2o=l'P/uT)Z;uN3Qp;.#1deTG3TsRZPiFmZ;2S/6IM!=H%Od/NLaHW0O.tf&n0XFo&Ll!s3\YA-rqJ9(O1)juoLENb$C9KTKjK45GEmB=<VBQ,^VneM,nVe&4<a(&f%+YcHmJ[2<oCABShj]uQ%S]NP0b@,T\R"Sj,5eM=R?t:b3,,kjaZ8]CsBFS@OSpfp]pClRVHO15(_++J^DW+Ra.SClQ#3oe8`DP5.$-#!tKB%4f&Rb7:AJ@l2%Sd,Mp.0'f4C*'=D+KFMoJj<SE8$[kAqQ*N2HV55j"HOpK`uU8UM%J-]%F``TF$dAW&mL0]BM]8(*BRU')^-.e#0$WWm>-XH#Xlcc%>7"j(3'\].-L>:1\\IL;Kas"AU)]<t7P6YFhFrUqYo@*Qb8+XFhh$0ld3p1SR\^qmNbC@5Z:L(Q5aM%or<T:=M's0CHP2Ye":J_Z%Lo'.*oNU@(%!F9T/lq&d_LgGmYe9H>`QtcA]Indp)oB)!>%iQ\kA]+k`-XR9X8W?VJ_<+RD:GUO=TaVU20&9#/+Xu?C2`hoj4$QI%/9,rrKJ8$E&KqP%d;D_2!O=aa+rX$RU`NF1l`gLIDa-]W*\)>*m&]3f,TJG_KED8SPiYo;<l>,](baF2@>pML\ko-\F!](`^p+19%!a1bV"f@HZ]Lk1Ue$E07#8B6r6&M_!9>[ZmOhjm(5Yr2QWrXE4\Vs_@hWj9Vk>0)XrK&Ca(%Xk$76r>Y&bV=84X-)_S&<DhS77CJ%?PDlpXL_J1>b>.$P\[s<C7H-b^p5k$f6e.H8lr[1OBf`g`XrZ<('%$jogt/H,8E^NQ#9+u\hc9"K\u2'oAWt_']/^k.A>Tt:t$%u%ZQ#D[,_A=-2r;mX"KBZhWo(5me"YjC6s+BZ2Z`k./C`E46c!J81kD`C!:Zt4/n\rV"^'%N0@g.99&i7XIC^->F4FilnhKW?*SBg[%jGim=-/&'<%1b,-Cg<dEX/kW4E@&"gKT+i,4NOdk0G\[.NDFO-!T6i-Vc_!$$d?&PQD$d`F=#.a[DXa67`_aXp0A$pTg^H.(W#UO%Z>E=I(4+AX-PMC<86/<8(QD%LG-^@5jLgkcD8).t@ki\M=FiXqV5:W,E%"*3WGO!j=Zd<*BdRQLAd\kTQcoR<!<E>nM)$D3lN6cP%<a(g:JK_D-C'N[]f*,`ui"C#r`7?igo#Z2-7&\6inT^\8F->+A%Z`Q[Am!>oP^2HQY_o\l4m!E>k@H.)6sSg'=r=U\eDLe%&3;3s%f'CmP8U=?Y-bD!_"Bu3feS$Ii,,NtlMB*52.FtL".#LOfgIqLRqpH9$4\,g@)K-E1E)2\R8rT["1(MMPTK;A>[:;[Y`4&<"UM5;R%^!YR;4.]+W9WGs?(pbG[KoAY1><kKtPs#3UfJ!ZRk+RZb;5SUhXf,6-N:4o<10.hgYtRWSBo0qu[\UN08P\$9NJItG+U_l:,7cR3%F$m:@4<t@:;P_F>l4=8,;,A>fqh3Q8N>erri0Bri#ne7/^;Y)=Q)pd_lcJqG6l@)TeEY9cSGf\$QAr&?.$XRFB/9%kA@Ao#N%!2u%Zl;sHLo5'ts6fJYdVa'@H#%_SdZl_&9NHZ]bCdmoS?+OlW?BF5D&V!l5XHmZ[0<8OH:%LP&6:O`d]D@/(R\74ZB[N-f=`Lk>@ct#%P=;!XL8\&78ofH5\ti;!n"M2!e:kmjC1gP#OMYP>TH^0s?-)`<j^fYhb^ts,8-^!aC'pgjZGr&]C!92Gn<^MI)Sa,tRO(P.$j-dE%m;bi9f6NpM+#(DLY_oO`K^([Y2@>R8S8+L'`bCFo4a<qfL='Xj'ElC4<Q#FMid=V3/+5X:F0$Ji>)Y%%i.,UCY^FB!M]o0\8N]G@%aJM`#Ie:G8^Kd1T5J,6fp"2%H$^<53/4h`Ej++*1GnbojROG)dla]n.%=fYPM#<IZ2NbbJas>5C<9tGKR?XZqjU[C$`1'i[)Ii`F%$V6pkWh+./Fu+4Cag&GkFN&@/>,2$V'SJpa.^Vu@q(Z7q2l.X]0Lgb&1\R*fDkYU7GZ\8jPH>u&&O@t&9>u0SbUcOIZtgFu%5a<b%^_L7E&ZLG_"Q]kEl8mt^,J9(gk^ZVH;e6RWme"G=OV,#Q$P*7^,G6pag'B77bn!;38U!c4q4d;$j7O"J-J,Z$^m.9T'd+`%*X"VP%h-F]R<5c=8G!)h%gq1cFJF^iu-aNY&Z\"*#:hjQ>K-^V-GsT_!mh@+H1Qn<_(^qQ;9ojprKIeYd(WJ$S7&Zc\.no"IdP2.@3H_+t%$Q@kjedkJ*Om862>ALJLf&N<M1Q7%EORbD)_k85,pg>k`(X?"qcDDjO8Q)Rs1K)e;X[3!D#;L)]/P<#cKE6!6L`hk.0(O#l`"c$d%.T+<?KL1KqZMDo?TLsp[S$jYQ2Q>1TL.1W*_b*IDO;="J%>u/hlRM+i[0WSRN0)*nj'(\UegKfW;N:#QF;eMc4]P(U]VoPqYpAeX%;@M,]1QDTP=PUnK:TkG1.1Q][ERtb\p1.e>8lhV![c&r/%MRlRRu/0/>38$C?7m^BUV&sYnXZQ0L7/hG)1ucAU[Esoa\+<srS)a<%%HEoYZhlQb,?HF;d-h`D;8OP2Q;6S!JZ7>`M#kF,Mpc$8Xbm`s!MR:;LtMci,/ggH3!iC.02'%-hKUb`RcbKH!p5A6RkU3H9dkgh%<0/6N2^^!%LFs'O((j?QO-qO,ADWaY'NDQUGn\$#Qh#iSZ/.[(37ZM5\ATa^4K'"3$n&et@+5YRcN]-QOQ<<Sb9S0H[2S>_:?_cM%;8.D8IuKbR,TBjO3Dlq\KM=2.b$_kkMKVWHau$)Z]UW'M9Ib16?rYZ&k9F:R=YE>>e[:5gXru7F'a/>iL/mJc+EG'JX9GFp16*9q%7qU<@.GJ:;9E1^nDa71`qj)KE34[s0^DV&92hPHrJgZSa),q.'N'0Oo@4j6I+h>[u'n"T'M_RW3j`k6f>8YtlYdc;Jj+q\b6lUP+%$l\NVR@0(.QYkf@='^!I9DG`[W@6Md\TC"egN%f8ArldDm3K`di\2n0FbTqSl.3\a^Sq>VGXd*h-#1Ye>Q]W+4&M+q'::e<C#bSi%m+.80=(`A_>gO'#eIJ'FVMUmGChJZIFn4$2<mr2s1"2D(2d=_A"B8kOeCD2@El*>HhSZ[7<E(@c4k[N?c!1?R<IR\d<:Lmd4G.aM%/nUn&+4j^j?C&//2>]+Eh@_7r.FlP1H&[FDl6XKq+L-m4R3=(#RUL'#':fk\R<RclhX/(9<W2mRR`c8s$/T5/R@WUKl4n,E%[scu%_DpcC/TQ;,]%%3LOktd*Y\Fo<_mK%l"70SH4"H]='bu2(F9J9AQ^f\3)\ADQ32WP"4R0JP]5r=c)fsnp0/fd4aD,]r0J*Vpe<+b@%[Vg3*qQ7`u%00=0\+)LbF"cSF4OjUGlS3T=Q>D#tZE25_Q:CIrkC2hol_R/_gMuKH/$4AX$@-?uIMo0$"`6ITY<Bd:<:WW4r*&0A%2_&(6m"h`T]RuSQoG4p'aM8[<aTWgrpIFe%1c*IRU?B(O;-2U'i!5?;gHKO6[5Ki_bKRk^P\/QX&Df^dopk@]9<7"[`!E+!01V!a%96$4gN+Qh?R#&t%5bLsDIVE@bL+tp28JGgbQ/457!U1fR''m2J5h>&CanVG.:2F:WrPtZBi\n7HdGK3tn\SR`P+jjK1ZZ/jV+`e>%1Ig#;1`i>Z8kSC.NO:GWEiQh_LmCCWc%M0oQ"%.W(_96]L:^Zqe['2FL5AuhmqQ+61/cT15KHC/ogG'g]P=8c35/R?[PX0o0L56"%!<uIUZ*,Eq%WO81p-;KO!?%MejhPVYp6_1SasA"I5pkil)KPEMYmk2&dW0$`*Etn>%bh6_`aI_dbHe37(HN"V;OG;a'd-O55+j<D%UEV6#nf5ooElXi&Er$)nhHLPff?_bXoD2%=$&/19\?EfQ$=`)Z(*r4Qcd1"2+Shc\"-p]T4<b0/=oQD:\Rt%`3d26UO'VjWJf`N>%0gc#?AB\Tm_YGh1/ZZ`#.,VqnNe]s,n@ZJZ2W:M,OLOtE%PTYtY\9d-"oYG.[ObGg&Y;HVK"cJpD)GEDE"K7L8lOAm,*H%9c0LN3%$N#@@Iu,n.FD"fK2B[#F_Q#.u+Y$9HnSkbI/06E.'+_!6-`#6O-B+'m#DoAoY&]nm'5eUH0lK3!5<Nl.Nc_GPMimN7M]BX"%&Y8$%JT@mT?;<8_iYGfI(G%^>J1se068IkSj8^8@Meb#\&0<47XR]5c<>9u_\?m^t.pP1u8P\eFdGV<Bp]E1?K8p;b0*pN[m%dM.%j!f8%Mp*Q]P*HDO%EBABIC5:re!mINJ(ZlMmX:<I$^"EtI/rk)$kodY5u4`4`#ui.&Z/cbIdDkE>B%VRYA![(j1=?(j\8K//[Dr#K9VI_%jkQLrP)TI"<`>H11I?*rrK<0\j=OD31F#s$/"qn?78-bj;IEM/-gE]bC8U`l>2Oju?e&@%+.iZBLBW+oS3A.8RW8[n<Buu=f5Y@>%-QnAjTBF(m/<icUN5I?Ed:t\F$aOC[;l6sd=+JlJeI&WX5a]PT3)sX#E<PZ/Z!nbn6ub`_1n4Q6G4RJlm9>41Rn>q"j#ScUlA8"#%/<A9e+60b>L5VY`Uh<HTlL""7gA_SXAX?q-LDfcM7*G^?3Zp_3*en_+$mhaNf0Hfc*Ki60ntBT^%\jC%Yr]G@CWHloFfH5pcT]L5%PbL,@dKa*H#\P1oAWFRWlPbB7k^$^o%$Zc'+d!gS_.g)J,$D"F.^KEl-jUc.[%&'"5QFW4dp5.Z+TfNf!ZBB6fE"Gn9*S\fS6gCX%_s'-s\sH*/b>\dq<bp>pGY&Pt]1NSB7S`eeh/H"R[NLca=e/c`"s[Q)^&_@iV8:6;ihWju]UY%AX%aKkPDN?!hDAYRdRZ&X/#0o.%:L]PcPnrR8&i\pSnM2gh1GSK)E>XmS;E3C[-5HBX/IN"ligk7sbUQkM>[BG/-rJu>*R[1n?JWE<'c>[>4bGf*JK>94TSqoS.V9-&%7ne(N/pn3aAAt5%@9.(`U/<,f3Q.@CM$I5bUVc:&'R-7f/EMHRV4!SK<TC?&B-JhtDcMLR0o#0C1--MHKA*I6P0N!K.P2r5Aqn'0%JnIE[Ii5em2)*iI/,0fhCBA&k6t.d>7JrZK)s01l9*(n$EJ33td26H/-E4P5AkcF=.n5)ld7F.bFUm)4F#.AGS*b-9L.l(pT#V5T%46S-TYX1+WL:EM'cD2dZVdja@?01V;&h"U87tjFX$PhW\D%*AN[7#Bu9*)12*7;PA3-U']2Q3@WD;6qp^akkd"d:\H#]_qZ:RKAi%Mc^dI=FZDSePNSlTWDZToIUF!9+%gX,i=):2#\'ghL-?SE7e1a(ThtmjK9WOEb]kF8`S48,V16-:6oWnPkQJ(S8eU`'['^87'4Lo%X9P@DR-,SGBP_Yh6l"X,g',8Y'hQh60=K1L?]:WZ?`mAUdk#FmS`(Pl%\"$(,@TnLjjFNojNM[6Qc68:+f6L_QaXQ+Y3jK8>03St%-gf/E+bL.%%@K,(]3#4K&hS,Y=<cR[(H>>1QV&Gt;'FrO&\BXgmb$F=:Am@,F"hQfi=f=#"N"I2bdX3a*s1oT%HA3;/?SY^#8LG*%qS!tL<Hf`*7LcZaMcZ8Mf9M''Lt0r]X7m>1g3GVc%#V9BirmffG_;Z:e9@fRf3=reRH5;:9R1PBnP*T3eZ9p^+4C<IahdU.nbuM:%/guc'8!k\uJJXo-@6"C*p1aD3%,Q;jG@pCJ/"F7BA:khW<_Ps9:7t[-pFRP?.ZNC=,r/VWBR#mq&qER>clQ9p,:*LE0GK@t0UPUk%8@W>e9ahYRCN0.MfmB&2bE6<qHNg[0)KS^VJ%H4?0g-K636!Da&Oj5,+8VrsJ.pV&\%4Yh`Lk"594qo=3-b59*boG0?=<C2DO/f!%B5R(tnFh4&)YWtm#RToY,,+5=Oh>e!?fY0(HI@Pla$sT>,'^ZX[)">mGh_bICmk,),$J]=e'd1VnLC0iP?6:>!>1iU(RXIA^$[:S%hW41k&E3e;]S6[2U?!g.:"d)dqE52?6ih"T`hf`ri\Tio*Q5CTV2L9PNbgH7I3)DRKM%RKl^/@KXm:tVP^!D'O.la/dm?S3<`f(m%4Sl6s<=2p(ln6S1+@hDF3F[:enYbG;?d&*PN$?gWIFTf3kV:Z*>e.l<c_L4.P7>I,q^):d.gl.GL<c\G3QSB)afGguLM1c+5SVO^%>&5:J$uh0dIA$isk`>V]!]XP"M(JOY?4Vi0L`P2T&RGAj-4@,pVg;`CKMg[9@R0@Zq>M"McMhg-k?*t>Xk-Jl8\ZqkrB.YZ'.6%c%,EJ12@<lqoXt(f^Yog^saQMRkD<uYI3\6kNT39dCWY_!i4cjn)]%2SSY,c=A7J7g5nVjZ$n1O^3ate^5bj(=kIEEX>r:^R4U0&Og%EeFMd`^XhmN9cBibEP:lPd";2/na6_q@L]'$D<KZ7(#8TOQ_T2_P7[[plmQ!7T$g%`i&[FCRl2La.kI]Pt"V&'X?8m7bh+_-%sde%a(-n*Bt0;!W5*Zl^5TS',l;\+gHf&&Cl!>JGQl9)K9<';9@#1YC%OA*6F@@=WHi"`<S[]1Q<qaJ`>h`5+!3:bgc;>P@8s95Tp=J2%[$[AXNfgFhj>>$scKDT+g(#;Qa[7R\.(].(bu.ZC@\3olL0b/U6+qEj*dnPlatgi\[MD1a#=j'Yg%VK(9d`*ESZ55BX)%/=64.Qp%I[.ZNRfAQ_3YM52,F>Mk6[.UX7t\61@1HJ-il(<?@!j'%^H)+e>9Y[^&oDPjbSaZD$PQF'#S9=YRouQ0N1iuoSR0=Q0T1ZHSVVM;%KN]?=na[#\3rrjB&^)7.G[[MH(!@]f4:PpjKV1FNU_VW2)D<#SA,GXJ?DP];G><4&`_6#e[G*nc4CelHkn-"I=;SE+ihJUGKWLPh%aQG8*CUs^rof/;B\OXun4O+1OLE:Li6XABC9t@^$I3gM*>L.CR(n/nh!JdK929@qATZFXEHWG8XW.`*C@\/"Q@+-.EpT7F_aCK:k%2We-Q[.k0.]hlAQSh2,LK^#J(^oL-\m^kM^Y>ITnP!101"@C8Yp?+m3fV8a^q-GE:nb%;Erq1!pX!Ro-c-NqG:4sL:nb7DG`ENY3%HVTK`m8"HQs*T*VL?&st"P\IJe>tN_G7+F^i)j\M+GEeS*)pT<L$uCHcblfLkhM1Im+"kGfBH<ZB:ncXU)!61$=BhZ;Sm!/<`1u1%ZC3Fjk5+05lAB.uH?[u#b"?,>.5lVse6ON*/!25iN+I$i88NV-[8"c1B&m5fiRkIMZK\UiM*4_aXKa^0-\=Q;b@:bja+D+J[EF[?%conTL'%Q.O<V4IpRH#=Ji-JJT?-ucS!^q9.T!@X25mO#Sl@jVQm'nC[@"539SnEI@6.of\]YHXB\'[H.4FPQ!YaEfaltLnsdit[4%D52oY&'aSbM;QA>n(p('G*k"fPq_ob.;RKR"3E+UdI;Ymj'<jd.K.6m6aMqhN5.j!CnbujNhDGb_-W:bZ3Q<eUD>Hr(Hbfs(Z?9e%PE=&qNj^;rY@>]bbC4q\WHkVCOS,KO3*C3'3&SWHp7cs,]]U.KP-*4s2pd$6+>T0;<0h@cZkCi69MC)td-:LN(eqs_Q8"Hi3q&]!%Kt;PfAr&5TPg<Y:."04MUT0ZM/9))(:!>Y'*eoHl=WtQ?c-ui!rc?tDY4mHlR0J<?:Oh9n_7b,,c],+")I'k3p-#(d>3JRU/qu%E%o[jL*SuH_hK;V`/1qkGO#P5*eh>9+EhFHO3-*I/aRhmPkmLe9JRGeZ1b%<<.[j0HUWJ@Dq_AbgC\FUA=fSCT'YBOfN7(oe,'Qbcn%Hk.1l_V7Kkn8X]P0^K8#Po`Jp);a#[YLbiOGJC>15N2A2n@KL8^:3=HLZm8kQ2<I>HHNR$O7G^4LUaR>Ctju&>o8RJm]5Xg1Tdg,%fZ4m'7@*:(W7rSG>j-b"&^eCR4hefIMjocchp;&q/c>%_cqIEOJd;jN>\]$UYcoiniT@[:0[-C_:Yr<e6GeE_@@`!Jd9Co@`MF2S%*tKn-s6m[b_Cf"umb\Dj?A:#\NP%1?(0h1[pDX=o7VsNNUQ;E3Dbq@P4\0)PA&*m0X/[GiH;hY%>>dcGO?=NsSO).-&RU5=$XrS(%&RF56l,:c:/.or[2S8];7No?(g2E4kn+7qpnP%0]`V<Mk+u74XHeCmAr6m-IlB$l#$Hr@+#VsWp=4l'Vl7n';&`mTVm&>r=k!Ml1%#_soJSrk@"Y(eO6M$Qt$SeA!%/lU*91%)eV8pUo<A>i/N;5q1A%SLJW8J`H(#n?5K&Hgj@Q(8]dU`<A[m"Ugr&l0oL>[([J3fOfm%3J(;;1i1pB@+T.#'mE1S%R/"rks2b9gLR<6]tBSf;[UJma+I\RrC5Y8DI]D>8A)0jGuaK8bRi/DoY=Kn*VFFRe\K<7DphW^eZcbO%;?uh"ddWZq+IE/AK?s$M6;SCApP"mNCENedCuf>>iR<KE!"5%[!HB@0PK\f^k@R\Hp(=P@NC5`g([rEIJOqEgS0_Jl]:,L:,siKP%9eggg6?YSe0,>$jG6s`q3>aL(N<F5%(:oS.mHLOVlM'Jn]a!`P7Hmfj^E;5H*SrE-'kah_;Ekf<1aiu_e]N5d@4FN:(In0f@GV;Z%JpqK+L<URfOqY!H`t3*/;nIA*#[;(lc"d',)d-&MYr00K,q3P+VcDQX%TNO+QW:mT*b(%lN+kTjHe<dHGnS,?]P!Ze.HPfOej06P%79n@''ib=9W*JRS,;h^V&Z]cHWED%:IK\>hZ9GJ"f\s)gYNrr*/X+\_AaSLNpK_`$//t'sjS9iL9Y<[!r9eHYb5WQ!G]?3'Oc"q&%lnW?^L]U8=DsHXT$]uHKN8a0:RD45REo?8TDt(V<lRitC'%0Dq`u\:VdQ0$a;pd&4m$8$7=n^H4q`Z"'$qT+m"1\K`)3Ann%@%=E%WeW<.b6B4uN#Y29RY0bcIK3hm$GhY0i%.b^I?Y3O.mJR)BF@A5G?_Ma*[*R)HuuL>E(<u_`*\9BaJ9pnF1u5W$]lEeN[aH7A^-AX%V%e)*gWt"DF%?U+,mC#'8U*majUeT([1O?!cr]Y1qBeF"M)uF_8=VRh^ud=Z0A]BF&#`Rq4/3c_V1uQO$8G+WpGnc/h1>u[jt^et%hdnu(.N)),e%1n!)*^prJ*h_6c7>Jm5NW&nNq:%C]?ci37GQatAoaBDbf&h\L<1g2?rRiVXK9KY;@HFT3?U(M2Ni(k7*OB7mdiXB%_(bf!P#'Kl9Oj+.Z9OjR-n9Z$Qk5UC$0dRG^l_\"Y1cg<TF>2$oe9&bDOmOoN@VOm6ioLd[df'f%8mR+)&NWjCJf/@R"X:OX5r5a%bU7CW2!fqDRaB078[pI4()%"6B'nrYVSYj\kq+_FKG!?#`afa+adX9E=UeQgP<UH-ZqSk+dn(8Hr>9JVTmDU%lT"#-/HUP5m3#F6%K&/G,/naU'IUgItZuP1JADAB8,EC\*q*6E9/GLmB<>"er/AsQccBa_WMKbr@onB^D7FK`P4fXUbI!48C]pLOR>V-+*IEV@Fb8C/6%B"g0D6eF/'<6O46Olt0sVJVW^%0[E%I;2JV"ISfiX)&.>Tg/.6`(<$tOs1T9AVRI;\DgAD38KYWA=sAY3YLeC$[E\?)r&o0f[qH/%)mgdO<I>3(GFQ!4Ipd(c\P4B=LmF@d.#DSlNcBLG@F`QBg2I`qc!YRsKY1$gpIY28K;=9\(a"Y;!W5L4q_$uI=K!Sg`.[OKp9`j(%g`C\'cQD1nDobu$&9tin2(^bt2SO`C#9W'r1`sg;2(so,/d5,E(,RT\(UC$ZIc'CP6d5I(9HS'X#$I=(_A&UD;b'9.IBpj1Sn&1^%XGGp$&D_VPd%4+:34oBkLokFIB;U&!ce3;Hf,UN=H$R]A&JY6-Cm6soecTuZg?_Oo^8A<,$h)HhT)@D:BD2a!`STm@<<Up_jgVWe%@8\)5CIMFG<q*e9?-)X-/o1\C>T\s]oGB[5:n5>Jg00LS5DSeQ/$S;6*8]e:B.$B+1n3-l82l#o?Y20F8R4=LKH:F0>Ktks((S)-%Q)%1LSg.GW7b+n"?-(cNgXrpSWJh!bQ[LPJ/)[MsA%.si;noe@g"N\%XpOfM(B+bZ.OsbHSBgi1IQTu(JOLDl"S2nuQGED`c']*7%Bjd*T])^O?6%R\8Y[0*L>"r)3L=9tF;9^m.6'd-@8aRQk-Di-@,Eg_CRZ0QpU4PiaP6\5$KK4+K0qQW(<&Y_q)W*95U\D=mZb#=]%j9(kXg2p5dZ']35cAi[,!$F..qpQ^b<k!FE`);k*@gZ?G99/<=Ms5m=]Cm:a@9?jQh3R=3pZY08f6LkPkGB5o>O8O+WXD3ppi\+,%r/&D..a=PAhoEV"@[2rB0lln]qr-`Q73hWnVZoVLn1dNpc;<E(*HQ]_9<-mjrEM:i/)&!lj\i+#$2t:PPh\WZAektE^"HDU*:nL-%oF5Stm/7BoGMt3<Et/:/rPrCGJT+9tkK@1TiR0\ph+^]2VO1YVW+ZLW'&#,i"H"AMP)"kXf:mm/p#3pB:%mf@FNU'Ad^;7-#*/[N%*n0AjRbQd==Ynq07Rlu.-lnF\A';#okkY2TRK']RR5jDc2g7$N5@BE])8.`V0Zo@^TkD9^a6Aat=ke7Hcq#GOE9bC-J7+@5:j<R0%L]LE(c-ss%d0f//7(E9/JjcU<$UH!5Xg4!?2a=1`?CndsMnm#`4qB#=d4Y=7C*4'`BLt\elbg!?28[.4Ol0Y=&fG](`!H1q?g%;6%]K*"Ji@DTiBK8:b&OB%<='D.tSjFGh\m[bu1\cP&3;>eEnpM&pH:?BFqbOEc7%q]cVWOe8hBL7uUF&u"M5Woino"dFr6')[kRl`>%)iE`EF&,4L(\7RRs/A>S?T55Y@WBId/V.T]c,OgXj\GS1p1PGpFbHirqMN2@6`k^Z)]<D'AR1uK;iRD>6sLFYEhtI?bnc,l>$m6P%,;T%*;%(e-@9Elir\3Don.*gRHUP8pSR\j-i1aR2/s71&A;o@<.Iq#2QW.Hc`MUR)*Rd/VBlkTGVn4W3$4]STC^$fH`c9%9B233Q%CZJ0^R`M_0pC?=74<G<D7L9ob<+TVb?#c:?P"9cL9l_aL+g$E/K@\M76:fIVU=EI<)Qm9\b8/1QQIcNSGp2K3Ru/F;3I2dJ64.:t%'<*uC-TdZQd[1X0fe(`)+FuDZ-B`C-aI^UP[`;0XF$H8V!D?s_($A/R6V-+"7i)fF("mW?JnjC9"3Y8*FK9[SBEk_;$Z+*+<D?_s%\Tu*QL-jP;SA!SJRL3h&(i&RpI8?C!'e"PMEDapd3@cn5VI\t8Vi,e[/)d6oo5KAaQfU,)3XSSj-?m-7JrY5+@>p4(2A%K#<8J3>%L^^&DC:#gagFsrYbUW'9\+ek0VFqSrSZtkrn>!4Z1us^j1-'T(*2`K<0iOF!3-Kf5>J\_79Nbk<=BQqK82/51<t8=<Q;Su(F(!9T%M`TCiDs2Fi8>-=q;CG@bN?4&dbYKL)Ke=QrPRq;o.QD9R$<-mmD;R<r5_\-rlk'"C_QLa#50=Yu=[>Y@MH*H#*g.GYAu[H"29@_D%kofo=K!)2<<FnTDJ--\ZW30ZtJ\5GNEVOK7r^%G0&Y&MeeGcgKe+@.E3%3<l+j=r+4^6d@Z)C9/YuJ%_GtK79][<uk5e"am$$@S^%WSug`,N\5&+\Gq[_9);N3[dY520a@@o8,DPN49S?P<hsuHh[khUk)iaZZ[-s!;`:>BNPeZY\JcBc9IiN(Gq]2kkbNRQV0`_W$jWk%o-V:s8Amr^K<aW@P)lBW*smIXGjSp4F1K+"Q!EGm-F`1R@Kp+1efV2$(Q:en/LI8dKXi'dn,1Ti.aCji&Jg5867Pes,\P:1R45D*%H6g585DO34K69JebMed<VfbC$]pOqTPSRg@.5]=!JnrP,*coL>?I;Y"A>ij`A0/.I3RlNJ@L>b3<dJn'$9qK\QC,Q;`e3H+\j1#"%ZpEZuR'a:X?BTB#QiYG]=3F0f&n9<LIEJAm>#F$36?.o(IR_oBUfXi"8oh/\,o*^57d=tFGS75P*Oo!aU[<SHV'[?B^;.fTOl\tZ%^;1ACY,fh>]ZKJ\KhX`UV_*L\Wto?0-e4#LRf]F=gj-4mr3g"%)6G</oOur,TLfJVLrX9D9rFd8!eh%8bcr3,9X(CX`0k7a8#!uH%".Nh$U3<nQBhpNWNBnnTFaU$E4cq"5WptXI67J)am$No4@uC03>YZ3/OTL)L$^VT8#K_&-=G%\XXQRhEohZK0QnE]HJn.eW7[RA*%5WgHLOD>B<<GA,Km?_d@Po8U<1Y5SIg73/B_:_0h9uX7dhEp!IO1[#:(OZgPVpTLOjdK4m_DQ@=+dhCp7,X5(KmfcMLL.%r2@lDa%fq32#s$VV'/uo7uH\n:[87BB".'q?HZH<N2gtFo_m'3RpglYYdiPWKs&aX;CcsGQ+:,EW!'X!ah)atM#-oH<I<-SB4Bi\Y]aPP-p%_bOBTHV(^UG0u4`i]fXoF0^/`pXLJE=82W:^.Kn5abdA\9]?_r;Q.+'_^F1=nNOUmiIL/HEJ]s]Y.Z]7YD\UOLj"haI*B*E'Gm:<%&`s?kpg0ni=<)B8,I2,Z*Z39+?'lqn<7PCNs0/R]4#Z>&[ILB(T$IZK*0fX>fEeY(Ep$D\#4\PC_8bHC\,LL/9sKE!k:PODQ^*J'%6#XIKFkL2uY\;BXq/EX\Q!!6N7SjVEXq3Q&r],S:?tfc4D.IF*PiCo<-bA"l.pa#m)$q?U=3<;6\oVt$gpsE=BZOuDJ-.$-\Eskd%kaWl^6upB+3d8qV2B>i'T4KsYfG6D(;$oP+b<("da7]r>Esc7b?[Q`G%@;4<&:nc&Gft-c$$?BP#W<]=G2R;\"C,fO#lSocMLFpA%>coO1Z%[)!'<juPA6c3c+qaN!@SD`GO94ruASNW._k(-D:tsMaoHSFt[DS0Ueih:&O,),86[gRPKp$.VU@t>6#o%PNNDoPi%kj`?%r-KQjrk>-),MRd:j7($i749Un'"(U/CVgN`8)AME7i*unWs_71#U.3MI%HNE&iH]@n')9u9P"oX<t9#hKk`frKAD0*DV85#A2nH:%UqsfTUBF.Y+<KGeoRV]9BkPasb7;@QEESe?m<$9]^)bgFM6Y`Gh7'W*oc--lj^&323:BB`q*Z>MDnT*YOb..FbeBc]q[L)@hZma6%LAO;['2jab7opBi`R>!4cDGiKF4t%Ul<3b(ge^+mL[temer]N>M?!Yi.^#G&0L?cijkR%EdjRE8ga%[*UZ@<P?R12dX1<ng-7IZs%j6AVSGciJf:R6VY[A<b:0a8BOc+Zh`\7W[+(s=F=1,Z6u:>IOHU:B0Wgoa3(,'ZdU_oufXVXf69K=KZCkE'"Rn@tn1`J^74@TZ[n%%6Ia5d7O!LZV:'=/`ol"+CBdpXcdcJ[H77g.m9"k.=5GZ%pOP==&N/"NlTHLnF^eYdlup.m<tCp*ptrp_;c>nO*\Ip-g#WI&>ckR%rSD)D4"b`l?,cTZgG_saZk-3JY4P!QgV'lj>-9CC2g>5UrH>Ak\rO==qmt#GL\lG[i*fVHY`mm@ncp&&l89qCfU+WPg/KdV>Ia_"%?c.%oX-$X$O]geB6HlYH9nZeMLa,flacCikKJ"\r-Kd3qbo>d\kf<7M^R[/pZ18##5XP)PTP!UUWUFlJI7toMpgq!'7^umS$_=[1%e'k8TF@L;h@<o,"=M!8>O4C=jq8I-VMRi$B.[+]^@=tpS3r%^A6K=KraiC%%:fCiC]rb/^>#*e@@QRHJok<1:,i-e8(.!hV[;)"R%!8%bZc]CTs3o[j)kRU"58r3)oI7J!;bY/a0ic@)p$rZtHV"aWTJfJ_OPjJfu"2s)M@'8]G7nRcio?8+?Can@9O><)_W+e\70*]C[%I6ZRb/ek'6B9t6]?A*;M>>O^[+5S7@b;5jrjWI%m[(O3on2>!0Hem;\?%OH%M<R>2^Qje@Z"5^lfWXO&8Hbs!(7nOCf=gJfB=&/Y%&WO3P+6Uo41\jJa,:lkXN>r[n80g<Zh)")2g1DcBB=IQ)k[]2A*G)J$P=-?/q0D(.6h^A5\:qcj]I(?\H9B</m&.PBHb:"/rR&O&%Dm"iupZ(Xirs&KmFmLb"(YK_oeWNPQXo%XNl"i+nkk1(7%B[ot(RF/TFuoONV3]sL=g#9K&$.kZFC.V>;,TNjIVo7[k8cBX[4gn>%^m(R:F1)=NG*]%S-j4Q/Xig8t=coL_DW&1.'[2ZZ6(oRt\BorJc[C8tR&#uSf&V8R%nLu?F@02W^r*HV'(`g9^>IC/`*tc7dWG`X%9;_]57fe!$^>-`R?^CP=&dA#dC0du_.fC2U`<W-E3T=j6p3=&*[U2U,j`qttD->"g28-]YXFAs,4c`cQg)jD-OSe-GfY4Q@'+=6(%mOI\Fi/GRG#4QP;=]8%<NuLf-%r(_CX%Opm)bZ"6U\oOB.l^O,*-'i0=&fn-L*AjiY,sNC'kT1(A/W\%QV*O2?t@dYB8"L18Mu,A%r:M3AmnKp%Tb?Q]..bf`=+RH+'\%(`gp1><E:<(\X(rIC[<[>^gc+k*cM<j-G#\-_e5<Um5u1NPF5*Dlb=\o7O<Qp6Q:0W`pr0>Q%0$&p^3c2*LT"C#Xcr#46G<DDOg5\K0oiQ1T@d!EdB^W#-Q^Xk!IFD%t@HI,i;fQjr's<]pdLijSBJ9[K?f$_V6=,2d+X*5?6=>Z7%f-'N=e3K]dl)*Zp/<!>7H?n%d6sUlj-E/'FB^md6J0`OpB\SFg4>JS+2QYckEDD$KF<L\dN>U=DS3d_^6'JP1YKm!'>I/s/;?Z9%%0YS(Nh`YTb*D`c"aTJ&SAk2bP/1F8"l)1O8a16I$3DtplfhR\e.D0!9$;@AF.)HcJ&1V4l'eNK7iQ">E.P?u47%W>Sf+@]k+Y`:+%\WG/T&OqWj9[O\#c(.7\_g"Mh(P4K&dR920q'c)2,fRN4;Au8I$0la*D'D^t"S*?,@n"m=MMGiZ'#n21),CB*)7taHTmrUJ0e#5V%S'P7^B-oC:k`&n#OqW1=E=:1C](](b2meN*WUrT>#T&Cdj#c/5GWI;_&4YopOOegkD3>#9bKGenic-G!q9h^6+p;FJW4H^/i?(-O%aoFG'[Jakd*Pdmg8d_T1)bkJ+1Qe#A^4Ek7?%bY!<os4:Y-&ICF0.8D6,t78m$5OLkgl5`O<g]LqHSofX(,$K5J.!d#"io_#$?,a%:Z@25\gH:Ulg+XDLe7YFlciRU^[Z])&3o((hkeihUC^8]lhQjX"Kh?@Rm-*7`$8#D;RMXgDa"Kq'M&>"H+F#j;0_FmcP(Ki&1n)k%Mrq>a*^Z_=$+eqY%oe5\G]fF*)S.7^i:%&H5D3A<=ub/k*g4\gJa`teB,.naSV'e<87QkAhH>k%S'ZZi'C>mTG0`M)[Q2/l4$ptQ%r!b:p$tQS&rE5km3LGb"edF["nq=[FAu-G7(mJabV4'=sYb$9BB$)ZQGurPGPP#f+i]'-Q^-M<Mg3L\c*2UrKe'C]q3`0LTHjE`Z%k@mg*dQ\TUC<:n8[c_i_dIKY%s&?;G]@mdo("_kS/9ce>Tb7PI$aJT#\%e'15_<7q%p9X<7jOaR><[p'du)!+Sh,eJdVZ8>UNlY*%cCL,'C/b&?Ylc"a%WoE1-NOlAGl$jf0Y7r59T'V@'QffE>0+[l)S40@&s=j`edo1(B$XhU?]sHB3^C/g5@2%YQKN(8\=@H\joZWf%]96mZ[)-2n=J\GTktVd6HWi&mZ;En@!?nk6rrs^Z.M?O"[dJH@EN%*%nA-s:9*gKTME"2nElc!a2?T*2,Zuoaj_1<C&=[^#FqSQ9%V$u?@dOsU=&Sc@[I?`BWb=DB!E\!"RS_'HUmY([>KePJjCcmB"o&1Y@X=uWrq/BS!2AJ!Rq/DWo.jHK..N;AQXYn[4ag=0uA)2i#%.;lVr6ESkL"[XoGKsVHT+]>.Z2nFR8jtRH7&I*kK9iDT,1kKq?GDemQ7Q*CV<qQs!/5^ImOePu1`.J*5L-Drt1qNA$E(^Sp6?Tk,%=G,3KW1].qJk"9pVrQemK)_!1MF!"cbV$*YFIcD/8A'hV%78J^1f+l(6C/CL#7hK%,s!]5PY#Vm!#O',Qbn<9;4nDf83<__Rd9RH%-QsF$_2ECT&OdC"+nM^Eohbpq&q%t;,>h<>WWb26=P6)PleHpf=NY/)fW!EWfki#b90h\?CLW.Z9H6d8P/:&T8*4>:&^^Y*\O%hb%OV!MUV6+:SZ?)8WmT*aeAU\35DW%c`4JAk<?%?sm1_VkY70'`T(I5G?T<tu,.D8m1\%G+>:DJETXanoF""8!u68W0+0%>+H.>C7j%O`M?#XBs]QVPF4A`(7].#n6jBI%[pb),_&\XIZ8EcJK=.2]cMJ1QqEqHje'Yo3D"sJfCfKBdT$#l/.jBWV!&o\!H9D$7DOd+ol[]%8Pr=eRW8uJSrIci(fj:Oe>Ye^er%Cp'EhdfaiXgaS^8_ehXI]!,.s\KeRF%b,miS]h>U#3<LX9-+M%kGk!mTpN8CBOIdSjLbh0qg%;gk#kPHpo1?mD3mnnsIGJQU4)8Qaj"<mt'GRBjG5h0I:&42"K@X)YSBkn0mlfcQXc1L0G@<\P,aN,<ajG[2FOT@q@RM$=UC>;=ek%cR2g9NBU=d7tpspo(3MYQbpoj,u9(Z[\chBkDsA`UuWAGhSce.'ad]R/.+gKRf'+%6DpTVF,HS*h2Jf1LV6MnUjSLM%_P`kqOEu"%=ksNS@iue@?#Td#DT$YD)s++UDCE<KB:s-qbdkA.`V-,oY[jg1j"b)iF,D3HLe`epZF!\fCJF#a<ZNnci*:cs,\s2kgf/.Ub,fC%%A8%P2Z1@0RGIdG$8&U_6oi@BiYP;gYg6-P=<s3*f4oLQ^<D'PinIQY;ple)LYGN-XT)SatXqV[[.H`m.=es8hM3FlhdU[75(If</%dm#@D6g[-[LIEW3k=NdtHQ0*"o`_-rdL>3cec:dLdbHcf)jMP7=&@RSIGs6S\njD+DJkaSW`M84WDsI)*$BOob_fO1TZMdhj&L]k%MsPt\;g&lVNQ5(>>4-=E?DR`j6#HC$G7F$opJTS8(1&K:]^8\Em;"(9)clSFb,J@=1;-"*Ob)3Y%Z"q5o*7*86Dd5e<SpQ$BJFiH%Wc)=,055^M&Z9D+4TeL3@^7k`4#2]s.B/=@E3@BB5S8K5XPt3mUPXR_VH4$r_4bn&R<*VTktjY4Wuic9SIuqV452cB(H.6Y6OA3>%Z,'BH%1%ZYVOC4+dU!b)<;n.`s/2!-6s1POU2EjG,VNTRpe@,K"gTW\dPe85s27'`_*hrG9@A5mKXm^WefI]n8!sFQ#"s"3KpZ,.%K3W$3%XeIgkAVGMfiad'`.n-caX/QPAEDm03[*!!WkLElNY>rH,X/O*OBA?%\I*S[0n@.bc0%qr@;E;=m`\M:0S3U%XA4=U`o'/3%#G'_&Bm[DCVnsSH-=g,SO#eY0H5c+#aN2]Qn_Qc-\:!Th&m:BILO=ol9J!=:h6=dScG[Ij<,`lo-u>V3i..MGFf`bH##e]R@k[^W%p_b8F-CQ=cecSRo?5U41OJ<$."*)dJ@;c'm/DK'rQLfe+!&@&u\6e>(Wucr4)^1reYLSS.NV"FelLFr.m?M>>[dk#q<>Y5g/Ntl]%V%PJXN3;7L56s[,DL>CST,d9rNFR+Y\"]mYHYWjokN+%OCl,sh[?.?WO]#:#c&q*kAA0Kh0,6Hle`V6jDk*C'p:VdBbP'c05@;sq%]18G\Hob]7[7_&D'&=-<JfcJ_&\0EdF&I$XA-$9pJOgFr'&M?$(oetj$;j&>I"Z.I#B>6;'Nrtm>1<#n`=De8iTNI8,qqY"HG)XW%45Q'U@K#lhJ<i&'E7U.n@PTc9U64IQS2'15#cM'sEtC.B,OQeOi2J/a8\.@W9*]jhoCjN+d#e!AKK&Qpf\q_t%.p?q&,7o#8QBhu%`es.M/!>5,-&I/f;PJ4R@RFPe!XP"Q,_UOrL]UNuj)Ae`"P5QRd=B`_UMGg(_lf^(,<cKjYR)gY41mSqSmpSEQ;W?XV3#GYG"^D*%;EHjO,#k4Ihk`qXQ;u'G,-<:_Ilo=G#T>[/2lF;]KuCo:+KB)IWT;t\6&cYS8&q]X&RO%Km99=AgX"rgRh-%\):?j$4Ig:]`],fZ%C,ON4%V0GM_bI]Zq8/G74"+BtjuY:tB#4Yu6Ror(LFTjPfkFibpF5\p:XaKcL/cG\g6(ocjldsm3]XhE+)`dV*rL>BKX#p*"e?D:%@AdDOndU:WMlAU472XL0IUPB.Zdkk3??Yl3g)UGq\iq.k*je^W^qprU8!mBeCD7kHQ:52$\TN8C^.=a8Y^Oa9n$D^H0,n%l/=eD.%.R0m9b!X$$]-+eu)W^Q2X=Rl""$4[n1te+/@eqZ8:ecU4LF6-EPlL!k=>?$EQh:l=.SQ`T6$9O`)8aiR1sla>/@R-lr]9LrhrbHJ%i'_1>Ee29$!M-Z)#E+&Y:aO&k6_m+AXdgU(JNTAPZ3N/[jfa^aC=2<!6iE('.<<ZSeVMJ//,R!%VI!OuV9gkm%@%-Zr37;h1`Z).%/98M[hJF'BY"b-eHDom3TqV"1kRG^i0D0UT$6,.BQl;h4@!Lr3r-2Uj=3Tq")9\U\XMX%!h0055:pM".g+3$u&WM:QKXKk3@_^.@%o8SSm6F'5TI;YX5OiKPuT[#e\).eK4%76(AaAqib4&pVl&+%&+G5cV`B:0b3er`aWDADXaDJVl;4Hl_R3h_Up)5>>]))i`qA1Gu4%Sk!Mj.J%h]$]3ciGo*p%[bY#:GcmRPom7Y*H2FbIU[C5$=8M1WrY`09071lB4jg:#G:Gi$3l0sm0K:C0_>m<,)a[(c$6^c:->CNH%+5RV"(Gp*%Gp-PC?,Un02G$cDIN6mCc@gVJ=Pj2e4VkXW(C$Z1\l)ThX?`qEhn'F=>F(hoNmcBM+tUo*>Otaumh=ZjYj`V%h<@*1%YY",%7"SSE8.mr:OY6llHla.8![=AsfYjEXq1cY6LYob6&MrlAmLTQcLS/0%:-e*$X,JIC_LpJE],5NPQe)0%EPE-+^J:$>Ss4Ce%7>V__?3JiJYPN0jrOO0*LPkr);'#=.-WWQ$1KZRs-_c'*8,[0jrKQCjl6dC!Y[;?lkZtuq[:auE[dc#+rUbmQpSll=Y[;(C-UP0>%42QI>HtdM-5CK[.Yi#@=m+8t*rDNS)_L>-d0Z&9o_hh>u'D>?sP-A;9fFR!ArsS`&?QAd7VLbrnpJ=4$17OY*fIobofLr]*IafDN%oFo835sP&(-0Q_/NHFLMiMnkIrZB,WC..iO&td,?E0q@2CSpeJp>h<B.M;5]7j@$GG9WJj3/.9pV'P+l.2sGFP-9u)OWrk1Qo7;6%1:u?4WRUkHL3F+^"uB^NFRfpPM)hHQDF=N+Bk]P'RF91pUlncJYJ`!"%ud;%I]A*n;i6`IdbN3BEo-1W_DOl+bNM]]QJg$OVeJ,=%KZpW]F*V]ldP8rjLt3m.:9[LBg-`f^>JV@A9!Y3^_EgH85D2G/'W-)kYNuA2S*DtVrst7XiSL56X,ju`M)F;(fk!;UDc;KtJ=8o@%%"872o!!$Dquh[-`(t@M2MD,Nr.Hs,@t);REG;m_UB6]k%<$Z4YnK7_0\JCSbe[K8#n3]p%aGKPAE_)TpL#?gl$pZI+KP]/J]rL`%H1[V%`Uj;eOGTP_qMq>k;D_6,1-;2*?md4`%'Co;oJjkj@jh33bYG+Fi!DH3S_ssHC&+C*'=:nk@j`\Y"$7[M#=Xl,*B?EkCbgJg%3gW^2;Dajl]pkO2R%1r'qfg*fEs=WjT=VRe$LEG^0<^fA2[+1e:+.X6$$1/$ed?<3@9XS'/*ubH[-@7b_d;>2meacE9iu;NUX?h/%s&V&ik90d(,rJ!01#3Y&@XcQS)BN0*b',N$[hI2ZA]r/=BVkVmS2j]pJ\aaNr^U4/m0O:K)M!/6\hM:h*OAKifUI]&]HG%s;^l&u%4.N+)ic+b(E*@=)oYC@.!gtad4,3\V-`HG7iI[S0Dh*p%`$srZ^sl&&,TfJ95!t%sD!>%5`RI[,GrdUA6TP4N:Qu.Pl3g5ZFB]/.%>gX[EP!4m@/AmBtO&duiNKOm7QhgTFs*bu-e^'%/6L@TH:#qDPf^jg04sXj-G3'YHUFbg_H\3GhrN3r^C2o1tMYZ48Th9i6$-RqQ%.L>@+fAA0R<;`!!qj'j@S1t&SXk0+\i:B;]HlW(o]gu\ET6cfIGO\\hjXUj[]OY<=I[14E*<.u-N--@P'X"6,-ar?>-HdpYQ/nbi%C.W#-9nU^aD+A\JOg0aG+@M\#3GRq+SCYSSW)gN'22\pXR^u[H&(f!$(+8PAl\"&9eSeg`oUIB.s8G(:^Z\_U^#*/$p>YnIPM6^U%cq*$coQ+%u:?Kh-Lffg(91t#d,sqF-q"s+<5CjX_2^B\"Rc_W&<gfP:_=$%ci:A"Z)`f'IF^OqF+am482ZsR(&5b`\7b0k>T0?EC%,J6S!,=/fCbF"%_$)MiDR+03dK$\([`IpOPo=";%/\,%ZrDh/W+u(Q3Z>ulNogh'u,:a<][-dm"7hml1j%?/:8<.?#cSZp%UgWB>%rVLi0F$Xq#ec(N2T0N$V(A.S:95T0@%WI!./oR4jV5^YD+mLPdF^m`Jn\^&G13aq`f'MS?")B6s]q/=b&*@kSV&I\Aq/HprHuWLd%>-O'_`6h]YH)1n*hpX_n=PVNoM-Y=T?2])dn*f3oDtm?3U5[sLLT'bSlgq!,&0eb.jagYYidp@5_"2t^8n=Li`8g.=#41@k!r4n'%bP'I.7qE'\5-AuNnU$lM&+'-(&+$n)lg!(8IX_mCIi#8&7&#'qEmpEJkI3FVoqX7Bb&)dL1P57uTtOuNV@b*=0.$[6IDX>p/SG6e%^l5.+$qG.QdhAX`OHnM3g58ZlFM!Kf'#RZ[+6#ajXA%f&)p<90V.WaA;jRln6?f.5A[g:5'H0\pDH_<E;p0-_@mqpmlC/Mr54;((%9<TqtF<BB.Kq3tH0NRE$>'CW.@86Zt9),(P5gH.)QrNonT1>A*@9$`glh]ePEp-J8;1^XfCC0YU--2!\dL1?5Ka3q!&#+r5+S.ks%B(ZkLF=]eQhlj:+rQp_GBdFNt6\dB>8QZbGP;il@fWFq%,nF-I.FRd_9FR6NYJnsJO/Ro]=V8PE*`,hAn=J_)4bhV`J[ir0]m2)+%oOaP&VmL>32+Ub-8X];s_\n+mb.7P<fhEC,.J2QjnKiL$^>,eN786dA)$H'ZMJ+bm+j[E:@1k5[$@.ad8g[-$>Y`7GVofmJ@+s?k%,pXHXXQ8#@kRK*GR89s*B(DpS&I%HWWq>l%_-3s$M&2o46Y4^+Ka"4B\toWQ7k#Y7I;pGVqE/FBZ_eHS!u8P7QcH,%L;#.+.>bW+%NP2^p7(UPOS[9m;j0,DS0?`B0E=-TJJk8s+M]r:M:F:Hh=opAK25heMOBj&J.^dS8n3HE8^9L?dVhUWkV?EM8\gQ`6802,jjceYY%A2m]1-K.\@Gh&TSZ>Nt-KUSMDjD`fJFl):G(l\Jo_icP's3#5IiHfuN+:)9OG[_"=T"_s/k#C/1,3Y4@b:og5KkRPgQ\I\aW^pP\%0!p3)24nHY466:KbcnPDj2V5KC"FqB7pWTP?0V7(rFToQlHE1V^>0#00;YNW^q/Bl&C^q,Dmq3:WDqd8W,,Vpa-A:<HJf#DYN9c#%G]f))]3b!eY-+P&427rjrV?G!Gr(aCbVZ&7,h+\'aYR1hQ9nbX6,\t^.>4g'S0HIF[A5+tYHT2&La.qt'!>YS6ppIJm^3j;\t<Xp%KaFmI&2?j,16*6e(<7s6We/b+A>";TlM>sq/YDp=i`H>uNsQ-pO&J@HV/otJ8@bre@du4??MX4/#_F@L_trBcU3S4>kN+i075MG\%')g`%ZiGFBVUApJ#O?]nbs=oRUpt/.J!RRW>k[L.aP%!4Vcb?:dDJKKNIZJ#:2BXh.ND,lWpSD"OM[nR0b^8&_iFpeV2I5?7r\sf%)`#d\4+L')3,)R_j?@10JO<t[(F*%i]#E65m$Ee@ok<O(esi2th84.&4r[WR%8(GKhd`08S-mlc'#A(&/$m&.:mgtqn6]V#le1\t%;#e1']7@B$o=M[smST:iN"DjL$08fQ%+AC"36W^hmUZ<Y*u>)@15^6PQ!TcnNO3IB89I8WEF*cIkR7,D[if--EKBd>#N[X8KZ^pI%H+Hf:jV&8HnQhGYOUi^j1u?M^1$5X>.qLkGXtD!16K`?W*'`=m4Nmna#JO!GhMMd.EPFOD-PZ4pYP7oapt_]1"SO(K*Fe-n.*0kC%,VDarr?:++la^T]&WohO9MUiNeQa,(bG&"@A&;lt+\Io&i3gZ[c/eW4W7$Ak(0ZTa%"/de\T.``4K,kjP=<]1SAma^2nMI>Y<JUI%bS8XUhmDG5&Sm%=Fl4!ld&ocgDH[jRmQG,&N7o:8"T7f=Lf>CN8/!ah8a+;cUZ6rT%-tKf[=G(<<1$AcoG6Q\&:>6[9L/rXi(?B%%>!VRp*M5kp_@%S1pu69b4UGV@&i03hiYI.?08,8'gJtq]lsDrDhJW"OP4dh%'cO"gh$f0>K_:?.=sTGA*maG^/R@b3Ykdh`nrucr%L#FZ`d5L-&)#."d%qAqpnD0IuFoKXQ&-&)WhfiR:f72K"=6>L3Y]Xs`kt<<1Xa3\r:e$Fea,FIn+q#*REbdZ!X_@2=#57\MAT-W4%k>[%p+l]TGWYPVg8>I$lOK$0BM02SXBLCM7$_47=?T:L$&u?fr8?LV.VDOC^i`3Csdk?>iY(H<V2[PO[7\I#Tpcuc.&?[ElUB<lV%!CoD_3goDcLTcu=OWsumRI6c9Q7\%j^d?ac1/'WT&Q0ln/gQC-6EdZ.^hC)$Ui`aR*H[26CEgb`clV"M7Pq'Z=I9HO`pb1a/\=?_%nlSS%L4Q*fYeF6`Uae^d84bp7s&(6[!ZPM4$Ii%G-Y=<95lml.'.BO+5GukR;db4,H\R3l5S,/]Fg!B9mm/39X4tR)i3])WWef']%o;K]<h2jq@c_]S[85a;nOMW#tmI0AdM9G/>Bl2<L+JZqhR1,(mfmb.Y6a/PZmnq(uf,Kcb(9F)/F`NPoeQR>^[(09pA5in%jOJ;p%%1q6]GZ'M9@jNQ/jn7QQ0ereR)TV'(S=U:jiLcW!e;05`>&H@?/,r`[!ZPW8A:@Y"&=+R46V9]K!`uu2e:[''>KDKn7j+ci!'8j?%aR,FgHIWne=EBRZ0UWKr&+#Y)9J=s5resg,G!)ViNoY?DHp>@?BEYoRC1^hB+rRRK<jrc$PC4D=K$#X&Z6uHdKs77p9XF,RAktLc%l(CPSj$9]kJWXS=Eu6$.'d6:OF#]seEtbbQe%_hb:'!3%!"gMVRg1P"\FD:s6sk8K5[("s>;:DK=6$N11u`?n%b);;0b@/ZC>h1n%I2DL/ftesea/@ZU34B*TaP*oDb*:L3QnIL!0Ud$@'l8cm\=/L/(/(M"9LP*hKoZDT")FKb8*Y'\E/9s>Fs2lf;/cDf&a=UM=n/cF%MJbi%m$_VjOJm^AqW'eUXm[%Yn'<b&je.E)olX9\pqoakGWQ_=i%3_O<rWVgX5^Q9%H@aFr0+?L,'(OERO8LrGLjJm#gVa@<_69m%OeFG.k[b5RQJ"R(e_pG`oRM7ErFb?qRAU\[HcuJ)gq>CulG*DD.@)sb3NM`H>.%H>a7<buIR5q@@XL]/5N:Z>P3OPG8+$:<5CLHj%U">2;CK)I!\GJK]lCcP-0+o5X0S_=1+BG31qgsAY!.u5;@5UK%4&Omt$;Z\CNf>QGP>C&]oZhEc8cZJf#J^C&b23gNrmqeukZh3$%#VsR2@]p]*U0JZ5p=fP<rjoN2n2\[r^=a%$)&dW_!q=])c37PTnI>O+hl@SH.cV1QT;8oDOBN1<$*,ZK<[r<9P/UN29J=6g^F!LZ%o2[!O;4Q@XkEO$g/t\%#q?iKgH!NbX]nou+/Zc`C_RRSNLli[/]%SRhO\%Op%@[U6PW.115g\3q9@R*Qr%L4,(L[4CjU;sf71dJX%Kp>tr+h]OX,Pr8%CH\r\gV./1-ig5^`C$8ieAi]c:b4m-`Ha)!7clUXd?-K'A5tLP*r;`4K[(d?%U)RC&7c>HWq7FmHSEqM6A:5W%87NFhA'`L:O@s[JZgMsh)M+2i+TntQ%AJE:X=t$uf#(.^OK>R=Wj9j>-]]r3.8uH3VVBU6:]\%Vk4-7ts+\IYJ&C9hhj><&a;l\O%)ku4MK&H:rb^nE95Fr+NK1J%e7#!U#7DY,pF^=o7mP"Tp`Ku(lW#IP@4ku7T14c*8;D3;2@F-$#Q.LBof$i,1<iqgP*'0@eUQ-IQ%0gOFP5d^>,#Nk=Akprfi^@!Q@lcK$uo@L+5?Y7e9qR.ptSZ&r][kQ56kg,pWM(_#NKJ7Lhmc'-V!h3KDe:^;1b89Fo\9In.%)8Z8%T>t"EDc)hGl\Tc)I(0C_M<Y[;%_FaL`Y$#[Dgqom710:M/H,ul>anbBOcP&\$5+\o]F8i&)e0E6k>eEQP,!:"?EH<ZJbUiV<MrbT%Cmj(g3kH9g5!t#%e'&L=>tlX'fa^YuP@\/n*pXW).SD@@6BXWo@fhJiO`EnJN`,FX,QGZ)*BR)=b<-jAi1TE<E?i@[5eup]q-of%%NE9N2%g3&uY`T($KTNSbCa:H&]`nW&mG&9lDLE0-k^3Y49ZGJOQ61q/6;QY?W'8sqr!tlZ$AL['U@)U2cS:;')PQ."h:(_[ZUUc$%GA`/hFH(gCY4m-nQ-Kjl$ltO.K<t9eW&t&WaMP=6_fnP3"Z)lA3+A=m09#kM=&QUqo1_M;!b:)^<68:OF5BfPH+S[+8'V#rEPG68%hk!KGD6L@3R2r(SBnosGSVO;(K(nh(ZLpLGAS=tVH2NJbAp<`1881ja_?J"4&L)]lH8mq<ofs]92n.%[_^L>k1a7UO.>-u@O>^VF%;**n)7fZC'2/d#/<O:heem^t/*sJ(;ii'I"Lk;QDeWe*/+6E0?5/r0SdkqmjC6Vnd.rujO"0'fk[SENZdXp67];01.f]gJ(=fP`>%mL3DY_rK1Qm!RW/X])&U4_G7jDL@O6]o_7aDHB?$Y*]-6a4cIc)kpEeEb?N!Fi=#kF2ffI_U@@]ZD`H!pH=&@NO$=6-&u4l>--V.%We33F?BE9oLL5l]H%..beRl(^#L^(6ar=psJ.PMDmbBETO+XpkbtYK^aXgj\lFG`=&Ks.e7,ao,[F3[]=Y0\BYBS3$4l*s2'MSCV%BU,0i/`EnD>-,h%#d%bf[-f9!6Dta7<q6NmQ1\88M88M$H[,:2+Qrti!+?[SmqAo?qL%^X.iN)+>N9gWltr)[c7hA(g$*\8(\0d4%"Msu6i@t:A=!,_:m]HMQF?7rb^A$]rmD@0)U_j&=Qil)6;*kgh`P[r!rFm'o*bCqb)hPlMo=SUcguBe_,:k&R2)r1a\%,0bU5T6?%[TuABcYHb;D@bg^6,E9A;s;B?aTRSnA%%NWX<F98]/N(T*">Jn*%?pSFM:JX^Fi[\MfuWPC1+Y>cO\)D`+(D.q?`1T>Y<Q5)+j.#%!'_PN's3X1`-G0u[)pFNHUFqfX]]J$<B0l(hO'NZ7@hk4_8"@TF#:SNC8t8u4($7"Xa=u:NAqqZoCa?J9^7slX61h9>f-KmMH5g!%md9:"-24:F66l$WqGr]/p\)[EP;L:#$_8X'55*ZNTYbSX0D8(/n!OX>_&5BCSp$$/g2n5FA+#ofJQuF5E0"5<o\O)<hAF)K6/P&a%,Mf`W[6HB=F^,5FB[)PL]Ui629OpR:NP4g"5i7@M^Tl,`)UD81.+0'1`(s6n+2j^aB7+-`(U;5oqLK4M-PZa/1m8Vq8@1W.Km=4c%T>=IJdB\T+-73,<k'BNMR)VTn2-"Xi9HC;@7J5G!N5Es)U$YeJgpZT9"oQ85/<S;(,!5F>]^=@9C"P5D5@Lp::i(qs?DSJjH)W\>%7r\=<P\igr!2<h7c+T.3+u2/,a9HZ0gDeai(ImSpo:Y5[WB'&kn'I_.?q@V&>HNAb:8YVFBm3MB/Q7;P>_4PX#3DoiiA@NB4N'rO%T2V.%aFRK_,J0kJL5oCVIFRq*>3Rc?,Ge8el%QPVKMU[4hoOj:0'ofRWo$0I:_HRam8\<;7qeuslElUK/iApj\AjN`^\#H65Fe'O%Nj.E*\.XKLFPocf7AeX167OQ,[^f%4XuF:/-U`U$@7Lm$g?$c,^:B50lsZW,![NoK:s$Xc<%]Fn6q9j_\`-?TE:.iDnnQ>&>fHMZ%>0B$?lh<F<Rsdb[6DnB:LE"\>!2Hg8Kb4a4oT@.n1/L<_2;^-3'LEc\KdqU(0dHfh/!3;d5N1Pk,GqGDo5A'_n.-UC2=6*%:nK$W%#Y/s*Ma2Y4N[15)5^=Dn`MB[f4egI(hR@/V"V23i%[GtOO[i5/LNkR"++hr#lSp<+EWi4[VcDX08!/sX#auN)6E&Ap%3sNBSWBQ$%EG@Y/2sU8rI/d;u6g9r)6'[ERHh%"7k0gGm#r,je#j,3KqHo=,`/5.Y!YV8XqC(+$RR]quX,8bW)j=?!RndSe,W?+MQs7cE&/;9+%F,tQ4R!Y/+W+r#-R"/C:N^ViC'Ga>=rAPg@*,eK1#_)J$LY%PF/69;?/Cm-/Efl>j[A:)SO2lPRrK#nS8!Lnp/rUoQ6Bu=QY05cT%.;EIp`>]NN=8JmX4b7L/&>,o,?g>:AjB@rnfSm=Tah]4KDPD<0\u/#F01SU*3!3rC?WbH;Af.<l.d83KmBj\]ZrVm7Yusf[ers2T%7Q[G;(&E2HjD:`XjebX4ZUG"^\8\9)k2?beAV_!9np%YPb>GKHU;](^hn0P"^bpasoV+9rQ`BaWb<--fVPgN,NZB!lWe\\S-m%:>%1-7o(A4+*A8lsRnlkfPE=83u9b9jCVO,)h,CrT<=m3h*7J)!;4gF/Q+-%^KJIG_0fik_Br=hArn2f7%fEuBHf#.!\GL]-g97:KK+%2`gK3lo2`fnQHD3->3S3-KupUVNp.Vk/c"Q3XHe`<gEEe8*ceq49uXae</Y\,I5L8hAEfbOdu#YU6>n?"RqsTmd:E/#S*O`_"8:Q%/212k/n6<q$FT([q#?Lk&:]\00QeU\1!#,5;o6i#)@Lm;+/[]iMDXj`ZJJ^MICt7OI7W$5p%I=X4EaRWDU-C17pYr(lUm4s?gONe%H"M"Ddd`V@FQ.^<KVV(5m`5h)(C9n,8G==</=+/$3ak7T"mY\W%>Fl=a7P&9!klXkpC[!mE?K_`<a*!!7^l\!j(Co`bRE=BJ?$U9%_@(dYr-!.cqf'^SPGOZ6;nXt+'%;F<*D,9\A7GWg/?-c1mY_(Y-ils'I6pAT257s<N`i/h=4BeR;S([uWR31Z.DMOD%p0?T'Lg<a%_:D[M56c`0g??XBSGUl"/7#2-V\o.g5Xa/>\#ch[W/\DK!!'%j495f4j!<k0NaOIAaLP1XXQ5ZN&<%^uM?)5+H_PFm%+AtE)`;Y9%!sep+7Bn),RsbC\:?gBN"ncF7n[_=?aeYGNr6kR$3[m.BIsjMgDmg.(I,OIGi2UM:K2USEYPnc2&/hkf7%)\mc8SIudF6%pDiKEf%mnnT#mF#RQ0PtC<++=W]ir5a/-=(!HYUcA\"-td(8<MLeqX;akmt_2L)uFbQUe7eJl<Bs3(I.8qA(A0P^dbHB;A`h`hn\86glU3I%q^NhZS6iu&?prLXj[s%<^'?D.A"uJD9j&7?Ug'b^V$*_4@]2;h8"cLZiYWc"K@ABhk-=cWkH6`SV[In[gWZI5[uQlRgJ<MM[J++m%%8EHO*HI*Q#OBQfjgWY,:R)XoQX;2(16a-/N+hE7EZq@&e/Km#E1bR/m3pAH*gJ@H(l>703DT2sd:c@U`<D4e*TfCSo<q^^O4+Kc%mRI'TWfkC@OnJcO0,I&F-5W6`G\S8(rY862_49Y+7=F-SNW:C6@8n]l-M_pIX_EH0qD+UDMdAo'ic*Kh/W:R\/4GGh;/5o+B))Vp%E@NT:%pAL9Tf/kPCF--)6WN"$M#IPXZJn>E.i&?Aq/5G`$r9`O.N/ob/^'.ih^am%g##)Q8Z4f?&,#m2??FG?k8JoW<ISm=N#W;U%k1^m-3_pcHreC0MTmdPn;V:_K=`h+b-kR^?5=-#5jUdN]W:060iI%S9SYP(-SU$XuRDZr[c!2hP49jPI=O2@Z'hE'namnjc_$lG%%OM^)tUm-H>QH8_'*"cT2aMDZ)Y+bM\Mtls,IC[-bkG[E6ljDSC2Pd1lhaAK),c8mZ"=,8DVQV"t(U$*8(NPlU-Qo<kIs2&2L+gk7%JJ&B6q)F7%Q3Z1=YP:nq)S^75==15O/>83D&Hq'=6\RuikF30LjbP<4Xe8+,a_!=X)+!F6d?k/Za$gCl3p*4MK^df_JKE(q^fI6[%M\UH*MeTPB.o%5]`f`jGhE1AH_`"SK1lggN0rb$@]QQ[i?S.2Dh3HPca<e+**:5btUS6%\*,l5uqq+ji@FuV\n;u?0-64V>h&LF'%l=rqHAke`B>@aM:B<1[aP?CG+!;_S0&EH(]qJV6]BZ1G'1>1R@"l!#J@3d.4lO!kU\(ZC_jP"Kr](0'jOV-M:^&1nn@1`eoj-IhQ%Fc9%k?JRmV"=X5i,Qpr[l]/6D?O\k+>$I%S)[F'f$'eCN?M2<E@("%C']u#iMo<3`%IZRbVFtcelU01*[SG></Q;^B]fP9qmM&mp%-Pc2aE/8[?nIUIS.$7<(-nM(oR0iX\oF@%UWmi.RObcr?6ZlDR@mO7?7[6/iElVMS:!PjfoZl*h[-^L@79%a:?jn6jZ<VL1];q^b%\Ro@`A-!lh?6c&Fki6\pn5#8<[o`S6B2?.1bb6-@TdXo[HK^'_,E`NT2/:b'Z3\Ec:P2TgX0AbG<=uo1$4hoe$5,s3>Ynu7R.V(Q%a7P7,/=mX?R]CbD#SS[q+k"l-DS9U/N&2?qZc]GPJ[<F4<!17q/!t+'eZ]0CNs$X@aq3PZ3MJ*jPTjpUP.PBpfXr]p+cn%j,9ar;%V8oOT+0IsW%@U,@`CLDq]1IMp$M*NG=8UU5otRSc8!6C-lbG+!p-bB`NR#F\'CC90[%gX&ZK!C^,0S\gX(6W[6qWFmPSMNKp:au;%3U^>a`I2,*)dr*@3!sPW$4Bg8I)Q^<]u\8)-jiKZXt$KY]Ppe[>*[c11Lq`nn$Tm/#5b?J:jc!=&:T^%_aQHrhY;@sD\7\6F&A%.%2n-Km)C#U((4554,(?Q`8n?,En3.)]1,7Lc]\P%//HuM4K+q;(c_%thlS@d(CqJ6sU6E`TbRqk06_0s@5X7lX7]%jcrUc[ag_=Je%S(4e\^oBhkLc_Z5Prc:jl^s7$gbMm2[gGRrc)N:Vir%g1,21L5LdZWh&fc<l`p`B&&Y4,JBE(/QfM\NOP5Y"bYt[+jF!+?4>d<f=%[$r2@)"GEJ2tUKdBEN&!&]6W^Zb'Sf-Oq4EoV<%b8_;j,r;SL7Q\-K1"aqj9_iG&N9k/Vi3q,W_D!UPC45)9\2g2In*2]W]E=N`0%;F,.\7l??]^BsE:OQ/`m00[6L.I7=2ETqP>ZDmmsWfhEd?YRgKJ)R+/6(e.F(YM(!S#(3L?cXY=?HP)niVIog''YCS&=ht+^4NB(%j\];JZ2soAEdE!uYCPJ)9,7kZ"&rUA!PP?9R9mqpB_Ss:c828mg>/moQu!t!qV5mYFerCL`N"V-5OtN?C.i]ImklfZ"s"W.D^bI8%4:8frX=<DWbK03D/L[;_$\:V2[2NHa0:W)7]qI_Gr"8an@XD=bB]RgXPrP*nUp&uh)Qrhc,I/_r::aBJ2O"?.?H%d'Y<fs%qjY`W%jL=Y7jWOcrjVKPLanmga)aH30!$25S6SH1R;Z4FSR[Vc-G6H7_XtS]fBJ(^mbL]aMN9V"XTc&B0]K"0@+jI+p43^UbiF=@`.A0YT%A,(p;QLiFpB'jN6jgDX?^ljFOaS,q,4)8Y+LhT=F6p:]EEF'2=Uf:[A;N0h2q>*oL>jW8_R#O0!8hO*"ZUARg\e2@iLu/blrV@)T%1>NkfoT410IQ4]Ygkj,uS:2\DD+,2]o-eMpkk\@2iB&?bpl4r=&C@n^=EA'H$VW9%g.^(3\UJ0>e9&n$XE%9q9Y5XYS7PW37M.(d%KZ1P:EqL$!I$f)tY>=%9XK>VVe,9>h/^:(s0Fq[mM?'d8O-^F!(LP!j`-p-kD+krT'IFLAi:6-,9P>+UP"1YM'4O[4]G_\"n'3BQ%7?h3ZA@0R&\3hl;@=EK83$:QQNXjGF9*9_l41ns;L#I]]h]DSue],_<(>qUUF!SJ\fAGrfW,kE[,ok6'$q/>r>](IA!.r<J*0Atl%@T>3qW=&l)1_%55;^,CZ@p0?"I`iU0FI;c7mF(B>29sB'9@f+ZdL*UThG8,'h$-\$;aNJZ2e5=<6&B9F(gZF:PLEB:BIk+?YC/d"%XtsO5(TJLiPRT$W.jFT!X)8?CLb[)=b$AAt]gnU,<Q_Mm^MQW#<THi\9"V"UMTVVZK9?l&CYXO+2K(GXm>TZqq=0J>R^bKmNIc;L%HTh^.:?<](p]S[V4b5d?Cd0Q%*5[+AUN9BdQB;a,K"HV<UB&_NFE<3;$WPAf+;3uJSXZeLB%hW'X?^SlHBr@2']O"/+t8nH"uaM^%I^-pUYi=O.6<Js11&QHms5o`Hh36Hjbu/Zj5<cZgcapuJ?6>a7d<!.Z:tKq."*b"lW66O#U((HO'##_L4%#r;I>75R<R=l_BjUb]%[$Ga$;]$J#&SbpKAkpL1+4KgRaFoO(Nd!jlV-aWVG:?m@p2YS:&3A!lZ`I5X6pJfbZlR1SpJ.81Ejnm'MN.nS7Y.6o&^W7`#.</A%B8@%A=?qYR(MI*f?XEdk5A[%soXZ37D^iSD^?*hK,I[.`A(O\t^eF(7F6o<+DBDmg\6=+1)ol#Xe%MSS/O;UZ`-6-T;mHc'6:Q9P%\RdQ($Y2iZWI*8(9kHg%0ulllT<h9/D<9-&4"jr@'&S*dpcol[hP2is&@qbF8L!HQ,,Ut.Da_^Q"J(Fb`2"9^_UAr=cIh+KA,.uG%YRs%4Sk+!^oY,+A6Uc<.Mm[KVC(sQh2%7r=6eFZs>P>!j]@Od)!Z_E3:]@ec?b-fDMYa)oGW'ZI1Gg;RJba7"#mVp5/gM9<brJjr%VTMd3n03joi==USb36IFh3Qeqb\TOj[^DMZ&_MFJ48)ibp6Dd!;-Hj]&UJBaCIOL:ohN5%cd<.[g:6aGoEO-8He>XU#:>_o_%@^a%U2Im/bWdLLX,2o\:$i.%WdEZ"Qsq,TNl#Ef"jn.sf8Q:cBs,6VkU?1_M+X6LR:?LI/^G$t,=:J5IWD#akR+B_B^D`R8jQ/u"g*gZ%k!lEE?_VUbM1CC3R_j4$C[6\fIU6rBZRb$8G=2nM<"I7X?h)\Z7FPYO1hB"^kTlgUBLq)q#`%'8g4S&YCWgdSf"'/\Pe3;kR1F#V%,j"K@p]9g1d$FjL0?dWed?7^aH!spj\dJ[=1(84c6ZX&>@%,guL/,eHXFi9lAI@7LCt\p5jFO.@$`n,2]94FuS9]Ru>#,iJl&2#>%D9uuG'C9RjX%Xtr_Tdn]9+dU:$_>nD>%YrHd2[C(F(1B5XVsDK-(o+5WIEq7N2;6r^C0k__pfj@s!%5/b"mNPY*"(:oFC8=O[E#$%mV$JJLI.pNgRX!AoV_#CB[A&h8'k-^%i]S1Q+T2>-`cbD.0jQRG7C^@(F:X^)jB?L[5nb)0F3L.Z,2eA]S^4UfPYt:lNh)1<g^go%6A5.BlO!e'6&W0\eIj`@hZ40igedWjoZ/f;>"BY?UF2<0Kog+5K"hPrI%f?nA'MOn5t-]%6\7JsX:!=Z?0IiA4?Vk"4P^<PjQS#0%AF"rR][1\$*a2$_QrkK5&="3VarRM6<El^iJ1*kDQN%60*r7D`+dt@,7YhA]W=t]U%E#;kWcC4[Es\W<+)JI]plU_hRkN<nEaYPP%5M0F0'@^POX,"5s"HR/$\.HhidKp^2^D7`fjMB?PE_D8t@#l')[j7HNXsI54N)(S<9*uiN%FX7Cpc_RIlgnRJKH/&@N:IrsVd6%Z%PrZcJKg>&c,4Z(=RdVDh]OhRA;5Z9k%SVG8NkuS'ZT7$tBfXCr:it?5N%eVRH_2#cDm0'"K-8ik6uhH-kFho,8-'P.no,"J"2420%!jP>A%Ltr5f;%_5V#,4T8jm`Ks0WnR<d5CoEJNE>a),^d]@IQIat'dojehu"Cfj8,=^EulcSk.]n6M>3*QjZA\"WuZENP&AoY?Kk%gYo>2<_)>TOFP_MS;i0@*`4U3qQB`!3B/NX,m?XSIte.t1Ih=/J(;G$_Skr$gf*Fe1@][21Z7V"JUS#L;t\55cB[UpkUlk$3NML"%:jpqE7-XfSI7F+b*X`>!QPULXpaecLb.@uu7(kE=--eMO0+j[qX_L</M]Q/n-(TqiSWK;!<.E0(]7/1II-i5FTo(O>N`B0H*F9Fs%G*IYTE3"X(q@Z87;maAV<j/9Zn?k.iT<Fk+Z0l3W<!&A`I^U%[bM^OKP"a'GBbQ2K6*U3"bf>krTq((Ra$"dibAM_UBH?`I;$61L%AoZ0JfNmkTD@&Yoo6&,SmK.8S1G!8,X@ORQd$#D12rnb=ra$EP[.bmU,pE@2=q9(3/[+JZHZ)DtfA-1#g=;>'?.&>6#2I^XBM5;2%*3Z']U"22fjU%YDJY""3@1I>__.*DNZb`O#(IC!6XS0%<6<,XGhm*(;DDW$9K]H7b<Tf/6JD-7[BR8j?Qi\B;,2j42pT#`cp5.Qu%;\9fTFIG<)0NDOk3p]LBA*uaj3Pmc?<*7:ZT^f>C`tE4qjPpUjT9FF`:oB;/G-<<u&CO!2V9dWY-qPmX#i(#-c?%gK9HXR`jHmCu%9g'Mn'-i0:"_ts%\ap^,Ug!:0FbMni+(tjW<etPJQ#1Run(epK8a5Vb0$dPOF0IVq\J2"X,omd2.p&Z99\D$Y:@jR:eS-TY$jS!U%RX@G<_4J_VmNrdbWP[u.J1d>2"m>Sa!'r<be_"m;nV"H*6?Xr=&FpI>PNatT!0ql</ohI30R%J,=Bbb>XO:KX?g<K$&c[Rtl*rC"%G,a9(lfSs*=-i^3kKsZIB*2I9Ct]Kn$]^HD[c]fK/nZF.T]C5;7h%tVmL*kSIa'*P6[_?>@g"eWM%`='5k)R$2"l/]p.KX>'Ar]$%;UD'6F49RtFj)fudBOitR@`ZJ5@+IjL6I6VRVR2aSAQe[nEr8j*2aiBG@a7<]*e.lPtg'P,g$UK1QKB&r-4M7;s#Hm(?`4[9o)h*%pYA32>Ci"R_G+aUF08gmg`8\%8Df31L.K2j)$V7M'AIq=G0D]\K94:1`qlGu->'B[.Vg$1gf.!MgWKV7,[Ojgm)m#A/.jJbjMM[B%Jk=XD;3%"O&f@;<9\re0HWK;X'##+4WPN:GlPAeeo^%%j>49NUYlPF%erj-nGCUoC<JXU8X$e(*X/d&^&o'H1cP9!q40C3(Gur<"%,L*@@gpVhLF31l<WL[IZ6i7+eqs&a)6_K,clEIgQ`L:0.m[5:<TfpCK.RumD?#&pnLHL[rC^D2h%E$07(8o*#8#JRA=/WHPm,$+9%KfN83JlB$<jIM3E,0Rd&U_<0bW`ig@pag%]CgpB<gE9rJ`/CFSrPtF:R<5H3d=@^p?Z'^qR9T<cV2B.rqQ$oK9Wg^L%dRrLJgA>h%I@+RsH#JXDLX,40(r;>Cfj-0tLTrCARt]mO3&bV7c[F`3f_?N=?uhW?Lc^"*ql4(uU3/*(3bX,D<l5^=[SJ%r&7(qaMaTi%Q/T4K%9%cC?1?ZK?3c#6PGM\Og%@\Q:R@uJmjmDPJX,#tDfk!BU19=ei/3q&lY7m'/lX3)r_3DFl&:)5Kq!#_jJ;-Obgk&sQ7Nijj<t\B=%ae/SAX,V9CaZkR#N"D9a=hEYa/PdpZlMX-<3\!?q@U#1r\R2r/;75CU:>1b,bQkKK`7cZ!KTpj8a)m30(]:T,ha]lfY1d=AWL-F3%LQ5E_+L9pYYQ0:)33W4O?l3:o[\,W67+'JDb8kf;-\F`%1[_R%'9+pA7ZopnDU57t&Q4!b7hR@IrrQZ1J,E^2k59@#fsF_?7ccl_%/i@6'%a7m^3?X`-[nc\j(@pLB9=)[-\'JAcW'oD`6<(284$nD>^II=#"=61YbN@7bc59&"H^>"iUj/MFmh7+S""-m,h`l9PW483j%#k`h/$p'Bks7#*mDFWX4%<aFm81&FUWA/jYL9@qR^4nh`:NMj@`U02m(:/!L,juka2]_,SgaG2B92sotEQDkPB`\eNNT7FDH6D?E%j]'#G#!t4$6OU=CengdOUMWEF0njt3LtadMP8^2&_*VSXO?<c!]#3q[k2dtg`>p4BM(_2EDJa?GU4Np\)iIoI1tMAR%@>C\8aJ%!%c&s'Y4M4K3cH\9eSE;]=Y6Yo0*=+bioS#PYEDW$Xa]m(urJKm!kc#"DF;oiLOk^X'kR7gBRP=mfH`RM(G'>YP[CrD$9H"c)FkBlN%UtBdPm:RWZp-4lo86ul]0&G(lZkIuh!J7%g!bCbkFd%&^BYc+tW\mFHnRu[FM+&Ub@d^@[A(5c9hS<p-$%c"+ZGSgpTFC(#65f'N%X,rcu%a27@0B#*0kmli_S^hn\i5/5n*BP.W)$amr\Lr`]W%cXk)JJ]R<)9:s$R$9]+0g^h.9uVN1,oY#o446Vj01J9k^>:G9q)b)%!sD=o.EX3)2%a"h)TJp%Okq\1#PirO.8bs<M8Db0-kJ'!TrrPZ27=dh:m6^X"r*MZ@lNd!1q,fWcPos>?/ft&6<rd]R6>,Cg57lF%<[`-bh;1,VG9XMpCcsDWd]5l@Z#;Z$h-+XN7h?rL"P1n5Y2?Dee"Duh+AI[.U`m$qR+R&#LNK'f&b6EuBUFVlJ'Lcg\<%GQ-fr?)%F6.To4p)Bn7PLAbS*>7TVPGOtCOq:VZGJL!=X!NVD;^U$9Km>]c6HHu="EUQqR`$P'j]Vm.jOW-;H^7e"h%\#`I_ZXXACQX_4%&A%jaPI6rga[O.XMfm?IUA-g=A5AD/5QJ2)a.2/P8Icl>'WuX!7lHWg&K[U!:TKd,O%:b.cMmpYZ2EaGWIN4t:.@E4V&:%08#Ge1AN-%L%T.88e"pC+XYi=HW=m1H52'/Dd!On/!0B/5-ZGn@peMaGANJf2,+_HGMn6[T1NT'S[2iEU`]n@fB&Ps%/!8dWmO<&*//LZ*)7/J%7=&H_^5qD^q0J+dAM/an3J"jQ$"2t1#V!9W+imAn%re3QUCpb6)O+r=(OK&]2Kf%9b`3XPk/2q.'1;\\X;$IKbb9H3!IR).AO%<k%>26<fj@0ZdIL=imjt7[OIs?[$;(R!;$F=:ii2CF?Zrg_<!@a5G[@QK"!*,V!mZDaUPH"n_]HPitr-J`hPd1r<+j(C3!&t[/K50UI%_ncU=5ht#<%qE$'gpu#=;rn65%'i^NVA>Lo4beD.[`9BWgR*hC2;M?FOa!tbK6.?P)]%3]3[%fr0"4>V#X0qC'^g@JAuF@g>'o5d%X-2CpR'@W`^OaE,'MsYo;AKQe:GSW))S<7t:oVk`fpVJO7.qaPrB/U02GjLq,5j)gB3es_A9ba;#PQ#]]eiO$aH#fSXmR32)g:b3%M]lR\_#0!HS806Y#Xu7?IbBF2$D[CikJrQrH(?:V:1qOWq'iiN@f?gic"Q;XCtPEIPMT@d$GSl%)_"A/V-I7$KfHdZWPj4La@XEm%(*c=GQlqJ7c>MVL[b:2'RsH&tGg=&mKb%g-L"2Q\W`rO0B!It%jQk3WrILap0QUZ>\IPL'X`&<qA36l+Fs14Ak=&#Hh"AL&2g\-4%j4-ZMk0I^K$/(sHoB-^k9A2!B8(nI/&%4@!-#tY4$bW/2H/Gh.;jYI^=I+W/iE0fAM=uSPf2IR7CP?5@gHcdZ.Q+&^P=%ttGQWdM%JEOHtIh>c+#u`^ahF9VSCg4ShAO(.,3*/p$?dkaGM@aiLqI(c=JNU[#L$];+[+;`"RN6h>"_89gD;6J#m0LHL3T@4]dP/m=%7dmu%gEMi\L`WTZJWBRHnbaE?$crAP_V1<1rDk>/5C_S*VhLDk42m]7s#I:P"!3[GR;@gN2TNGII>1UQ2OSZ+HJM>`.@,C!rmXD,"P8'.%pKV!ad)_#SJu"MKK@'(l(]dS<QIk.RMGLVtR)(G)R]*-oTkrG=o,OWCV77b#YM`QCof-V@V!\W4(1sh"r1':)=eaM2/_e)8?)u2,%RIGGZ23ennkC*LLEkS=8]Z7XC)1K>>4EY4emuR&,bPcS0.K/dDs8/uL!3+9!_nXY@s*/!bm5HQThUs<KDEIpr&Ul=`1"#de^<-Vt%:\h*-R_RM83l-`"r)g_e<7`-r7pS'%?0V6]IJnLe,(A'(=8tr_JZm3s!JD;8(ka1*-IXBt"qr=TQb5S#-U'gDECH7,0Om=3Z>(>)%cE;?@<g$*1<?RB.`-nsV6<2ME/FQqQ*uD;-(Wq.<3JQ7cYM\$Kq9q%o<Ce+VbL#KrhkpLNq@9mQ8`u.u:CF)Ra!?F-kd?r9j82[&%8Fpf)o?g[N,t^X8Pgec"V5`;<NRT0d?#[rVOm<X%k`s4Y/p(\AK.Imjf!AS`lD-o%7M,+$'mr7HD7YV#WHO+^LpG_L%F)g#q'@ap%=):dG3t4\_C4i+L,GGPHpkd:E\)#)8>0p-8H8Pst5,4U7VcQs@QmnQjG/;ELH9<@a4S?9u]7@*[7_-5T,8'B'@-E@JGRUnfBq.$c%:9W.)WiQ+W7ri;Gc[iNuDV"N((!R/@[I4,:^utI6o:&n=6_Sl24@aOPEL!A)?$7IUhbaZ(!ir*hj=$I37GXkCqh2P9.W@shbgT+6%QT'JsEAtbKOG9EUV;CrQ4?Ub^];[emWgN!9<2>4h.[;3G_)c&8jq7-Wo,Q;+YUX8.IJ.*59C"FZ(&I@VY^rtg"\NRr2h\+H/=>G(%ZK.f^$Qr@PW],Rubm`h[<AZ3;j[r75PYnNBO\gm4q7!kNk,:[d$?Y^*W>G&I:Z.lPQK#q;)%TWWqW9\89o85*G&_WXRB!Th3,:e%%lcRm7[3mu5G<^9O?[SeYdc6^/_.%jteE9$OA)0OtT+nSY$*q1=#,fuj+fjPEb`I@AS<i8q,Yseb)(pb"m]pf%551Q^?*87G)Lr-i%ZL.5s((Z9#QmM#57s+Qg9V'7VN2'fA2`JY'8@/0_W6XdGLhb`cdHLHfW8GYomuR%fWF"^2NK9"_.HLIPh7]N6#:?*McA(DI-!hOD%k>E@W8u:=Lp43tAD1j#YhKH\?#uJRYa,Z@nJI6GWe!+2_@nn7d#'1udM`qH<OQ669ODjD(8R#ES8"PcqjI_eH]nWj$o[d-sL>/?Z%b]\IJen7"GbMAm0<oT=j-Da..7d$OFKJ^[^ad[JNL/Ak#,e;_;j@p2pSOf4MI\2rq.2mSi$VT;)d=`Wn>WOTgnOD0J#oNp;H%4ra%Hi<m,\!&B['%nfrV7>1S(Wkd'f9TD_lVZ&YSlRqH5ntXrG[8GQ@;m:oBK>?L9b,u\73L=+&QU3bE5YV$+HO@G0r8N>^^P3p3e:(o%2YY9%i"Ok>VKO,d$_^,?hX19]*gk)V<%iW-Q7%cXQC@33)qeT^P>U>:M@ug=6nNg,1.'AUj?Bo)C@3%H8'[+]9VS=gO)D)nkjU(m%rS]2F38Q-gC:a,B=_"U=g7Ib(<H/P;c2EVdJ,8G[O*[InCTD\N2Q]GP=1-4gKXJ<:(\<5l6TkAZib2PW5De?II;GRG?%&7bg,7Im%`8@3=4Tt9N&6J;@o0QLI$H0rJQCM'nahcQrp;Mk`3OPTa_FCDK"Hq6G>kgdO;?RQ!DJXN0:GeNg)MP7"e[<#F;^$@#67;<X96VD"%\+-D4H1$s8f(=eJ9ga/&>X?q5dC9LA98B=;]-fW@I7jW%n#PljES"&f"iSkiYVo@cCo;"g^">oal<\%G7*j/*cn2!<otYZ2N[=t-%8mj+Oa9kQT(Qh&)Y-%si-kK-@="Y#H%LHe->+F.ai.TRZe!et,WUHiian*@2##Rc@koXE-#;Ji)a7bSE/R%s1X_SV0YeRQl)N;]E%6rPW)HGmU*+'46LPbZ!q0q2Eo+$QbYgQVJ1E"XSeN-5kqDftDIP<.(gkNaP8-[.'N(tI-6pUL/s=cY7Ln3j=QfpVCpfYPu>d^[&S%kE+NP&c,Y1gR':_LRM5"qHuM':B1/%@pYY*k,?@+>;19Ik\lBpn(&1L("0seB.*]K@G4)`O;D]TC%%6YYoKCCB?B7LK9WIE.]sPI%R75?[Drop4WU#*XHDi?-I$<?NeupP3&,^`YBadofm?/JN>Q0D1!OQ5j,!/<9Yibb?o_G^#$G2).X05*mKZ=,WoBL8!.ktKL^C\=F%kr);?Jp]EZr0.@ZnA*>=\,`Wh*OGHk<'e5@Y!!pZEQ.el5Vg3@-ek&mrV&<k`+NuRECcE%BRO.H!UrJ>Df81/#JHi>&E?G)dO*Bb%qGa[X7cZ%r-&Opp#A*S^"ut6jBQl^qlgWf#+8h*M.O9;Pm'#t<VLH9\,6T3k@YC;UNDH[kDY$Y9Y[Vu!5mTKgk^\Y@r>fTe4P5Wi%0IXi6HX:CaOq+'aC?=IBFXD+@]!^-NZN<`;6nS5HZ=,)R/)IMNHqTF54>BJc)`qK7W9BS_`^!4@#R>Ar5!g_[,7'Z1RiE5u_&8Gi%9+6+*/#97:FDW0*DWacu.fT@YhIZbcM'2X\.3"AOaL"C/+as<7]snH,=1cf9YQ"F^g4Y/G"^MP=F4FiAC>oEBkVfH=m2!Ki6_h-.%?P0#B0l%3Scu]p/R_S[\pRh=%De,4m-j+41Pn(4/(e9q?IGOg4FHam=[p_HFbI+O!rI)GR)^34G?"'0LErAK*rV=pCq0NNP0f\".%[CU,ILEK3208MZ>'$d>.)oVos7kE9%X;i.Q1qU56l&P2VI<F\.iZ3lR\->^e.Fjt<.qmHtq$(jmHUKUn>sKF,Lam?)C#E>J!(M0h%Qtc+TcKeheWfkDGckDkjduIrRFD>n3T,$9,<O,@&-eTE#_lAs&`_i-V%3`53[<(FFQ2=#rnN:Ob)73%Y+cfpAH.Y`ZZuHHh]T*e<%Z:1<Kn\3[7$U:uVc0"C2<pVqX5=<hRiW3RB;02?TTVl*:VU=9(F;URBP;)$@A7Kfk-b.RHF;.H`jjmLl01X^OM"VMsL+#E_Q"cI'%gX@\C8L4^@Ae<lWb\7chQX@nihu!:eBX^+nVS;iF:kXX*.7&'iF-NH0]3\$h:VWmr6h]l_1_DUF2I\`S?'Pd->.mGX8L9Wo&)*hl%.Y[NTmjPmd<NWUr%pKaKgPZk52og7P"`U%i_sOso=dBnTius#g2KLZW`Uot#:R:3\60n1+3hdJsH1R&,H?(Tu*g;uU(LE7hP[m$M%rjsnj1[.TAZjTRg*XnB>,aYAfpIK"U"ke0tL\ap5n%!M.W,h.(&WDMeb/XeX.[hJE5+2=)XI]RPeg3`$Gf@N2Ad?..*)THYAG"qZ%$&TWb04L=u`-51X]V#T"?KWg'dAJ&-a6GL,RsJRs\Yd+nGJ.4*#k;--a5,`+3c^WL*9T>@UW!P3Ot*6"(PcJ70Se:;Q<OlfFig4$%K%g;77ouHMUEGI,.\KDc=B.6;rG@g9+_K%K99>V@_;2287&;TY6Em]I`krt%>cI1HB]$$0DJLIRe3hVc#`e-4Q7haseQa(Wp1+^i%pe]^\=32659LK;9MY!8]b/<!ZO;2f)0"jp//>oAOd"N.3HT;pd1_Z,h3Kt;-dWD0s$3=lXIYfJe9)Q-`UhP9VI*X$3V\!6W^*0`s%4g5W1=;Q/rD76`5:G3AK3=XsJnW'u];fp\r]ZHhcfDUTZR=ub=*M;oDQMa-1P7LEBS0E:QLK?=cSJN$!Tp(3EjKraoJ86c8N]B=0%r5'3bG<$n:,P%\4,0tjP`$#</'L^mAeQI\7[OD0H<rRU^gP=m9+:KtVM;F(Cm3DrNHFO+4ZUf//bfO`-Y-_i&>pcbg^uS4*@n?<d%f<<P@(/ioG'(jO/,QMjYQX#sbP#Nf/>c3DcWt<k`XS`L0YXD=mn&a(lpeX03<$J$/%+,]$+0@s_LG!u.rmb&$Y_Cjg!OPuB@S5Bi%><ItT'JofPF%E(cZpb;/ZW%-$nT(N!nRt):GZG>l2ADa\*)!q$DNNCHTNE`]KF)[YZYX'PiCX[T%h]:C+WjC9'I,n!b19c3#/qQ'%iP@9o7#DK7VFCF>[l"'?1ioFG)VA_`iMg4got.4Mm92W0.uBlK-prEg8n]R4%Ui2QOFCSS4fFO20&tn`m?f&n4t/M#fI]R]2]peZ%7>c#fRFm0&)Od):Po]=hG+A]Y=D#Nm/BK3#`A+-rjZepIe'f)J62\TR^;>uuV+bS9C1qM?m]oM`lEo0T@P8]'n,Fr4VO*uW.&F?l%ePqRG((57o66>"`.A`O0QL.45Zjrt'.h`oG[MuG-1Ie(BRW=J;0N8SU1JttXTbKXSAhl-Y!^QOUpcK'qoRONR`B:f[%,(l$C",-2%>bM!OK^SMe7U4_@]":38AC(f`)"k%>$e\@\&oo=*b@UUS?-LD[,c!k/-42rN<k8W*M%_K8Y]:K96#2XlU,ikIWmdD@pSFjAUeLRI%;&$TT]TMA@_K(tm33N3W0ZZ'W8J_4'dq.G;DChFnkZS'ln2qC)UG,Q>?^f[F)?>GKT[R/bMZeu065_iA]muWIi_d9_gLN0LgUR::%U,E]RCJQGY%631a-uqIOr:Z6o\+c&nbQtlM\6@Yk\XH&Q"Am>S5(EE\gh#N[896iiqORDN?R@XU5s.#YTg2k[]AVAr<lH_q5;'kN%554RZ:^SZIph:YCCUlN.I08oZ6ZIC-;o(si;Ps5UV7OYX)SR\ua6*]U1l!_Oo8D3*U0]j?;Pljt$G@_thH*Mn%E+ucR*gJrP'A:s%KG<u[[NXa8aN?kTaULZqohGn1mgB3W/$PWg8s<+\,+V#j`SlT[KZ(Pn1_8>:<g"(F<!`K9J7=XS[a?ql8n^^<^`Xn%TW1]lY@V3e%.ls*VM2%1YP>349Mdfo4.S6=u+UjYSl:i]%k^Im"5fKIr0A(\H<-,A3HXdUM9BQ)eT'HtN]u5+R`IfbGE[RJl666lk15q77CP,H$%Tc.nM?Eouoo>ViITsQ1Xc^,F<]I\(S!Hr$NlgiaRoc*mREH#pH5S>>"7%r8QS05AbpN_h)fs2ueQ:]+Llcr^i9\='#Hgd]8)>6A<%4lQqGHV,%phK@3cq$]o+7#C<,Xba20f*t/;@hqp'gsZeO`e'&&V%0bZE4oACCC.'+oZ,Rca+,06pRS^9fu56cMq3M"C^YlKUH'9J%*;N(JQkbW9l;*d.D?)6j:t64-;V3X>@6eQn(),PjU`:LWlF;lbp>uXECkhgl>)OLrkO/\^F9G!Jlrkd4R0J`<4Gl"gSEZ974fI;;%DIrERHQ7VE\Qje^nT]%,:j>l'6FK$_\l9H0_?k'pq3Zpb0i;2u[RBI/;SJ[16+WU97A/8o.%N"DKqJbnllt;N2J6!Fq\[_Tf-<tX%+JM*B"n2YYmMEQXUo-fPn;'ik.UcP0T/I(9i#,jgA<fXq5GaQD9G)cA@op7($rgXX*Y0$f,aqk=TVB7%87j*hF^je84LaaJgK2\J%dT)<qI=/:tBtQnjhnHBOiNRIgQk<6BfX,Po:eWlYotXY!Ff.N.-5B)&C+K@19Ls-,;f:Z>="eAXW=T?c*R[1s\#`6+TV<_?U`%AL%R*dMhOh2&e%AK;QDDGCN:BuIn5Q8FWcChX\+GdnL_#L*p*%T_.m&p'g<KW@o_1=\*MH,a/K9?S[^F/K>fl]nI+GA\*8Xq-9f/rTd%]f.R"S;Ef[/hccu,`8f>0j2DCDAaHG)#`V-?;G)j$>1JWmmoid$Yt,u"DK,4D29nt0tW"ugt>+EdB.3MKpm<dKQI#%)$"0TQ4s#s%(@+`#dBAFI<J9"$feGQ<(sp`eH8g\JX:Q6kpDf)qSY,2pN@5`Na\uP9'QFG2NS`U]"TT,uAY7I6a$G,*J#&TE#j[#P5X;_ZTFLs2%-gRUI9kPWcJoT5Ga@mtbV<Gr[K\EpJ;E;>8!<ZD-eBEga\47:Q1='PSbX>F%"[&b^j7!-9YZT?7a6OTu(mGjfema:7JVt8s;\-o>%$op;181GgJ&n1W5#F_K3cPC>"h"=c'4-b%#V?!qAD(sR/"aY7"d.UP@H4'CUnc:kR`</IN7=ha%_,IQ=o\+r-j.^==0H^_uU-%pe%#N['%s-^m-]/>S&g[)Q=ZIK`5W-[hoU`HO:!+O"7mlE$q8@RTZk]tILl'PN`=k\&A@$+HHFm"E/9u]lCb!8'h2+Jdd8>IU0BQhUa%l@`Z0!m?i,F!SiI[aeJ6m+dDKZo+X+Cf:S%eX>\*!-QN/df?'!`A+)Il>`*EFF=TDUCZ!3B)"&S<$SbXU7I(4Nhl"efO!jrI!3O0%LLs%ePgSXU"9^e<&.F&BpJB)&/j`+8.BiI.SQ`hK-1]Z?@r(K,(9!)R)KE1'q@Qr,J$&ah"&?TZn_u_)He&^QqEo^-T$sVBJ*V1X%QM/F<3<7Sm=[&%<>&:p/@7&%/[l#LD1W;Uug+2"l<1ZoAEGgW@FAAh3>V[9j0B003D<5`+F<`[L7deDjUG%gT>:?TsHIl$U,T48A%8+e]KEp"Po/Ca?_C*=;dR,/6e=rf_Lf_r`9+Tha802[_tWq7MTM&/\-(1=jS=`]gDHbHtS0\q_C_VieD[Kkc3%'__GkLgSaK\tY*%QJ-q@rUueC"rPsZA].M@`Oe-bX]l7&"f(5E,'*4%>>,p>.R.[Gk[bZd(:2u>$H+(A;g&t4Bar;ojW'/MGmtmTea;+HOt1NGmY$76%lDC?<>:nVc,=n2NZ8M4p;GcUlHAq:#elX@XAs29K_?+X:1T\iSgmCfIZ9uQ_:RuC$;VqVQ[mfQkIe/I2roXq=kEk#e`U!<up>Np%%qn=&RYIi'AmI#FKGMIWC]H"Q\e*cOB[<m-X4RO8W0BZE>mZ5QUnSha9:*1#('KI75hnIe!^3S9-!"=-62#~>%AI9_PrivateDataEnd