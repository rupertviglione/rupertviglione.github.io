{
  "version": 3,
  "sources": ["../../src/js/media-fullscreen-button.js"],
  "sourcesContent": ["/*\n  <media-fullscreen-button media=\"#myVideo\" fullscreen-element=\"#myContainer\">\n\n  The fullscreen-element attribute can be used to say which element\n  to make fullscreen.\n  If none, the button will look for the closest media-container element to the media.\n  If none, the button will make the media fullscreen.\n*/\nimport MediaChromeButton from './media-chrome-button.js';\nimport { defineCustomElement } from './utils/defineCustomElement.js';\nimport {\n  Window as window,\n  Document as document,\n} from './utils/server-safe-globals.js';\nimport { MediaUIEvents, MediaUIAttributes } from './constants.js';\nimport { verbs } from './labels/labels.js';\n\nconst enterFullscreenIcon = `<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n  <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n  <path class=\"icon\" d=\"M7 14H5v5h5v-2H7v-3zm-2-4h2V7h3V5H5v5zm12 7h-3v2h5v-5h-2v3zM14 5v2h3v3h2V5h-5z\"/>\n</svg>`;\n\nconst exitFullscreenIcon = `<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\">\n  <path d=\"M0 0h24v24H0z\" fill=\"none\"/>\n  <path class=\"icon\" d=\"M5 16h3v3h2v-5H5v2zm3-8H5v2h5V5H8v3zm6 11h2v-3h3v-2h-5v5zm2-11V5h-2v5h5V8h-3z\"/>\n</svg>`;\n\nconst slotTemplate = document.createElement('template');\nslotTemplate.innerHTML = `\n  <style>\n  :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) slot:not([name=exit]) > *, \n  :host([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}]) ::slotted(:not([slot=exit])) {\n    display: none;\n  }\n\n  /* Double negative, but safer if display doesn't equal 'block' */\n  :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) slot:not([name=enter]) > *, \n  :host(:not([${MediaUIAttributes.MEDIA_IS_FULLSCREEN}])) ::slotted(:not([slot=enter])) {\n    display: none;\n  }\n  </style>\n\n  <slot name=\"enter\">${enterFullscreenIcon}</slot>\n  <slot name=\"exit\">${exitFullscreenIcon}</slot>\n`;\n\nconst updateAriaLabel = (el) => {\n  const isFullScreen =\n    el.getAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN) != null;\n  const label = isFullScreen\n    ? verbs.EXIT_FULLSCREEN()\n    : verbs.ENTER_FULLSCREEN();\n  el.setAttribute('aria-label', label);\n};\n\nclass MediaFullscreenButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [...super.observedAttributes, MediaUIAttributes.MEDIA_IS_FULLSCREEN];\n  }\n\n  constructor(options = {}) {\n    super({ slotTemplate, ...options });\n  }\n\n  connectedCallback() {\n    updateAriaLabel(this);\n    super.connectedCallback();\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === MediaUIAttributes.MEDIA_IS_FULLSCREEN) {\n      updateAriaLabel(this);\n    }\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n  }\n\n  handleClick(_e) {\n    const eventName =\n      this.getAttribute(MediaUIAttributes.MEDIA_IS_FULLSCREEN) != null\n        ? MediaUIEvents.MEDIA_EXIT_FULLSCREEN_REQUEST\n        : MediaUIEvents.MEDIA_ENTER_FULLSCREEN_REQUEST;\n    this.dispatchEvent(\n      new window.CustomEvent(eventName, { composed: true, bubbles: true })\n    );\n  }\n}\n\ndefineCustomElement('media-fullscreen-button', MediaFullscreenButton);\n\nexport default MediaFullscreenButton;\n"],
  "mappings": "qrBAAA,8BAQA,MAA8B,yCAC9B,EAAoC,0CACpC,EAGO,0CACP,EAAiD,0BACjD,EAAsB,8BAEtB,KAAM,GAAsB;AAAA;AAAA;AAAA,QAKtB,EAAqB;AAAA;AAAA;AAAA,QAKrB,EAAe,WAAS,cAAc,YAC5C,EAAa,UAAY;AAAA;AAAA,WAEd,oBAAkB;AAAA,WAClB,oBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKb,oBAAkB;AAAA,gBAClB,oBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,uBAKX;AAAA,sBACD;AAAA,EAGtB,KAAM,GAAkB,AAAC,GAAO,CAG9B,KAAM,GAAQ,AADZ,EAAG,aAAa,oBAAkB,sBAAwB,KAExD,QAAM,kBACN,QAAM,mBACV,EAAG,aAAa,aAAc,IAGhC,eAAoC,UAAkB,WACzC,qBAAqB,CAC9B,MAAO,CAAC,GAAG,MAAM,mBAAoB,oBAAkB,qBAGzD,YAAY,EAAU,GAAI,CACxB,MAAM,CAAE,kBAAiB,IAG3B,mBAAoB,CAClB,EAAgB,MAChB,MAAM,oBAGR,yBAAyB,EAAU,EAAU,EAAU,CACrD,AAAI,IAAa,oBAAkB,qBACjC,EAAgB,MAElB,MAAM,yBAAyB,EAAU,EAAU,GAGrD,YAAY,EAAI,CACd,KAAM,GACJ,KAAK,aAAa,oBAAkB,sBAAwB,KACxD,gBAAc,8BACd,gBAAc,+BACpB,KAAK,cACH,GAAI,UAAO,YAAY,EAAW,CAAE,SAAU,GAAM,QAAS,OAKnE,0BAAoB,0BAA2B,GAE/C,GAAO,GAAQ",
  "names": []
}
