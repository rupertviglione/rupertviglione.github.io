{
  "version": 3,
  "sources": ["../../src/js/media-pip-button.js"],
  "sourcesContent": ["import MediaChromeButton from './media-chrome-button.js';\nimport { defineCustomElement } from './utils/defineCustomElement.js';\nimport {\n  Window as window,\n  Document as document,\n} from './utils/server-safe-globals.js';\nimport { MediaUIEvents, MediaUIAttributes } from './constants.js';\nimport { verbs } from './labels/labels.js';\n\nconst pipIcon =\n  '<svg aria-hidden=\"true\" xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\"><path class=\"icon\" d=\"M19 7h-8v6h8V7zm2-4H3c-1.1 0-2 .9-2 2v14c0 1.1.9 1.98 2 1.98h18c1.1 0 2-.88 2-1.98V5c0-1.1-.9-2-2-2zm0 16.01H3V4.98h18v14.03z\"/><path d=\"M0 0h24v24H0z\" fill=\"none\"/></svg>';\n\nconst slotTemplate = document.createElement('template');\nslotTemplate.innerHTML = `\n  <style>\n  :host([${MediaUIAttributes.MEDIA_IS_PIP}]) slot:not([name=exit]) > *, \n  :host([${MediaUIAttributes.MEDIA_IS_PIP}]) ::slotted(:not([slot=exit])) {\n    display: none;\n  }\n\n  /* Double negative, but safer if display doesn't equal 'block' */\n  :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) slot:not([name=enter]) > *, \n  :host(:not([${MediaUIAttributes.MEDIA_IS_PIP}])) ::slotted(:not([slot=enter])) {\n    display: none;\n  }\n  </style>\n\n  <slot name=\"enter\">${pipIcon}</slot>\n  <slot name=\"exit\">${pipIcon}</slot>\n`;\n\nconst updateAriaLabel = (el) => {\n  const isPip = el.getAttribute(MediaUIAttributes.MEDIA_IS_PIP) != null;\n  const label = isPip ? verbs.EXIT_PIP() : verbs.ENTER_PIP();\n  el.setAttribute('aria-label', label);\n};\n\nclass MediaPipButton extends MediaChromeButton {\n  static get observedAttributes() {\n    return [...super.observedAttributes, MediaUIAttributes.MEDIA_IS_PIP, MediaUIAttributes.MEDIA_PIP_UNAVAILABLE];\n  }\n\n  constructor(options = {}) {\n    super({ slotTemplate, ...options });\n  }\n\n  connectedCallback() {\n    updateAriaLabel(this);\n    super.connectedCallback();\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === MediaUIAttributes.MEDIA_IS_PIP) {\n      updateAriaLabel(this);\n    }\n    super.attributeChangedCallback(attrName, oldValue, newValue);\n  }\n\n  handleClick(_e) {\n    const eventName =\n      this.getAttribute(MediaUIAttributes.MEDIA_IS_PIP) != null\n        ? MediaUIEvents.MEDIA_EXIT_PIP_REQUEST\n        : MediaUIEvents.MEDIA_ENTER_PIP_REQUEST;\n    this.dispatchEvent(\n      new window.CustomEvent(eventName, { composed: true, bubbles: true })\n    );\n  }\n}\n\ndefineCustomElement('media-pip-button', MediaPipButton);\n\nexport default MediaPipButton;\n"],
  "mappings": "qrBAAA,oCAA8B,yCAC9B,EAAoC,0CACpC,EAGO,0CACP,EAAiD,0BACjD,EAAsB,8BAEtB,KAAM,GACJ,mRAEI,EAAe,WAAS,cAAc,YAC5C,EAAa,UAAY;AAAA;AAAA,WAEd,oBAAkB;AAAA,WAClB,oBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,gBAKb,oBAAkB;AAAA,gBAClB,oBAAkB;AAAA;AAAA;AAAA;AAAA;AAAA,uBAKX;AAAA,sBACD;AAAA,EAGtB,KAAM,GAAkB,AAAC,GAAO,CAE9B,KAAM,GAAQ,AADA,EAAG,aAAa,oBAAkB,eAAiB,KAC3C,QAAM,WAAa,QAAM,YAC/C,EAAG,aAAa,aAAc,IAGhC,eAA6B,UAAkB,WAClC,qBAAqB,CAC9B,MAAO,CAAC,GAAG,MAAM,mBAAoB,oBAAkB,aAAc,oBAAkB,uBAGzF,YAAY,EAAU,GAAI,CACxB,MAAM,CAAE,kBAAiB,IAG3B,mBAAoB,CAClB,EAAgB,MAChB,MAAM,oBAGR,yBAAyB,EAAU,EAAU,EAAU,CACrD,AAAI,IAAa,oBAAkB,cACjC,EAAgB,MAElB,MAAM,yBAAyB,EAAU,EAAU,GAGrD,YAAY,EAAI,CACd,KAAM,GACJ,KAAK,aAAa,oBAAkB,eAAiB,KACjD,gBAAc,uBACd,gBAAc,wBACpB,KAAK,cACH,GAAI,UAAO,YAAY,EAAW,CAAE,SAAU,GAAM,QAAS,OAKnE,0BAAoB,mBAAoB,GAExC,GAAO,GAAQ",
  "names": []
}
