{
  "version": 3,
  "sources": ["../src/js/media-chrome-button.js"],
  "sourcesContent": ["import { MediaUIAttributes } from './constants.js';\nimport { defineCustomElement } from './utils/defineCustomElement.js';\nimport {\n  Window as window,\n  Document as document,\n} from './utils/server-safe-globals.js';\n\nconst template = document.createElement('template');\n\ntemplate.innerHTML = `\n<style>\n  :host {\n    display: inline-block;\n    width: auto;\n    height: auto;\n    vertical-align: middle;\n    box-sizing: border-box;\n    background: var(--media-control-background, rgba(20,20,30, 0.7));\n\n    padding: 10px;\n\n    /* Vertically center any text */\n    font-size: 14px;\n    font-weight: bold;\n    color: #ffffff;\n    text-align: center;\n\n    transition: background 0.15s linear;\n\n    pointer-events: auto;\n    cursor: pointer;\n    font-family: Arial, sans-serif;\n    vertical-align: middle;\n  }\n\n  /*\n    Only show outline when keyboard focusing.\n    https://drafts.csswg.org/selectors-4/#the-focus-visible-pseudo\n  */\n  :host-context([media-keyboard-control]):host(:focus),\n  :host-context([media-keyboard-control]):host(:focus-within) {\n    box-shadow: inset 0 0 0 2px rgba(27, 127, 204, 0.9);\n  }\n\n  :host(:hover) {\n    background: var(--media-control-hover-background, rgba(50,50,70, 0.7));\n  }\n\n  svg, img, ::slotted(svg), ::slotted(img) {\n    width: var(--media-button-icon-width, 24px);\n    height: var(--media-button-icon-height);\n    transform: var(--media-button-icon-transform);\n    transition: var(--media-button-icon-transition);\n    fill: var(--media-icon-color, #eee);\n    vertical-align: middle;\n    max-width: 100%;\n    max-height: 100%;\n    min-width: 100%;\n    min-height: 100%;\n  }\n\n  ::slotted(div), ::slotted(span) {\n    height: 24px;\n  }\n</style>\n`;\n\nconst ButtonPressedKeys = ['Enter', ' '];\n\nclass MediaChromeButton extends window.HTMLElement {\n  static get observedAttributes() {\n    return [MediaUIAttributes.MEDIA_CONTROLLER];\n  }\n\n  constructor(options = {}) {\n    super();\n\n    const shadow = this.attachShadow({ mode: 'open' });\n\n    const buttonHTML = template.content.cloneNode(true);\n    this.nativeEl = buttonHTML;\n\n    // Slots\n    let slotTemplate = options.slotTemplate;\n\n    if (!slotTemplate) {\n      slotTemplate = document.createElement('template');\n      slotTemplate.innerHTML = `<slot>${options.defaultContent || ''}</slot>`;\n    }\n\n    this.nativeEl.appendChild(slotTemplate.content.cloneNode(true));\n\n    shadow.appendChild(buttonHTML);\n\n    this.addEventListener('click', (e) => {\n      this.handleClick(e);\n    });\n\n    // NOTE: There are definitely some \"false positive\" cases with multi-key pressing,\n    // but this should be good enough for most use cases.\n    const keyUpHandler = (e) => {\n      const { key } = e;\n      if (!ButtonPressedKeys.includes(key)) {\n        this.removeEventListener('keyup', keyUpHandler);\n        return;\n      }\n\n      this.handleClick(e);\n    };\n\n    this.addEventListener('keydown', (e) => {\n      const { metaKey, altKey, key } = e;\n      if (metaKey || altKey || !ButtonPressedKeys.includes(key)) {\n        this.removeEventListener('keyup', keyUpHandler);\n        return;\n      }\n      this.addEventListener('keyup', keyUpHandler);\n    });\n  }\n\n  attributeChangedCallback(attrName, oldValue, newValue) {\n    if (attrName === MediaUIAttributes.MEDIA_CONTROLLER) {\n      if (oldValue) {\n        const mediaControllerEl = document.getElementById(oldValue);\n        mediaControllerEl?.unassociateElement?.(this);\n      }\n      if (newValue) {\n        const mediaControllerEl = document.getElementById(newValue);\n        mediaControllerEl?.associateElement?.(this);\n      }\n    }\n  }\n\n  connectedCallback() {\n    this.setAttribute('role', 'button');\n    this.setAttribute('tabindex', 0);\n\n    const mediaControllerId = this.getAttribute(\n      MediaUIAttributes.MEDIA_CONTROLLER\n    );\n    if (mediaControllerId) {\n      const mediaControllerEl = document.getElementById(mediaControllerId);\n      mediaControllerEl?.associateElement?.(this);\n    }\n  }\n\n  disconnectedCallback() {\n    const mediaControllerSelector = this.getAttribute(\n      MediaUIAttributes.MEDIA_CONTROLLER\n    );\n    if (mediaControllerSelector) {\n      const mediaControllerEl = document.getElementById(mediaControllerId);\n      mediaControllerEl?.unassociateElement?.(this);\n    }\n  }\n\n  handleClick() {}\n}\n\ndefineCustomElement('media-chrome-button', MediaChromeButton);\n\nexport default MediaChromeButton;\n"],
  "mappings": "AAAA,mDACA,qEACA,sEAKA,KAAM,GAAW,EAAS,cAAc,YAExC,EAAS,UAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,EA0DrB,KAAM,GAAoB,CAAC,QAAS,KAEpC,eAAgC,GAAO,WAAY,WACtC,qBAAqB,CAC9B,MAAO,CAAC,EAAkB,kBAG5B,YAAY,EAAU,GAAI,CACxB,QAEA,KAAM,GAAS,KAAK,aAAa,CAAE,KAAM,SAEnC,EAAa,EAAS,QAAQ,UAAU,IAC9C,KAAK,SAAW,EAGhB,GAAI,GAAe,EAAQ,aAE3B,AAAK,GACH,GAAe,EAAS,cAAc,YACtC,EAAa,UAAY,SAAS,EAAQ,gBAAkB,aAG9D,KAAK,SAAS,YAAY,EAAa,QAAQ,UAAU,KAEzD,EAAO,YAAY,GAEnB,KAAK,iBAAiB,QAAS,AAAC,GAAM,CACpC,KAAK,YAAY,KAKnB,KAAM,GAAe,AAAC,GAAM,CAC1B,KAAM,CAAE,OAAQ,EAChB,GAAI,CAAC,EAAkB,SAAS,GAAM,CACpC,KAAK,oBAAoB,QAAS,GAClC,OAGF,KAAK,YAAY,IAGnB,KAAK,iBAAiB,UAAW,AAAC,GAAM,CACtC,KAAM,CAAE,UAAS,SAAQ,OAAQ,EACjC,GAAI,GAAW,GAAU,CAAC,EAAkB,SAAS,GAAM,CACzD,KAAK,oBAAoB,QAAS,GAClC,OAEF,KAAK,iBAAiB,QAAS,KAInC,yBAAyB,EAAU,EAAU,EAAU,CAxHzD,QAyHI,GAAI,IAAa,EAAkB,iBAAkB,CACnD,GAAI,EAAU,CACZ,KAAM,GAAoB,EAAS,eAAe,GAClD,oBAAmB,qBAAnB,eAAwC,MAE1C,GAAI,EAAU,CACZ,KAAM,GAAoB,EAAS,eAAe,GAClD,oBAAmB,mBAAnB,eAAsC,QAK5C,mBAAoB,CArItB,MAsII,KAAK,aAAa,OAAQ,UAC1B,KAAK,aAAa,WAAY,GAE9B,KAAM,GAAoB,KAAK,aAC7B,EAAkB,kBAEpB,GAAI,EAAmB,CACrB,KAAM,GAAoB,EAAS,eAAe,GAClD,oBAAmB,mBAAnB,eAAsC,OAI1C,sBAAuB,CAlJzB,MAsJI,GAHgC,KAAK,aACnC,EAAkB,kBAES,CAC3B,KAAM,GAAoB,EAAS,eAAe,mBAClD,oBAAmB,qBAAnB,eAAwC,OAI5C,aAAc,GAGhB,EAAoB,sBAAuB,GAE3C,GAAO,GAAQ",
  "names": []
}
