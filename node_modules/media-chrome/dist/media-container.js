import{defineCustomElement as y}from"./utils/defineCustomElement.js";import{Window as s,Document as g}from"./utils/server-safe-globals.js";import{MediaUIEvents as p,MediaUIAttributes as b,MediaStateChangeEvents as u}from"./constants.js";import{nouns as v}from"./labels/labels.js";const f=g.createElement("template");f.innerHTML=`
  <style>
    :host {
      box-sizing: border-box;
      position: relative;
      display: inline-block;
      line-height: 0;
      background-color: #000;
    }

    :host(:not([audio])) *[part~=layer]:not([part~=media-layer]) {
      position: absolute;
      top: 0;
      left: 0;
      bottom: 0;
      right: 0;
      display: flex;
      flex-flow: column nowrap;
      align-items: start;
      pointer-events: none;
      background: none;
    }

    :host(:not([audio])) :is([part~=gestures-layer],[part~=media-layer])  {
      pointer-events: auto;
    }
    
    :host(:not([audio])) *[part~=layer][part~=centered-layer] {
      align-items: center;
      justify-content: center;
    }

    .spacer {
      pointer-events: none;
      background: none;
    }

    /* Position the media and poster elements to fill the container */
    ::slotted([slot=media]),
    ::slotted([slot=poster]) {
      width: 100%;
      height: 100%;
    }

    /* Video specific styles */
    :host(:not([audio])) .spacer {
      flex-grow: 1;
    }

    /* Safari needs this to actually make the element fill the window */
    :host(:-webkit-full-screen) {
      /* Needs to use !important otherwise easy to break */
      width: 100% !important;
      height: 100% !important;
    }

    /* Need to revisit this. May be too presumptuous for user-inactive behavior */
    ::slotted(:not([slot=media]):not([slot=poster])) {
      pointer-events: auto;
    }

    /* Only add these if auto hide is not disabled */
    ::slotted(:not([slot=media]):not([no-auto-hide])) {
      opacity: 1;
      transition: opacity 0.25s;
    }

    /* Hide controls when inactive, not paused, not audio and auto hide not disabled */
    :host([user-inactive]:not([${b.MEDIA_PAUSED}]):not([audio])) ::slotted(:not([slot=media]):not([no-auto-hide])) {
      opacity: 0;
      transition: opacity 1s;
    }

    ::slotted(media-control-bar)  {
      align-self: stretch;
    }
  </style>

  <span part="layer media-layer">
    <slot name="media"></slot>
  </span>
  <span part="layer poster-layer">
    <slot name="poster"></slot>
  </span>
  <span part="layer gesture-layer">
    <slot name="gestures-chrome"></slot>
  </span>
  <span part="layer vertical-layer">
    <slot name="top-chrome"></slot>
    <span class="spacer"><slot name="middle-chrome"></slot></span>
    <!-- default, effectively "bottom-chrome" -->
    <slot></slot>
  </span>
  <span part="layer centered-layer">
    <slot name="centered-chrome"></slot>
  </span>
`;const A=Object.values(b);class E extends s.HTMLElement{constructor(){super();const e=this.attachShadow({mode:"open"});this.shadowRoot.appendChild(f.content.cloneNode(!0));const a=(h,c)=>{const d=this.media;for(let r of h)r.type==="childList"&&(r.removedNodes.forEach(l=>{if(l.slot=="media"&&r.target==this){let n=r.previousSibling&&r.previousSibling.previousElementSibling;if(!n||!d)this.mediaUnsetCallback(l);else{let m=n.slot!=="media";for(;(n=n.previousSibling)!==null;)n.slot=="media"&&(m=!1);m&&this.mediaUnsetCallback(l)}}}),d&&r.addedNodes.forEach(l=>{l==d&&this.handleMediaUpdated(d).then(n=>this.mediaSetCallback(n))}))};new MutationObserver(a).observe(this,{childList:!0,subtree:!0});let t=this.media,i=this.querySelector(":scope > slot[slot=media]");i&&i.addEventListener("slotchange",()=>{if(!i.assignedElements({flatten:!0}).length){this.mediaUnsetCallback(t);return}this.media&&(t=this.media,this.handleMediaUpdated(this.media).then(c=>this.mediaSetCallback(c)))})}static get observedAttributes(){return["autohide"].concat(A)}attributeChangedCallback(e,a,o){e.toLowerCase()=="autohide"&&(this.autohide=o)}get media(){let e=this.querySelector(":scope > [slot=media]");return(e==null?void 0:e.nodeName)=="SLOT"&&(e=e.assignedElements({flatten:!0})[0]),e}mediaSetCallback(e){this._mediaClickPlayToggle=a=>{const o=e.paused?p.MEDIA_PLAY_REQUEST:p.MEDIA_PAUSE_REQUEST;this.dispatchEvent(new s.CustomEvent(o,{composed:!0,bubbles:!0}))}}handleMediaUpdated(e){const a=i=>Promise.resolve(i),o=i=>(console.error('<media-chrome>: Media element set with slot="media" does not appear to be compatible.',i),Promise.reject(i));if(!e)return o(e);const t=e.nodeName.toLowerCase();return t.includes("-")?s.customElements.whenDefined(t).then(()=>a(e)):a(e)}mediaUnsetCallback(e){}connectedCallback(){const a=this.getAttribute("audio")!=null?v.AUDIO_PLAYER():v.VIDEO_PLAYER();this.setAttribute("role","region"),this.setAttribute("aria-label",a),this.media&&this.handleMediaUpdated(this.media).then(t=>this.mediaSetCallback(t)),this.setAttribute("user-inactive","user-inactive");const o=()=>{this.removeAttribute("user-inactive");const t=new s.CustomEvent(u.USER_INACTIVE,{composed:!0,bubbles:!0,detail:!1});this.dispatchEvent(t),s.clearTimeout(this._inactiveTimeout),!(this.autohide<0)&&(this._inactiveTimeout=s.setTimeout(()=>{this.setAttribute("user-inactive","user-inactive");const i=new s.CustomEvent(u.USER_INACTIVE,{composed:!0,bubbles:!0,detail:!0});this.dispatchEvent(i)},this.autohide*1e3))};this.addEventListener("keyup",t=>{o()}),this.addEventListener("keyup",t=>{this.setAttribute("media-keyboard-control","media-keyboard-control")}),this.addEventListener("mouseup",t=>{this.removeAttribute("media-keyboard-control")}),this.addEventListener("mousemove",t=>{if(t.target===this)return;this.removeAttribute("user-inactive");const i=new s.CustomEvent(u.USER_INACTIVE,{composed:!0,bubbles:!0,detail:!1});this.dispatchEvent(i),s.clearTimeout(this._inactiveTimeout),t.target===this.media&&o()}),this.addEventListener("mouseleave",t=>{if(this.autohide<0)return;this.setAttribute("user-inactive","user-inactive");const i=new s.CustomEvent(u.USER_INACTIVE,{composed:!0,bubbles:!0,detail:!0});this.dispatchEvent(i)})}set autohide(e){e=Number(e),this._autohide=isNaN(e)?0:e}get autohide(){return this._autohide===void 0?2:this._autohide}}y("media-container-temp",E);var M=E;export{M as default};
//# sourceMappingURL=media-container.js.map
