import{Window as i}from"./utils/server-safe-globals.js";import u from"./media-chrome-range.js";import{defineCustomElement as m}from"./utils/defineCustomElement.js";import{MediaUIAttributes as e,MediaUIEvents as E}from"./constants.js";import{nouns as d}from"./labels/labels.js";const l=100,M=r=>{var n;if(r.getAttribute(e.MEDIA_MUTED)!=null)return 0;const a=+((n=r.getAttribute(e.MEDIA_VOLUME))!=null?n:1);return Math.round(a*r.range.max)},c=({value:r,max:t})=>`${Math.round(r/t*100)}%`;class s extends u{static get observedAttributes(){return[...super.observedAttributes,e.MEDIA_VOLUME,e.MEDIA_MUTED,e.MEDIA_VOLUME_UNAVAILABLE]}constructor(){super();this.range.max=l,this.range.addEventListener("input",()=>{const a=this.range.value/this.range.max,n=new i.CustomEvent(E.MEDIA_VOLUME_REQUEST,{composed:!0,bubbles:!0,detail:a});this.dispatchEvent(n)})}connectedCallback(){this.range.setAttribute("aria-label",d.VOLUME()),super.connectedCallback()}attributeChangedCallback(t,a,n){if(t===e.MEDIA_VOLUME||t===e.MEDIA_MUTED){const o=M(this);this.range.value=o,this.range.setAttribute("aria-valuetext",c(this.range)),this.updateBar()}super.attributeChangedCallback(t,a,n)}}m("media-volume-range",s);var p=s;export{p as default};
//# sourceMappingURL=media-volume-range.js.map
