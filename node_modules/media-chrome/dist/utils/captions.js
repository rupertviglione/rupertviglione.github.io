const x=(t="")=>t.split(/\s+/),s=(t="")=>{const[r,e]=t.split(":"),o=e?decodeURIComponent(e):void 0;return{language:r,label:o}},a=(t="",r={})=>x(t).map(e=>{const o=s(e);return{...r,...o}}),i=t=>Array.isArray(t)?t.map(r=>typeof r=="string"?s(r):r):typeof t=="string"?a(t):[t],f=({label:t,language:r}={})=>t?`${r}:${encodeURIComponent(t)}`:r,y=(t=[])=>Array.prototype.map.call(t,f).join(" "),T=(t,r)=>e=>e[t]===r,p=t=>{const r=Object.entries(t).map(([e,o])=>T(e,o));return e=>r.every(o=>o(e))},d=(t,r=[],e=[])=>{const o=i(e).map(p),c=n=>o.some(u=>u(n));Array.from(r).filter(c).forEach(n=>{n.mode=t})},l=(t,r=()=>!0)=>{if(!(t==null?void 0:t.textTracks))return[];const e=typeof r=="function"?r:p(r);return Array.from(t.textTracks).filter(e)};export{f as formatTextTrackObj,l as getTextTracksList,T as isMatchingPropOf,s as parseTextTrackStr,a as parseTextTracksStr,i as parseTracks,x as splitTextTracksStr,y as stringifyTextTrackList,p as textTrackObjAsPred,d as updateTracksModeTo};
//# sourceMappingURL=captions.js.map
