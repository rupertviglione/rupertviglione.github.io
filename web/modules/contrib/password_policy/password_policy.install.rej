***************
*** 18,35 ****
  function password_policy_install() {
    // Set user password reset timestamp to now.
    $timestamp = \Drupal::service("date.formatter")->format(\Drupal::time()->getRequestTime(), "custom", DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
-   /** @var \Drupal\user\UserInterface[] $users */
-   $users = \Drupal::entityTypeManager()->getStorage('user')->loadMultiple();
-   // @todo Get rid of updating all users.
-   foreach ($users as $user) {
-     if ($user->getAccountName() == NULL) {
-       continue;
-     }
-     $user
-       ->set('field_last_password_reset', $timestamp)
-       ->set('field_password_expiration', '0')
-       ->save();
-   }
  
    // Rebuild user entity form display for new fields.
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
--- 18,24 ----
  function password_policy_install() {
    // Set user password reset timestamp to now.
    $timestamp = \Drupal::service("date.formatter")->format(\Drupal::time()->getRequestTime(), "custom", DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
+   \Drupal::state()->set('password_policy.install_time', $timestamp);
  
    // Rebuild user entity form display for new fields.
    $storage = \Drupal::entityTypeManager()->getStorage('entity_form_display');
***************
*** 58,63 ****
      ->save();
  }
  
  /**
   * Add cron threshold to prevent memory overloads.
   */
--- 47,59 ----
      ->save();
  }
  
+ /**
+  * Implements hook_uninstall().
+  */
+ function password_policy_uninstall() {
+   \Drupal::state()->delete('password_policy.install_time');
+ }
+ 
  /**
   * Add cron threshold to prevent memory overloads.
   */
