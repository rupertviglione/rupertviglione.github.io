***************
*** 277,303 ****
        $expire_date = \Drupal::service('date.formatter')->format($expire_timestamp, 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
  
        // Configurable limit to users per policy per run, to prevent OOM errors.
-       $threshold = \Drupal::config('password_policy.settings')->get('cron_threshold');
  
        // Get list of users based on conditionals from above.
-       $query = \Drupal::entityQuery('user')
-         ->condition('status', 1)
-         ->condition('field_password_expiration', 0)
-         ->condition('field_last_password_reset', $expire_date, '<=')
-         ->condition('uid', 0, '>')
-         ->range(0, $threshold);
- 
-       if (!in_array(AccountInterface::AUTHENTICATED_ROLE, $policy_roles)) {
-         $query->condition('roles', $policy_roles, 'IN');
        }
  
-       $valid_list = $query->execute();
- 
-       // Load User Objects.
-       $users = \Drupal::entityTypeManager()
-         ->getStorage('user')
-         ->loadMultiple($valid_list);
- 
        // Expire passwords.
        /** @var \Drupal\user\UserInterface $user */
        foreach ($users as $user) {
--- 277,337 ----
        $expire_date = \Drupal::service('date.formatter')->format($expire_timestamp, 'custom', DateTimeItemInterface::DATETIME_STORAGE_FORMAT, DateTimeItemInterface::STORAGE_TIMEZONE);
  
        // Configurable limit to users per policy per run, to prevent OOM errors.
  
+       $threshold = \Drupal::config('password_policy.settings')->get('cron_threshold');
+       // Do not continue with User query if the policy's expire date is less
+       // than the install time of the module itself. This prevents the policy
+       // from immediately applying to all users after initial module install.
+       $install_time = \Drupal::state()->get('password_policy.install_time');
+       if ($install_time && $install_time >= $expire_date) {
+         $users = [];
+       }
        // Get list of users based on conditionals from above.
+       else {
+         // Limit to active users.
+         $query = \Drupal::entityQuery('user')
+           ->condition('status', 1);
+ 
+         // Limit to roles set by policy configuration.
+         if (!in_array(AccountInterface::AUTHENTICATED_ROLE, $policy_roles)) {
+           $query->condition('roles', $policy_roles, 'IN');
+         }
+ 
+         // Create condition groups for users with no value for the
+         // `field_password_expiration` and `field_last_password_reset` fields.
+         // This will be _all users_ after initial module installation.
+         $notset_group = $query
+           ->andConditionGroup()
+           ->condition('field_password_expiration', NULL, 'IS NULL')
+           ->condition('field_last_password_reset', NULL, 'IS NULL');
+ 
+         // Add condition group for users with a `field_password_expiration`
+         // value and `field_last_password_reset` value less than or equal the
+         // current expire date for the policy.
+         $isset_group = $query
+           ->andConditionGroup()
+           ->condition('field_password_expiration', 0)
+           ->condition('field_last_password_reset', $expire_date, '<=');
+ 
+         // Combine and add groups to query.
+         $combined_group = $query
+           ->orConditionGroup()
+           ->condition($notset_group)
+           ->condition($isset_group);
+         $query->condition($combined_group);
+ 
+         // Limit the number of results to the cron threshold setting.
+         $query->condition('uid', 0, '>')
+           ->range(0, $threshold);
+ 
+         $valid_list = $query->execute();
+ 
+         // Load User Objects.
+         $users = \Drupal::entityTypeManager()
+           ->getStorage('user')
+           ->loadMultiple($valid_list);
        }
  
        // Expire passwords.
        /** @var \Drupal\user\UserInterface $user */
        foreach ($users as $user) {
